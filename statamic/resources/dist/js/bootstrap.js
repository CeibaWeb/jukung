webpackJsonp([0],[,,,,,function(e,t,i){var s,n,a={};s=i(565),n=i(566),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},,,,function(e,t,i){"use strict";t.a={props:["config"],computed:{formData:function(){return this.$parent.$parent.$parent.$parent.formData}}}},function(e,t,i){var s,n,a={};s=i(541),n=i(542),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},,,function(e,t,i){var s,n,a={};s=i(257),n=i(258),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";(function(e){var i=function(){function e(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,i,s){return i&&e(t.prototype,i),s&&e(t,s),t}}();var s=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.fieldset=e,this.sections=this.parseSections(e.sections),this.metaFields=[]}return i(t,[{key:"parseSections",value:function(t){var i=this;return e.chain(t).mapObject(function(e,t){return e.handle=t,e.fields=i.parseFields(e.fields),e}).values().value()}},{key:"parseFields",value:function(t){return e.chain(t).mapObject(function(e,t){return e.name=t,e}).values().value()}},{key:"showSlug",value:function(e){return e&&this.metaFields.push("slug"),this}},{key:"showDate",value:function(e){return e&&this.metaFields.push("date"),this}},{key:"prependTitle",value:function(){return this.fieldsInSections().includes("title")||this.firstSectionFields().unshift({name:"title",type:"text",instructions:null,width:100}),this}},{key:"prependMeta",value:function(){var t=this;this.ensureSidebar();var i=this.fieldsInSections();return e.each(this.metaFields,function(e){i.includes(e)||t.pushSidebarField({name:e,type:e})}),this.removeEmptySidebar(),this}},{key:"pushSidebarField",value:function(e){var t=this.sidebarSectionFields(),i=Object.assign({isMeta:!0,width:100,localizable:!0},e||{});t.unshift(i)}},{key:"ensureSidebar",value:function(){e.find(this.sections,{handle:"sidebar"})||this.sections.push({handle:"sidebar",display:translate("cp.meta"),fields:[]})}},{key:"removeEmptySidebar",value:function(){this.sidebarSectionFields().length>0||(this.sections=e.reject(this.sections,function(e){return"sidebar"==e.handle}))}},{key:"fieldsInSections",value:function(){return e.chain(this.sections).map(function(e){return e.fields}).flatten().pluck("name").value()}},{key:"firstSectionFields",value:function(){return this.sections[0].fields}},{key:"sidebarSectionFields",value:function(){return e.find(this.sections,{handle:"sidebar"}).fields}},{key:"fields",value:function(){return e.chain(this.sections).pluck("fields").flatten().value()}}]),t}();t.a=s}).call(t,i(1))},function(e,t,i){var s,n,a={};s=i(271),n=i(290),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},,,,function(e,t,i){(function(e){"use strict";var t={autoSelfClosers:{area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0,menuitem:!0},implicitlyClosed:{dd:!0,li:!0,optgroup:!0,option:!0,p:!0,rp:!0,rt:!0,tbody:!0,td:!0,tfoot:!0,th:!0,tr:!0},contextGrabbers:{dd:{dd:!0,dt:!0},dt:{dd:!0,dt:!0},li:{li:!0},option:{option:!0,optgroup:!0},optgroup:{optgroup:!0},p:{address:!0,article:!0,aside:!0,blockquote:!0,dir:!0,div:!0,dl:!0,fieldset:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,menu:!0,nav:!0,ol:!0,p:!0,pre:!0,section:!0,table:!0,ul:!0},rp:{rp:!0,rt:!0},rt:{rp:!0,rt:!0},tbody:{tbody:!0,tfoot:!0},td:{td:!0,th:!0},tfoot:{tbody:!0},th:{td:!0,th:!0},thead:{tbody:!0,tfoot:!0},tr:{tr:!0}},doNotIndent:{pre:!0},allowUnquoted:!0,allowMissing:!0,caseFold:!0},i={autoSelfClosers:{},implicitlyClosed:{},contextGrabbers:{},doNotIndent:{},allowUnquoted:!1,allowMissing:!1,allowMissingTagName:!1,caseFold:!1};e.defineMode("xml",function(s,n){var a,o,r=s.indentUnit,l={},c=n.htmlMode?t:i;for(var d in c)l[d]=c[d];for(var d in n)l[d]=n[d];function u(e,t){function i(i){return t.tokenize=i,i(e,t)}var s=e.next();return"<"==s?e.eat("!")?e.eat("[")?e.match("CDATA[")?i(f("atom","]]>")):null:e.match("--")?i(f("comment","--\x3e")):e.match("DOCTYPE",!0,!0)?(e.eatWhile(/[\w\._\-]/),i(function e(t){return function(i,s){for(var n;null!=(n=i.next());){if("<"==n)return s.tokenize=e(t+1),s.tokenize(i,s);if(">"==n){if(1==t){s.tokenize=u;break}return s.tokenize=e(t-1),s.tokenize(i,s)}}return"meta"}}(1))):null:e.eat("?")?(e.eatWhile(/[\w\._\-]/),t.tokenize=f("meta","?>"),"meta"):(a=e.eat("/")?"closeTag":"openTag",t.tokenize=p,"tag bracket"):"&"==s?(e.eat("#")?e.eat("x")?e.eatWhile(/[a-fA-F\d]/)&&e.eat(";"):e.eatWhile(/[\d]/)&&e.eat(";"):e.eatWhile(/[\w\.\-:]/)&&e.eat(";"))?"atom":"error":(e.eatWhile(/[^&<]/),null)}function p(e,t){var i,s,n=e.next();if(">"==n||"/"==n&&e.eat(">"))return t.tokenize=u,a=">"==n?"endTag":"selfcloseTag","tag bracket";if("="==n)return a="equals",null;if("<"==n){t.tokenize=u,t.state=g,t.tagName=t.tagStart=null;var o=t.tokenize(e,t);return o?o+" tag error":"tag error"}return/[\'\"]/.test(n)?(t.tokenize=(i=n,(s=function(e,t){for(;!e.eol();)if(e.next()==i){t.tokenize=p;break}return"string"}).isInAttribute=!0,s),t.stringStartCol=e.column(),t.tokenize(e,t)):(e.match(/^[^\s\u00a0=<>\"\']*[^\s\u00a0=<>\"\'\/]/),"word")}function f(e,t){return function(i,s){for(;!i.eol();){if(i.match(t)){s.tokenize=u;break}i.next()}return e}}function h(e){e.context&&(e.context=e.context.prev)}function m(e,t){for(var i;;){if(!e.context)return;if(i=e.context.tagName,!l.contextGrabbers.hasOwnProperty(i)||!l.contextGrabbers[i].hasOwnProperty(t))return;h(e)}}function g(e,t,i){return"openTag"==e?(i.tagStart=t.column(),v):"closeTag"==e?x:g}function v(e,t,i){return"word"==e?(i.tagName=t.current(),o="tag",w):l.allowMissingTagName&&"endTag"==e?(o="tag bracket",w(e,t,i)):(o="error",v)}function x(e,t,i){if("word"==e){var s=t.current();return i.context&&i.context.tagName!=s&&l.implicitlyClosed.hasOwnProperty(i.context.tagName)&&h(i),i.context&&i.context.tagName==s||!1===l.matchClosing?(o="tag",y):(o="tag error",b)}return l.allowMissingTagName&&"endTag"==e?(o="tag bracket",y(e,t,i)):(o="error",b)}function y(e,t,i){return"endTag"!=e?(o="error",y):(h(i),g)}function b(e,t,i){return o="error",y(e,0,i)}function w(e,t,i){if("word"==e)return o="attribute",k;if("endTag"==e||"selfcloseTag"==e){var s=i.tagName,n=i.tagStart;return i.tagName=i.tagStart=null,"selfcloseTag"==e||l.autoSelfClosers.hasOwnProperty(s)?m(i,s):(m(i,s),i.context=new function(e,t,i){this.prev=e.context,this.tagName=t,this.indent=e.indented,this.startOfLine=i,(l.doNotIndent.hasOwnProperty(t)||e.context&&e.context.noIndent)&&(this.noIndent=!0)}(i,s,n==i.indented)),g}return o="error",w}function k(e,t,i){return"equals"==e?_:(l.allowMissing||(o="error"),w(e,0,i))}function _(e,t,i){return"string"==e?S:"word"==e&&l.allowUnquoted?(o="string",w):(o="error",w(e,0,i))}function S(e,t,i){return"string"==e?S:w(e,0,i)}return u.isInText=!0,{startState:function(e){var t={tokenize:u,state:g,indented:e||0,tagName:null,tagStart:null,context:null};return null!=e&&(t.baseIndent=e),t},token:function(e,t){if(!t.tagName&&e.sol()&&(t.indented=e.indentation()),e.eatSpace())return null;a=null;var i=t.tokenize(e,t);return(i||a)&&"comment"!=i&&(o=null,t.state=t.state(a||i,e,t),o&&(i="error"==o?i+" error":o)),i},indent:function(t,i,s){var n=t.context;if(t.tokenize.isInAttribute)return t.tagStart==t.indented?t.stringStartCol+1:t.indented+r;if(n&&n.noIndent)return e.Pass;if(t.tokenize!=p&&t.tokenize!=u)return s?s.match(/^(\s*)/)[0].length:0;if(t.tagName)return!1!==l.multilineTagIndentPastTag?t.tagStart+t.tagName.length+2:t.tagStart+r*(l.multilineTagIndentFactor||1);if(l.alignCDATA&&/<!\[CDATA\[/.test(i))return 0;var a=i&&/^<(\/)?([\w_:\.-]*)/.exec(i);if(a&&a[1])for(;n;){if(n.tagName==a[2]){n=n.prev;break}if(!l.implicitlyClosed.hasOwnProperty(n.tagName))break;n=n.prev}else if(a)for(;n;){var o=l.contextGrabbers[n.tagName];if(!o||!o.hasOwnProperty(a[2]))break;n=n.prev}for(;n&&n.prev&&!n.startOfLine;)n=n.prev;return n?n.indent+r:t.baseIndent||0},electricInput:/<\/[\s\w:]+>$/,blockCommentStart:"\x3c!--",blockCommentEnd:"--\x3e",configuration:l.htmlMode?"html":"xml",helperType:l.htmlMode?"html":"xml",skipAttribute:function(e){e.state==_&&(e.state=w)}}}),e.defineMIME("text/xml","xml"),e.defineMIME("application/xml","xml"),e.mimeModes.hasOwnProperty("text/html")||e.defineMIME("text/html",{name:"xml",htmlMode:!0})})(i(4))},,,,,,function(e,t,i){"use strict";(function(e){t.a={data:function(){return{locale:null}},computed:{locales:function(){return e.map(Statamic.locales,function(e,t){return{text:e.name,value:t}})}},ready:function(){this.locale=this.getInitialLocale()},methods:{getInitialLocale:function(){var e=Object.keys(Statamic.locales)[0];if(1===Object.keys(Statamic.locales).length)return e;var t=this.getLocaleLocalStorageKey();return t&&localStorage.getItem(t)||e},getLocaleLocalStorageKey:function(){return"statamic.locale"},onLocaleChanged:function(){},bindLocaleWatcher:function(){var e=this;this.$watch("locale",function(t){e.onLocaleChanged();var i=e.getLocaleLocalStorageKey();i&&localStorage.setItem(i,t)})}}}}).call(t,i(1))},function(e,t,i){"use strict";t.a={data:function(){return{showDrafts:!0}},computed:{draftOptions:function(){return[{value:!0,text:translate("cp.show_drafts")},{value:!1,text:translate("cp.hide_drafts")}]}},ready:function(){this.showDrafts=this.getInitialShowDrafts()},methods:{getInitialShowDrafts:function(){var e=this.getShowDraftsLocalStorageKey();return!e||"false"!==localStorage.getItem(e)},getShowDraftsLocalStorageKey:function(){return"statamic.drafts"},onShowDraftsChanged:function(){},bindShowDraftsWatcher:function(){var e=this;this.$watch("showDrafts",function(t){e.onShowDraftsChanged();var i=e.getShowDraftsLocalStorageKey();i&&localStorage.setItem(i,t)})}}}},function(e,t,i){var s,n,a={};s=i(234),n=i(235),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";t.a={data:function(){return{draggingFile:!1}},methods:{dragOver:function(){this.$root.draggingNonFile||(this.draggingFile=!0)},dragStop:function(){this.draggingFile=!1}}}},function(e,t,i){"use strict";t.a={props:["container","assets","folder","subfolders","loading","selectedAssets","restrictNavigation","isSearching"],computed:{hasResults:function(){return this.assets.length||this.subfolders.length},hasParent:function(){return!!this.folder&&null!==this.folder.parent_path}},methods:{selectFolder:function(e){this.$emit("folder-selected",e)},selectAsset:function(e){this.can("assets:"+this.container+":edit")&&this.$emit("asset-selected",e)},deselectAsset:function(e){this.$emit("asset-deselected",e)},editAsset:function(e){this.$emit("asset-editing",e)},deleteAsset:function(e){this.$emit("asset-deselected",e),this.$emit("asset-deleting",e)},assetDoubleclicked:function(e){this.$emit("asset-doubleclicked")},editFolder:function(e){this.$emit("folder-editing",e)},deleteFolder:function(e){var t=this,i=cp_url("assets/folders/delete");swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_folder"),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.$http.delete(i,{container:t.container,folders:e}).success(function(i){t.$emit("folder-deleted",e),t.saving=!1})})},assetDragStart:function(e){this.selectAsset(e),this.draggingAssets=!0}}}},function(e,t,i){"use strict";(function(e){t.a={props:["asset","selectedAssets"],computed:{isSelected:function(){return e.contains(this.selectedAssets,this.asset.id)},canShowSvg:function(){return"svg"===this.asset.extension&&!this.asset.url.includes(":")},svgBackgroundStyle:function(){return'background-image: url("'+this.asset.url+'")'}},methods:{toggle:function(){this.isSelected?this.deselect():this.select()},select:function(){this.$emit("selected",this.asset.id)},deselect:function(){this.$emit("deselected",this.asset.id)},editAsset:function(){this.$emit("editing",this.asset.id)},deleteAsset:function(){this.$emit("deleting",this.asset.id)},assetDragStart:function(e){e.dataTransfer.setData("asset",this.asset.id),e.dataTransfer.effectAllowed="move",this.$emit("assetdragstart",this.asset.id)},doubleClicked:function(){"assets"===document.location.pathname.split("/")[2]?this.editAsset():(this.select(),this.$emit("doubleclicked",this.asset.id))}}}}).call(t,i(1))},function(e,t,i){"use strict";t.a={props:["folder"],methods:{selectFolder:function(){this.$emit("selected",this.folder.path)},editFolder:function(){this.$emit("editing",this.folder.path),this.showActionsDropdown=!1},deleteFolder:function(){this.$emit("deleting",this.folder.path),this.showActionsDropdown=!1},drop:function(e){this.$emit("dropped-on-folder",this.folder.path,e)}}}},function(e,t,i){"use strict";var s=i(33);i.n(s);t.a={mixins:[s.mixin],data:function(){return{showActionsDropdown:!1}},events:{"close-dropdown":function(e){this!=e&&(this.showActionsDropdown=!1)}},methods:{toggleActions:function(){this.$emit("open-dropdown",this),this.showActionsDropdown=!this.showActionsDropdown},away:function(){this.showActionsDropdown=!1}}}},,function(e,t,i){var s,n,a={};s=i(259),n=i(263),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){var s,n,a={};s=i(264),n=i(291),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";(function(e){var i=Object.keys(Statamic.locales)[0],s=(Statamic.Publish&&Statamic.Publish.locale||i)===i;t.a={props:["field","data","config","autofocus"],computed:{isVisible:function(){return!this.$parent.hiddenFields.includes(this.field.name)},isReadOnly:function(){return!s&&!this.isLocalizable},hasError:function(){return e.has(this.$parent.errors,"fields."+this.field.name)},classes:function(){return["form-group p-2 m-0",this.fieldtypeClass,tailwind_width_class(this.field.width),{"has-error":this.hasError}]},fieldtypeClass:function(){return this.field.type+"-fieldtype"}}}}).call(t,i(1))},function(e,t,i){var s,n,a={};i(301),s=i(302),n=i(303),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){var s,n,a={};s=i(304),n=i(305),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){var s,n,a={};s=i(344),n=i(345),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){var s,n,a={};s=i(346),n=i(347),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,i){var s,n,a={};s=i(479),n=i(508),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";(e.exports={}).forEach=function(e,t){for(var i=0;i<e.length;i++){var s=t(e[i]);if(s)return s}}},function(e,t,i){"use strict";var s=e.exports={};s.isIE=function(e){return(-1!==(t=navigator.userAgent.toLowerCase()).indexOf("msie")||-1!==t.indexOf("trident")||-1!==t.indexOf(" edge/"))&&(!e||e===function(){var e=3,t=document.createElement("div"),i=t.getElementsByTagName("i");do{t.innerHTML="\x3c!--[if gt IE "+ ++e+"]><i></i><![endif]--\x3e"}while(i[0]);return e>4?e:void 0}());var t},s.isLegacyOpera=function(){return!!window.opera}},function(e,t,i){var s,n,a={};s=i(493),n=i(494),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";(function(e){var s=i(169),n=i.n(s);t.a={components:{AssetEditor:i(35)},props:{asset:Object},data:function(){return{editing:!1}},computed:{isImage:function(){return this.asset.is_image},canShowSvg:function(){return"svg"===this.asset.extension&&!this.asset.url.includes(":")},thumbnail:function(){return this.asset.thumbnail},toenail:function(){return this.asset.toenail},label:function(){return this.asset.title||this.asset.basename}},methods:{edit:function(){this.editing=!0},remove:function(){this.$emit("removed",this.asset)},makeZoomable:function(){var t=e(this.$el).find("a.zoom")[0];t&&this.isImage&&new n.a(t,{closeOnScroll:!0,captionAttribute:"title"})},closeEditor:function(){this.editing=!1},assetSaved:function(e){this.asset=e,this.closeEditor()}},ready:function(){this.makeZoomable()}}}).call(t,i(2))},,function(e,t,i){"use strict";(function(e){t.a={data:function(){return{blank:{},sortableOptions:{},autoBindChangeWatcher:!1,changeWatcherWatchDeep:!1,accordionMode:!0}},ready:function(){this.accordionMode=this.getAccordionModeFromStorage(),this.accordionMode&&this.collapseAll()},methods:{setConfig:function(t){return e.findWhere(this.config.sets,{name:t})},deleteSet:function(e){this.data.splice(e,1)},expandAll:function(){e.each(this.$refs.set,function(e){"function"==typeof e.expand&&e.expand(!0)}),this.setAccordionMode(!1)},collapseAll:function(){e.each(this.$refs.set,function(e){"function"==typeof e.collapse&&e.collapse(!0)}),this.setAccordionMode(!0)},getAccordionModeFromStorage:function(){var e=this.accordionMode,t=localStorage.getItem("statamic.replicator.accordion");return"true"===t?e=!0:"false"===t&&(e=!1),e},setAccordionMode:function(e){this.accordionMode=e,localStorage.setItem("statamic.replicator.accordion",e)}}}}).call(t,i(1))},function(e,t,i){"use strict";(function(e,i){t.a={props:["data","index","config","parentName","sets"],data:function(){return{collapsedPreview:null}},computed:{display:function(){return this.config.display||this.data.type},instructions:function(){return this.config.instructions},hasMultipleFields:function(){return this.config.fields.length>1},isHidden:function(){return!0===this.data["#hidden"]}},ready:function(){this.collapsedPreview=this.getCollapsedPreview()},watch:{data:{deep:!0,handler:function(){this.collapsedPreview=this.getCollapsedPreview()}}},methods:{delete:function(){var e=this;swal({type:"warning",title:translate("cp.are_you_sure"),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){e.$emit("deleted",e.index)})},toggle:function(){this.isHidden?this.expand():this.collapse()},expand:function(t){e.set(this.data,"#hidden",!1),this.$emit("expanded",this,t)},collapse:function(){e.set(this.data,"#hidden",!0)},getCollapsedPreview:function(){return i.map(this.$children,function(e){if(!1!==e.config.replicator_preview)return void 0!==e.getReplicatorPreviewText?e.getReplicatorPreviewText():JSON.stringify(e.data)}).filter(function(e){return null!==e&&""!==e&&void 0!==e}).join(" / ")},focus:function(){var e=this.$children[0];"function"==typeof e.focus&&e.focus()},fieldClasses:function(e){return["form-group p-2 m-0 "+e.type+"-fieldtype",tailwind_width_class(e.width)]},componentName:function(e){return e.replace(".","-")+"-fieldtype"}}}}).call(t,i(3),i(1))},,function(e,t,i){"use strict";t.a={data:function(){return{selectedAssets:[],selectorViewMode:null,showAssetSelector:!1}},computed:{assetsEnabled:function(){return this.getFieldtypeConfig()&&void 0!==this.getFieldtypeConfig().container},container:function(){return this.getFieldtypeConfig().container},folder:function(){return this.getFieldtypeConfig().folder||"/"},restrictAssetNavigation:function(){return this.getFieldtypeConfig().restrict_assets||!1}},ready:function(){this.selectorViewMode=Cookies.get("statamic.assets.listing_view_mode")||"grid"},methods:{addAsset:function(){this.showAssetSelector=!0},closeAssetSelector:function(){this.showAssetSelector=!1}}}},,,function(e,t,i){(function(e){"use strict";var t={script:[["lang",/(javascript|babel)/i,"javascript"],["type",/^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i,"javascript"],["type",/./,"text/plain"],[null,null,"javascript"]],style:[["lang",/^css$/i,"css"],["type",/^(text\/)?(x-)?(stylesheet|css)$/i,"css"],["type",/./,"text/plain"],[null,null,"css"]]};var i={};function s(e,t){var s=e.match(function(e){var t=i[e];return t||(i[e]=new RegExp("\\s+"+e+"\\s*=\\s*('|\")?([^'\"]+)('|\")?\\s*"))}(t));return s?/^\s*(.*?)\s*$/.exec(s[2])[1]:""}function n(e,t){return new RegExp((t?"^":"")+"</s*"+e+"s*>","i")}function a(e,t){for(var i in e)for(var s=t[i]||(t[i]=[]),n=e[i],a=n.length-1;a>=0;a--)s.unshift(n[a])}e.defineMode("htmlmixed",function(i,o){var r=e.getMode(i,{name:"xml",htmlMode:!0,multilineTagIndentFactor:o.multilineTagIndentFactor,multilineTagIndentPastTag:o.multilineTagIndentPastTag}),l={},c=o&&o.tags,d=o&&o.scriptTypes;if(a(t,l),c&&a(c,l),d)for(var u=d.length-1;u>=0;u--)l.script.unshift(["type",d[u].matches,d[u].mode]);function p(t,a){var o,c=r.token(t,a.htmlState),d=/\btag\b/.test(c);if(d&&!/[<>\s\/]/.test(t.current())&&(o=a.htmlState.tagName&&a.htmlState.tagName.toLowerCase())&&l.hasOwnProperty(o))a.inTag=o+" ";else if(a.inTag&&d&&/>$/.test(t.current())){var u=/^([\S]+) (.*)/.exec(a.inTag);a.inTag=null;var f=">"==t.current()&&function(e,t){for(var i=0;i<e.length;i++){var n=e[i];if(!n[0]||n[1].test(s(t,n[0])))return n[2]}}(l[u[1]],u[2]),h=e.getMode(i,f),m=n(u[1],!0),g=n(u[1],!1);a.token=function(e,t){return e.match(m,!1)?(t.token=p,t.localState=t.localMode=null,null):function(e,t,i){var s=e.current(),n=s.search(t);return n>-1?e.backUp(s.length-n):s.match(/<\/?$/)&&(e.backUp(s.length),e.match(t,!1)||e.match(s)),i}(e,g,t.localMode.token(e,t.localState))},a.localMode=h,a.localState=e.startState(h,r.indent(a.htmlState,""))}else a.inTag&&(a.inTag+=t.current(),t.eol()&&(a.inTag+=" "));return c}return{startState:function(){return{token:p,inTag:null,localMode:null,localState:null,htmlState:e.startState(r)}},copyState:function(t){var i;return t.localState&&(i=e.copyState(t.localMode,t.localState)),{token:t.token,inTag:t.inTag,localMode:t.localMode,localState:i,htmlState:e.copyState(r,t.htmlState)}},token:function(e,t){return t.token(e,t)},indent:function(t,i,s){return!t.localMode||/^\s*<\//.test(i)?r.indent(t.htmlState,i):t.localMode.indent?t.localMode.indent(t.localState,i,s):e.Pass},innerMode:function(e){return{state:e.localState||e.htmlState,mode:e.localMode||r}}}},"xml","javascript","css"),e.defineMIME("text/html","htmlmixed")})(i(4),i(19),i(177),i(178))},function(e,t,i){(function(e){"use strict";e.defineMode("javascript",function(t,i){var s,n,a=t.indentUnit,o=i.statementIndent,r=i.jsonld,l=i.json||r,c=i.typescript,d=i.wordCharacters||/[\w$\xa1-\uffff]/,u=function(){function e(e){return{type:e,style:"keyword"}}var t=e("keyword a"),i=e("keyword b"),s=e("keyword c"),n=e("keyword d"),a=e("operator"),o={type:"atom",style:"atom"};return{if:e("if"),while:t,with:t,else:i,do:i,try:i,finally:i,return:n,break:n,continue:n,new:e("new"),delete:s,void:s,throw:s,debugger:e("debugger"),var:e("var"),const:e("var"),let:e("var"),function:e("function"),catch:e("catch"),for:e("for"),switch:e("switch"),case:e("case"),default:e("default"),in:a,typeof:a,instanceof:a,true:o,false:o,null:o,undefined:o,NaN:o,Infinity:o,this:e("this"),class:e("class"),super:e("atom"),yield:s,export:e("export"),import:e("import"),extends:s,await:s}}(),p=/[+\-*&%=<>!?|~^@]/,f=/^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;function h(e,t,i){return s=e,n=i,t}function m(e,t){var i,s=e.next();if('"'==s||"'"==s)return t.tokenize=(i=s,function(e,t){var s,n=!1;if(r&&"@"==e.peek()&&e.match(f))return t.tokenize=m,h("jsonld-keyword","meta");for(;null!=(s=e.next())&&(s!=i||n);)n=!n&&"\\"==s;return n||(t.tokenize=m),h("string","string")}),t.tokenize(e,t);if("."==s&&e.match(/^\d+(?:[eE][+\-]?\d+)?/))return h("number","number");if("."==s&&e.match(".."))return h("spread","meta");if(/[\[\]{}\(\),;\:\.]/.test(s))return h(s);if("="==s&&e.eat(">"))return h("=>","operator");if("0"==s&&e.eat(/x/i))return e.eatWhile(/[\da-f]/i),h("number","number");if("0"==s&&e.eat(/o/i))return e.eatWhile(/[0-7]/i),h("number","number");if("0"==s&&e.eat(/b/i))return e.eatWhile(/[01]/i),h("number","number");if(/\d/.test(s))return e.match(/^\d*(?:\.\d*)?(?:[eE][+\-]?\d+)?/),h("number","number");if("/"==s)return e.eat("*")?(t.tokenize=g,g(e,t)):e.eat("/")?(e.skipToEnd(),h("comment","comment")):Ne(e,t,1)?(function(e){for(var t,i=!1,s=!1;null!=(t=e.next());){if(!i){if("/"==t&&!s)return;"["==t?s=!0:s&&"]"==t&&(s=!1)}i=!i&&"\\"==t}}(e),e.match(/^\b(([gimyu])(?![gimyu]*\2))+\b/),h("regexp","string-2")):(e.eat("="),h("operator","operator",e.current()));if("`"==s)return t.tokenize=v,v(e,t);if("#"==s)return e.skipToEnd(),h("error","error");if(p.test(s))return">"==s&&t.lexical&&">"==t.lexical.type||(e.eat("=")?"!"!=s&&"="!=s||e.eat("="):/[<>*+\-]/.test(s)&&(e.eat(s),">"==s&&e.eat(s))),h("operator","operator",e.current());if(d.test(s)){e.eatWhile(d);var n=e.current();if("."!=t.lastType){if(u.propertyIsEnumerable(n)){var a=u[n];return h(a.type,a.style,n)}if("async"==n&&e.match(/^(\s|\/\*.*?\*\/)*[\[\(\w]/,!1))return h("async","keyword",n)}return h("variable","variable",n)}}function g(e,t){for(var i,s=!1;i=e.next();){if("/"==i&&s){t.tokenize=m;break}s="*"==i}return h("comment","comment")}function v(e,t){for(var i,s=!1;null!=(i=e.next());){if(!s&&("`"==i||"$"==i&&e.eat("{"))){t.tokenize=m;break}s=!s&&"\\"==i}return h("quasi","string-2",e.current())}var x="([{}])";function y(e,t){t.fatArrowAt&&(t.fatArrowAt=null);var i=e.string.indexOf("=>",e.start);if(!(i<0)){if(c){var s=/:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(e.string.slice(e.start,i));s&&(i=s.index)}for(var n=0,a=!1,o=i-1;o>=0;--o){var r=e.string.charAt(o),l=x.indexOf(r);if(l>=0&&l<3){if(!n){++o;break}if(0==--n){"("==r&&(a=!0);break}}else if(l>=3&&l<6)++n;else if(d.test(r))a=!0;else{if(/["'\/]/.test(r))return;if(a&&!n){++o;break}}}a&&!n&&(t.fatArrowAt=o)}}var b={atom:!0,number:!0,variable:!0,string:!0,regexp:!0,this:!0,"jsonld-keyword":!0};function w(e,t,i,s,n,a){this.indented=e,this.column=t,this.type=i,this.prev=n,this.info=a,null!=s&&(this.align=s)}function k(e,t){for(var i=e.localVars;i;i=i.next)if(i.name==t)return!0;for(var s=e.context;s;s=s.prev)for(i=s.vars;i;i=i.next)if(i.name==t)return!0}var _={state:null,column:null,marked:null,cc:null};function S(){for(var e=arguments.length-1;e>=0;e--)_.cc.push(arguments[e])}function C(){return S.apply(null,arguments),!0}function A(e){function t(t){for(var i=t;i;i=i.next)if(i.name==e)return!0;return!1}var s=_.state;if(_.marked="def",s.context){if(t(s.localVars))return;s.localVars={name:e,next:s.localVars}}else{if(t(s.globalVars))return;i.globalVars&&(s.globalVars={name:e,next:s.globalVars})}}function M(e){return"public"==e||"private"==e||"protected"==e||"abstract"==e||"readonly"==e}var F={name:"this",next:{name:"arguments"}};function E(){_.state.context={prev:_.state.context,vars:_.state.localVars},_.state.localVars=F}function L(){_.state.localVars=_.state.context.vars,_.state.context=_.state.context.prev}function $(e,t){var i=function(){var i=_.state,s=i.indented;if("stat"==i.lexical.type)s=i.lexical.indented;else for(var n=i.lexical;n&&")"==n.type&&n.align;n=n.prev)s=n.indented;i.lexical=new w(s,_.stream.column(),e,null,i.lexical,t)};return i.lex=!0,i}function P(){var e=_.state;e.lexical.prev&&(")"==e.lexical.type&&(e.indented=e.lexical.indented),e.lexical=e.lexical.prev)}function j(e){return function t(i){return i==e?C():";"==e?S():C(t)}}function T(e,t){return"var"==e?C($("vardef",t.length),fe,j(";"),P):"keyword a"==e?C($("form"),B,T,P):"keyword b"==e?C($("form"),T,P):"keyword d"==e?_.stream.match(/^\s*$/,!1)?C():C($("stat"),I,j(";"),P):"debugger"==e?C(j(";")):"{"==e?C($("}"),te,P):";"==e?C():"if"==e?("else"==_.state.lexical.info&&_.state.cc[_.state.cc.length-1]==P&&_.state.cc.pop()(),C($("form"),B,T,P,xe)):"function"==e?C(Se):"for"==e?C($("form"),ye,T,P):"class"==e||c&&"interface"==t?(_.marked="keyword",C($("form"),Me,P)):"variable"==e?c&&"declare"==t?(_.marked="keyword",C(T)):c&&("module"==t||"enum"==t||"type"==t)&&_.stream.match(/^\s*\w/,!1)?(_.marked="keyword","enum"==t?C(Ie):"type"==t?C(ae,j("operator"),ae,j(";")):C($("form"),he,j("{"),$("}"),te,P,P)):c&&"namespace"==t?(_.marked="keyword",C($("form"),O,te,P)):c&&"abstract"==t?(_.marked="keyword",C(T)):C($("stat"),K):"switch"==e?C($("form"),B,j("{"),$("}","switch"),te,P,P):"case"==e?C(O,j(":")):"default"==e?C(j(":")):"catch"==e?C($("form"),E,j("("),Ce,j(")"),T,P,L):"export"==e?C($("stat"),$e,P):"import"==e?C($("stat"),je,P):"async"==e?C(T):"@"==t?C(O,T):S($("stat"),O,j(";"),P)}function O(e,t){return z(e,t,!1)}function D(e,t){return z(e,t,!0)}function B(e){return"("!=e?S():C($(")"),O,j(")"),P)}function z(e,t,i){if(_.state.fatArrowAt==_.stream.start){var s=i?H:W;if("("==e)return C(E,$(")"),X(Ce,")"),P,j("=>"),s,L);if("variable"==e)return S(E,he,j("=>"),s,L)}var n=i?N:q;return b.hasOwnProperty(e)?C(n):"function"==e?C(Se,n):"class"==e||c&&"interface"==t?(_.marked="keyword",C($("form"),Ae,P)):"keyword c"==e||"async"==e?C(i?D:O):"("==e?C($(")"),I,j(")"),P,n):"operator"==e||"spread"==e?C(i?D:O):"["==e?C($("]"),ze,P,n):"{"==e?ee(Z,"}",null,n):"quasi"==e?S(R,n):"new"==e?C(function(e){return function(t){return"."==t?C(e?G:U):"variable"==t&&c?C(de,e?N:q):S(e?D:O)}}(i)):"import"==e?C(O):C()}function I(e){return e.match(/[;\}\)\],]/)?S():S(O)}function q(e,t){return","==e?C(O):N(e,t,!1)}function N(e,t,i){var s=0==i?q:N,n=0==i?O:D;return"=>"==e?C(E,i?H:W,L):"operator"==e?/\+\+|--/.test(t)||c&&"!"==t?C(s):c&&"<"==t&&_.stream.match(/^([^>]|<.*?>)*>\s*\(/,!1)?C($(">"),X(ae,">"),P,s):"?"==t?C(O,j(":"),n):C(n):"quasi"==e?S(R,s):";"!=e?"("==e?ee(D,")","call",s):"."==e?C(Y,s):"["==e?C($("]"),I,j("]"),P,s):c&&"as"==t?(_.marked="keyword",C(ae,s)):"regexp"==e?(_.state.lastType=_.marked="operator",_.stream.backUp(_.stream.pos-_.stream.start-1),C(n)):void 0:void 0}function R(e,t){return"quasi"!=e?S():"${"!=t.slice(t.length-2)?C(R):C(O,V)}function V(e){if("}"==e)return _.marked="string-2",_.state.tokenize=v,C(R)}function W(e){return y(_.stream,_.state),S("{"==e?T:O)}function H(e){return y(_.stream,_.state),S("{"==e?T:D)}function U(e,t){if("target"==t)return _.marked="keyword",C(q)}function G(e,t){if("target"==t)return _.marked="keyword",C(N)}function K(e){return":"==e?C(P,T):S(q,j(";"),P)}function Y(e){if("variable"==e)return _.marked="property",C()}function Z(e,t){if("async"==e)return _.marked="property",C(Z);if("variable"==e||"keyword"==_.style){return _.marked="property","get"==t||"set"==t?C(J):(c&&_.state.fatArrowAt==_.stream.start&&(i=_.stream.match(/^\s*:\s*/,!1))&&(_.state.fatArrowAt=_.stream.pos+i[0].length),C(Q));var i}else{if("number"==e||"string"==e)return _.marked=r?"property":_.style+" property",C(Q);if("jsonld-keyword"==e)return C(Q);if(c&&M(t))return _.marked="keyword",C(Z);if("["==e)return C(O,ie,j("]"),Q);if("spread"==e)return C(D,Q);if("*"==t)return _.marked="keyword",C(Z);if(":"==e)return S(Q)}}function J(e){return"variable"!=e?S(Q):(_.marked="property",C(Se))}function Q(e){return":"==e?C(D):"("==e?S(Se):void 0}function X(e,t,i){function s(n,a){if(i?i.indexOf(n)>-1:","==n){var o=_.state.lexical;return"call"==o.info&&(o.pos=(o.pos||0)+1),C(function(i,s){return i==t||s==t?S():S(e)},s)}return n==t||a==t?C():C(j(t))}return function(i,n){return i==t||n==t?C():S(e,s)}}function ee(e,t,i){for(var s=3;s<arguments.length;s++)_.cc.push(arguments[s]);return C($(t,i),X(e,t),P)}function te(e){return"}"==e?C():S(T,te)}function ie(e,t){if(c){if(":"==e)return C(ae);if("?"==t)return C(ie)}}function se(e){if(c&&":"==e)return _.stream.match(/^\s*\w+\s+is\b/,!1)?C(O,ne,ae):C(ae)}function ne(e,t){if("is"==t)return _.marked="keyword",C()}function ae(e,t){return"keyof"==t||"typeof"==t?(_.marked="keyword",C("keyof"==t?ae:D)):"variable"==e||"void"==t?(_.marked="type",C(ce)):"string"==e||"number"==e||"atom"==e?C(ce):"["==e?C($("]"),X(ae,"]",","),P,ce):"{"==e?C($("}"),X(re,"}",",;"),P,ce):"("==e?C(X(le,")"),oe):"<"==e?C(X(ae,">"),ae):void 0}function oe(e){if("=>"==e)return C(ae)}function re(e,t){return"variable"==e||"keyword"==_.style?(_.marked="property",C(re)):"?"==t?C(re):":"==e?C(ae):"["==e?C(O,ie,j("]"),re):void 0}function le(e,t){return"variable"==e&&_.stream.match(/^\s*[?:]/,!1)||"?"==t?C(le):":"==e?C(ae):S(ae)}function ce(e,t){return"<"==t?C($(">"),X(ae,">"),P,ce):"|"==t||"."==e||"&"==t?C(ae):"["==e?C(j("]"),ce):"extends"==t||"implements"==t?(_.marked="keyword",C(ae)):void 0}function de(e,t){if("<"==t)return C($(">"),X(ae,">"),P,ce)}function ue(){return S(ae,pe)}function pe(e,t){if("="==t)return C(ae)}function fe(e,t){return"enum"==t?(_.marked="keyword",C(Ie)):S(he,ie,ge,ve)}function he(e,t){return c&&M(t)?(_.marked="keyword",C(he)):"variable"==e?(A(t),C()):"spread"==e?C(he):"["==e?ee(he,"]"):"{"==e?ee(me,"}"):void 0}function me(e,t){return"variable"!=e||_.stream.match(/^\s*:/,!1)?("variable"==e&&(_.marked="property"),"spread"==e?C(he):"}"==e?S():C(j(":"),he,ge)):(A(t),C(ge))}function ge(e,t){if("="==t)return C(D)}function ve(e){if(","==e)return C(fe)}function xe(e,t){if("keyword b"==e&&"else"==t)return C($("form","else"),T,P)}function ye(e,t){return"await"==t?C(ye):"("==e?C($(")"),be,j(")"),P):void 0}function be(e){return"var"==e?C(fe,j(";"),ke):";"==e?C(ke):"variable"==e?C(we):S(O,j(";"),ke)}function we(e,t){return"in"==t||"of"==t?(_.marked="keyword",C(O)):C(q,ke)}function ke(e,t){return";"==e?C(_e):"in"==t||"of"==t?(_.marked="keyword",C(O)):S(O,j(";"),_e)}function _e(e){")"!=e&&C(O)}function Se(e,t){return"*"==t?(_.marked="keyword",C(Se)):"variable"==e?(A(t),C(Se)):"("==e?C(E,$(")"),X(Ce,")"),P,se,T,L):c&&"<"==t?C($(">"),X(ue,">"),P,Se):void 0}function Ce(e,t){return"@"==t&&C(O,Ce),"spread"==e?C(Ce):c&&M(t)?(_.marked="keyword",C(Ce)):S(he,ie,ge)}function Ae(e,t){return"variable"==e?Me(e,t):Fe(e,t)}function Me(e,t){if("variable"==e)return A(t),C(Fe)}function Fe(e,t){return"<"==t?C($(">"),X(ue,">"),P,Fe):"extends"==t||"implements"==t||c&&","==e?("implements"==t&&(_.marked="keyword"),C(c?ae:O,Fe)):"{"==e?C($("}"),Ee,P):void 0}function Ee(e,t){return"async"==e||"variable"==e&&("static"==t||"get"==t||"set"==t||c&&M(t))&&_.stream.match(/^\s+[\w$\xa1-\uffff]/,!1)?(_.marked="keyword",C(Ee)):"variable"==e||"keyword"==_.style?(_.marked="property",C(c?Le:Se,Ee)):"["==e?C(O,ie,j("]"),c?Le:Se,Ee):"*"==t?(_.marked="keyword",C(Ee)):";"==e?C(Ee):"}"==e?C():"@"==t?C(O,Ee):void 0}function Le(e,t){return"?"==t?C(Le):":"==e?C(ae,ge):"="==t?C(D):S(Se)}function $e(e,t){return"*"==t?(_.marked="keyword",C(Be,j(";"))):"default"==t?(_.marked="keyword",C(O,j(";"))):"{"==e?C(X(Pe,"}"),Be,j(";")):S(T)}function Pe(e,t){return"as"==t?(_.marked="keyword",C(j("variable"))):"variable"==e?S(D,Pe):void 0}function je(e){return"string"==e?C():"("==e?S(O):S(Te,Oe,Be)}function Te(e,t){return"{"==e?ee(Te,"}"):("variable"==e&&A(t),"*"==t&&(_.marked="keyword"),C(De))}function Oe(e){if(","==e)return C(Te,Oe)}function De(e,t){if("as"==t)return _.marked="keyword",C(Te)}function Be(e,t){if("from"==t)return _.marked="keyword",C(O)}function ze(e){return"]"==e?C():S(X(D,"]"))}function Ie(){return S($("form"),he,j("{"),$("}"),X(qe,"}"),P,P)}function qe(){return S(he,ge)}function Ne(e,t,i){return t.tokenize==m&&/^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(t.lastType)||"quasi"==t.lastType&&/\{\s*$/.test(e.string.slice(0,e.pos-(i||0)))}return P.lex=!0,{startState:function(e){var t={tokenize:m,lastType:"sof",cc:[],lexical:new w((e||0)-a,0,"block",!1),localVars:i.localVars,context:i.localVars&&{vars:i.localVars},indented:e||0};return i.globalVars&&"object"==typeof i.globalVars&&(t.globalVars=i.globalVars),t},token:function(e,t){if(e.sol()&&(t.lexical.hasOwnProperty("align")||(t.lexical.align=!1),t.indented=e.indentation(),y(e,t)),t.tokenize!=g&&e.eatSpace())return null;var i=t.tokenize(e,t);return"comment"==s?i:(t.lastType="operator"!=s||"++"!=n&&"--"!=n?s:"incdec",function(e,t,i,s,n){var a=e.cc;for(_.state=e,_.stream=n,_.marked=null,_.cc=a,_.style=t,e.lexical.hasOwnProperty("align")||(e.lexical.align=!0);;)if((a.length?a.pop():l?O:T)(i,s)){for(;a.length&&a[a.length-1].lex;)a.pop()();return _.marked?_.marked:"variable"==i&&k(e,s)?"variable-2":t}}(t,i,s,n,e))},indent:function(t,s){if(t.tokenize==g)return e.Pass;if(t.tokenize!=m)return 0;var n,r=s&&s.charAt(0),l=t.lexical;if(!/^\s*else\b/.test(s))for(var c=t.cc.length-1;c>=0;--c){var d=t.cc[c];if(d==P)l=l.prev;else if(d!=xe)break}for(;("stat"==l.type||"form"==l.type)&&("}"==r||(n=t.cc[t.cc.length-1])&&(n==q||n==N)&&!/^[,\.=+\-*:?[\(]/.test(s));)l=l.prev;o&&")"==l.type&&"stat"==l.prev.type&&(l=l.prev);var u=l.type,f=r==u;return"vardef"==u?l.indented+("operator"==t.lastType||","==t.lastType?l.info+1:0):"form"==u&&"{"==r?l.indented:"form"==u?l.indented+a:"stat"==u?l.indented+(function(e,t){return"operator"==e.lastType||","==e.lastType||p.test(t.charAt(0))||/[,.]/.test(t.charAt(0))}(t,s)?o||a:0):"switch"!=l.info||f||0==i.doubleIndentSwitch?l.align?l.column+(f?0:1):l.indented+(f?0:a):l.indented+(/^(?:case|default)\b/.test(s)?a:2*a)},electricInput:/^\s*(?:case .*?:|default:|\{|\})$/,blockCommentStart:l?null:"/*",blockCommentEnd:l?null:"*/",blockCommentContinue:l?null:" * ",lineComment:l?null:"//",fold:"brace",closeBrackets:"()[]{}''\"\"``",helperType:l?"json":"javascript",jsonldMode:r,jsonMode:l,expressionAllowed:Ne,skipExpression:function(e){var t=e.cc[e.cc.length-1];t!=O&&t!=D||e.cc.pop()}}}),e.registerHelper("wordChars","javascript",/[\w$]/),e.defineMIME("text/javascript","javascript"),e.defineMIME("text/ecmascript","javascript"),e.defineMIME("application/javascript","javascript"),e.defineMIME("application/x-javascript","javascript"),e.defineMIME("application/ecmascript","javascript"),e.defineMIME("application/json",{name:"javascript",json:!0}),e.defineMIME("application/x-json",{name:"javascript",json:!0}),e.defineMIME("application/ld+json",{name:"javascript",jsonld:!0}),e.defineMIME("text/typescript",{name:"javascript",typescript:!0}),e.defineMIME("application/typescript",{name:"javascript",typescript:!0})})(i(4))},function(e,t,i){(function(e){"use strict";function t(e){for(var t={},i=0;i<e.length;++i)t[e[i].toLowerCase()]=!0;return t}e.defineMode("css",function(t,i){var s=i.inline;i.propertyKeywords||(i=e.resolveMode("text/css"));var n,a,o=t.indentUnit,r=i.tokenHooks,l=i.documentTypes||{},c=i.mediaTypes||{},d=i.mediaFeatures||{},u=i.mediaValueKeywords||{},p=i.propertyKeywords||{},f=i.nonStandardPropertyKeywords||{},h=i.fontProperties||{},m=i.counterDescriptors||{},g=i.colorKeywords||{},v=i.valueKeywords||{},x=i.allowNested,y=i.lineComment,b=!0===i.supportsAtComponent;function w(e,t){return n=t,e}function k(e){return function(t,i){for(var s,n=!1;null!=(s=t.next());){if(s==e&&!n){")"==e&&t.backUp(1);break}n=!n&&"\\"==s}return(s==e||!n&&")"!=e)&&(i.tokenize=null),w("string","string")}}function _(e,t){return e.next(),e.match(/\s*[\"\')]/,!1)?t.tokenize=null:t.tokenize=k(")"),w(null,"(")}function S(e,t,i){this.type=e,this.indent=t,this.prev=i}function C(e,t,i,s){return e.context=new S(i,t.indentation()+(!1===s?0:o),e.context),i}function A(e){return e.context.prev&&(e.context=e.context.prev),e.context.type}function M(e,t,i){return L[i.context.type](e,t,i)}function F(e,t,i,s){for(var n=s||1;n>0;n--)i.context=i.context.prev;return M(e,t,i)}function E(e){var t=e.current().toLowerCase();a=v.hasOwnProperty(t)?"atom":g.hasOwnProperty(t)?"keyword":"variable"}var L={top:function(e,t,i){if("{"==e)return C(i,t,"block");if("}"==e&&i.context.prev)return A(i);if(b&&/@component/i.test(e))return C(i,t,"atComponentBlock");if(/^@(-moz-)?document$/i.test(e))return C(i,t,"documentTypes");if(/^@(media|supports|(-moz-)?document|import)$/i.test(e))return C(i,t,"atBlock");if(/^@(font-face|counter-style)/i.test(e))return i.stateArg=e,"restricted_atBlock_before";if(/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(e))return"keyframes";if(e&&"@"==e.charAt(0))return C(i,t,"at");if("hash"==e)a="builtin";else if("word"==e)a="tag";else{if("variable-definition"==e)return"maybeprop";if("interpolation"==e)return C(i,t,"interpolation");if(":"==e)return"pseudo";if(x&&"("==e)return C(i,t,"parens")}return i.context.type},block:function(e,t,i){if("word"==e){var s=t.current().toLowerCase();return p.hasOwnProperty(s)?(a="property","maybeprop"):f.hasOwnProperty(s)?(a="string-2","maybeprop"):x?(a=t.match(/^\s*:(?:\s|$)/,!1)?"property":"tag","block"):(a+=" error","maybeprop")}return"meta"==e?"block":x||"hash"!=e&&"qualifier"!=e?L.top(e,t,i):(a="error","block")},maybeprop:function(e,t,i){return":"==e?C(i,t,"prop"):M(e,t,i)},prop:function(e,t,i){if(";"==e)return A(i);if("{"==e&&x)return C(i,t,"propBlock");if("}"==e||"{"==e)return F(e,t,i);if("("==e)return C(i,t,"parens");if("hash"!=e||/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(t.current())){if("word"==e)E(t);else if("interpolation"==e)return C(i,t,"interpolation")}else a+=" error";return"prop"},propBlock:function(e,t,i){return"}"==e?A(i):"word"==e?(a="property","maybeprop"):i.context.type},parens:function(e,t,i){return"{"==e||"}"==e?F(e,t,i):")"==e?A(i):"("==e?C(i,t,"parens"):"interpolation"==e?C(i,t,"interpolation"):("word"==e&&E(t),"parens")},pseudo:function(e,t,i){return"meta"==e?"pseudo":"word"==e?(a="variable-3",i.context.type):M(e,t,i)},documentTypes:function(e,t,i){return"word"==e&&l.hasOwnProperty(t.current())?(a="tag",i.context.type):L.atBlock(e,t,i)},atBlock:function(e,t,i){if("("==e)return C(i,t,"atBlock_parens");if("}"==e||";"==e)return F(e,t,i);if("{"==e)return A(i)&&C(i,t,x?"block":"top");if("interpolation"==e)return C(i,t,"interpolation");if("word"==e){var s=t.current().toLowerCase();a="only"==s||"not"==s||"and"==s||"or"==s?"keyword":c.hasOwnProperty(s)?"attribute":d.hasOwnProperty(s)?"property":u.hasOwnProperty(s)?"keyword":p.hasOwnProperty(s)?"property":f.hasOwnProperty(s)?"string-2":v.hasOwnProperty(s)?"atom":g.hasOwnProperty(s)?"keyword":"error"}return i.context.type},atComponentBlock:function(e,t,i){return"}"==e?F(e,t,i):"{"==e?A(i)&&C(i,t,x?"block":"top",!1):("word"==e&&(a="error"),i.context.type)},atBlock_parens:function(e,t,i){return")"==e?A(i):"{"==e||"}"==e?F(e,t,i,2):L.atBlock(e,t,i)},restricted_atBlock_before:function(e,t,i){return"{"==e?C(i,t,"restricted_atBlock"):"word"==e&&"@counter-style"==i.stateArg?(a="variable","restricted_atBlock_before"):M(e,t,i)},restricted_atBlock:function(e,t,i){return"}"==e?(i.stateArg=null,A(i)):"word"==e?(a="@font-face"==i.stateArg&&!h.hasOwnProperty(t.current().toLowerCase())||"@counter-style"==i.stateArg&&!m.hasOwnProperty(t.current().toLowerCase())?"error":"property","maybeprop"):"restricted_atBlock"},keyframes:function(e,t,i){return"word"==e?(a="variable","keyframes"):"{"==e?C(i,t,"top"):M(e,t,i)},at:function(e,t,i){return";"==e?A(i):"{"==e||"}"==e?F(e,t,i):("word"==e?a="tag":"hash"==e&&(a="builtin"),"at")},interpolation:function(e,t,i){return"}"==e?A(i):"{"==e||";"==e?F(e,t,i):("word"==e?a="variable":"variable"!=e&&"("!=e&&")"!=e&&(a="error"),"interpolation")}};return{startState:function(e){return{tokenize:null,state:s?"block":"top",stateArg:null,context:new S(s?"block":"top",e||0,null)}},token:function(e,t){if(!t.tokenize&&e.eatSpace())return null;var i=(t.tokenize||function(e,t){var i=e.next();if(r[i]){var s=r[i](e,t);if(!1!==s)return s}return"@"==i?(e.eatWhile(/[\w\\\-]/),w("def",e.current())):"="==i||("~"==i||"|"==i)&&e.eat("=")?w(null,"compare"):'"'==i||"'"==i?(t.tokenize=k(i),t.tokenize(e,t)):"#"==i?(e.eatWhile(/[\w\\\-]/),w("atom","hash")):"!"==i?(e.match(/^\s*\w*/),w("keyword","important")):/\d/.test(i)||"."==i&&e.eat(/\d/)?(e.eatWhile(/[\w.%]/),w("number","unit")):"-"!==i?/[,+>*\/]/.test(i)?w(null,"select-op"):"."==i&&e.match(/^-?[_a-z][_a-z0-9-]*/i)?w("qualifier","qualifier"):/[:;{}\[\]\(\)]/.test(i)?w(null,i):("u"==i||"U"==i)&&e.match(/rl(-prefix)?\(/i)||("d"==i||"D"==i)&&e.match("omain(",!0,!0)||("r"==i||"R"==i)&&e.match("egexp(",!0,!0)?(e.backUp(1),t.tokenize=_,w("property","word")):/[\w\\\-]/.test(i)?(e.eatWhile(/[\w\\\-]/),w("property","word")):w(null,null):/[\d.]/.test(e.peek())?(e.eatWhile(/[\w.%]/),w("number","unit")):e.match(/^-[\w\\\-]+/)?(e.eatWhile(/[\w\\\-]/),e.match(/^\s*:/,!1)?w("variable-2","variable-definition"):w("variable-2","variable")):e.match(/^\w+-/)?w("meta","meta"):void 0})(e,t);return i&&"object"==typeof i&&(n=i[1],i=i[0]),a=i,"comment"!=n&&(t.state=L[t.state](n,e,t)),a},indent:function(e,t){var i=e.context,s=t&&t.charAt(0),n=i.indent;return"prop"!=i.type||"}"!=s&&")"!=s||(i=i.prev),i.prev&&("}"!=s||"block"!=i.type&&"top"!=i.type&&"interpolation"!=i.type&&"restricted_atBlock"!=i.type?(")"!=s||"parens"!=i.type&&"atBlock_parens"!=i.type)&&("{"!=s||"at"!=i.type&&"atBlock"!=i.type)||(n=Math.max(0,i.indent-o)):n=(i=i.prev).indent),n},electricChars:"}",blockCommentStart:"/*",blockCommentEnd:"*/",blockCommentContinue:" * ",lineComment:y,fold:"brace"}});var i=["domain","regexp","url","url-prefix"],s=t(i),n=["all","aural","braille","handheld","print","projection","screen","tty","tv","embossed"],a=t(n),o=["width","min-width","max-width","height","min-height","max-height","device-width","min-device-width","max-device-width","device-height","min-device-height","max-device-height","aspect-ratio","min-aspect-ratio","max-aspect-ratio","device-aspect-ratio","min-device-aspect-ratio","max-device-aspect-ratio","color","min-color","max-color","color-index","min-color-index","max-color-index","monochrome","min-monochrome","max-monochrome","resolution","min-resolution","max-resolution","scan","grid","orientation","device-pixel-ratio","min-device-pixel-ratio","max-device-pixel-ratio","pointer","any-pointer","hover","any-hover"],r=t(o),l=["landscape","portrait","none","coarse","fine","on-demand","hover","interlace","progressive"],c=t(l),d=["align-content","align-items","align-self","alignment-adjust","alignment-baseline","anchor-point","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","appearance","azimuth","backface-visibility","background","background-attachment","background-blend-mode","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","binding","bleed","bookmark-label","bookmark-level","bookmark-state","bookmark-target","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","color","color-profile","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","crop","cue","cue-after","cue-before","cursor","direction","display","dominant-baseline","drop-initial-after-adjust","drop-initial-after-align","drop-initial-before-adjust","drop-initial-before-align","drop-initial-size","drop-initial-value","elevation","empty-cells","fit","fit-position","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","float-offset","flow-from","flow-into","font","font-feature-settings","font-family","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-gap","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-gap","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","inline-box-align","justify-content","justify-items","justify-self","left","letter-spacing","line-break","line-height","line-stacking","line-stacking-ruby","line-stacking-shift","line-stacking-strategy","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marks","marquee-direction","marquee-loop","marquee-play-count","marquee-speed","marquee-style","max-height","max-width","min-height","min-width","move-to","nav-down","nav-index","nav-left","nav-right","nav-up","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-style","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page","page-break-after","page-break-before","page-break-inside","page-policy","pause","pause-after","pause-before","perspective","perspective-origin","pitch","pitch-range","place-content","place-items","place-self","play-during","position","presentation-level","punctuation-trim","quotes","region-break-after","region-break-before","region-break-inside","region-fragment","rendering-intent","resize","rest","rest-after","rest-before","richness","right","rotation","rotation-point","ruby-align","ruby-overhang","ruby-position","ruby-span","shape-image-threshold","shape-inside","shape-margin","shape-outside","size","speak","speak-as","speak-header","speak-numeral","speak-punctuation","speech-rate","stress","string-set","tab-size","table-layout","target","target-name","target-new","target-position","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-height","text-indent","text-justify","text-outline","text-overflow","text-shadow","text-size-adjust","text-space-collapse","text-transform","text-underline-position","text-wrap","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","user-select","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","z-index","clip-path","clip-rule","mask","enable-background","filter","flood-color","flood-opacity","lighting-color","stop-color","stop-opacity","pointer-events","color-interpolation","color-interpolation-filters","color-rendering","fill","fill-opacity","fill-rule","image-rendering","marker","marker-end","marker-mid","marker-start","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-rendering","baseline-shift","dominant-baseline","glyph-orientation-horizontal","glyph-orientation-vertical","text-anchor","writing-mode"],u=t(d),p=["scrollbar-arrow-color","scrollbar-base-color","scrollbar-dark-shadow-color","scrollbar-face-color","scrollbar-highlight-color","scrollbar-shadow-color","scrollbar-3d-light-color","scrollbar-track-color","shape-inside","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","zoom"],f=t(p),h=t(["font-family","src","unicode-range","font-variant","font-feature-settings","font-stretch","font-weight","font-style"]),m=t(["additive-symbols","fallback","negative","pad","prefix","range","speak-as","suffix","symbols","system"]),g=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],v=t(g),x=["above","absolute","activeborder","additive","activecaption","afar","after-white-space","ahead","alias","all","all-scroll","alphabetic","alternate","always","amharic","amharic-abegede","antialiased","appworkspace","arabic-indic","armenian","asterisks","attr","auto","auto-flow","avoid","avoid-column","avoid-page","avoid-region","background","backwards","baseline","below","bidi-override","binary","bengali","blink","block","block-axis","bold","bolder","border","border-box","both","bottom","break","break-all","break-word","bullets","button","button-bevel","buttonface","buttonhighlight","buttonshadow","buttontext","calc","cambodian","capitalize","caps-lock-indicator","caption","captiontext","caret","cell","center","checkbox","circle","cjk-decimal","cjk-earthly-branch","cjk-heavenly-stem","cjk-ideographic","clear","clip","close-quote","col-resize","collapse","color","color-burn","color-dodge","column","column-reverse","compact","condensed","contain","content","contents","content-box","context-menu","continuous","copy","counter","counters","cover","crop","cross","crosshair","currentcolor","cursive","cyclic","darken","dashed","decimal","decimal-leading-zero","default","default-button","dense","destination-atop","destination-in","destination-out","destination-over","devanagari","difference","disc","discard","disclosure-closed","disclosure-open","document","dot-dash","dot-dot-dash","dotted","double","down","e-resize","ease","ease-in","ease-in-out","ease-out","element","ellipse","ellipsis","embed","end","ethiopic","ethiopic-abegede","ethiopic-abegede-am-et","ethiopic-abegede-gez","ethiopic-abegede-ti-er","ethiopic-abegede-ti-et","ethiopic-halehame-aa-er","ethiopic-halehame-aa-et","ethiopic-halehame-am-et","ethiopic-halehame-gez","ethiopic-halehame-om-et","ethiopic-halehame-sid-et","ethiopic-halehame-so-et","ethiopic-halehame-ti-er","ethiopic-halehame-ti-et","ethiopic-halehame-tig","ethiopic-numeric","ew-resize","exclusion","expanded","extends","extra-condensed","extra-expanded","fantasy","fast","fill","fixed","flat","flex","flex-end","flex-start","footnotes","forwards","from","geometricPrecision","georgian","graytext","grid","groove","gujarati","gurmukhi","hand","hangul","hangul-consonant","hard-light","hebrew","help","hidden","hide","higher","highlight","highlighttext","hiragana","hiragana-iroha","horizontal","hsl","hsla","hue","icon","ignore","inactiveborder","inactivecaption","inactivecaptiontext","infinite","infobackground","infotext","inherit","initial","inline","inline-axis","inline-block","inline-flex","inline-grid","inline-table","inset","inside","intrinsic","invert","italic","japanese-formal","japanese-informal","justify","kannada","katakana","katakana-iroha","keep-all","khmer","korean-hangul-formal","korean-hanja-formal","korean-hanja-informal","landscape","lao","large","larger","left","level","lighter","lighten","line-through","linear","linear-gradient","lines","list-item","listbox","listitem","local","logical","loud","lower","lower-alpha","lower-armenian","lower-greek","lower-hexadecimal","lower-latin","lower-norwegian","lower-roman","lowercase","ltr","luminosity","malayalam","match","matrix","matrix3d","media-controls-background","media-current-time-display","media-fullscreen-button","media-mute-button","media-play-button","media-return-to-realtime-button","media-rewind-button","media-seek-back-button","media-seek-forward-button","media-slider","media-sliderthumb","media-time-remaining-display","media-volume-slider","media-volume-slider-container","media-volume-sliderthumb","medium","menu","menulist","menulist-button","menulist-text","menulist-textfield","menutext","message-box","middle","min-intrinsic","mix","mongolian","monospace","move","multiple","multiply","myanmar","n-resize","narrower","ne-resize","nesw-resize","no-close-quote","no-drop","no-open-quote","no-repeat","none","normal","not-allowed","nowrap","ns-resize","numbers","numeric","nw-resize","nwse-resize","oblique","octal","opacity","open-quote","optimizeLegibility","optimizeSpeed","oriya","oromo","outset","outside","outside-shape","overlay","overline","padding","padding-box","painted","page","paused","persian","perspective","plus-darker","plus-lighter","pointer","polygon","portrait","pre","pre-line","pre-wrap","preserve-3d","progress","push-button","radial-gradient","radio","read-only","read-write","read-write-plaintext-only","rectangle","region","relative","repeat","repeating-linear-gradient","repeating-radial-gradient","repeat-x","repeat-y","reset","reverse","rgb","rgba","ridge","right","rotate","rotate3d","rotateX","rotateY","rotateZ","round","row","row-resize","row-reverse","rtl","run-in","running","s-resize","sans-serif","saturation","scale","scale3d","scaleX","scaleY","scaleZ","screen","scroll","scrollbar","scroll-position","se-resize","searchfield","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","self-start","self-end","semi-condensed","semi-expanded","separate","serif","show","sidama","simp-chinese-formal","simp-chinese-informal","single","skew","skewX","skewY","skip-white-space","slide","slider-horizontal","slider-vertical","sliderthumb-horizontal","sliderthumb-vertical","slow","small","small-caps","small-caption","smaller","soft-light","solid","somali","source-atop","source-in","source-out","source-over","space","space-around","space-between","space-evenly","spell-out","square","square-button","start","static","status-bar","stretch","stroke","sub","subpixel-antialiased","super","sw-resize","symbolic","symbols","system-ui","table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row","table-row-group","tamil","telugu","text","text-bottom","text-top","textarea","textfield","thai","thick","thin","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","tibetan","tigre","tigrinya-er","tigrinya-er-abegede","tigrinya-et","tigrinya-et-abegede","to","top","trad-chinese-formal","trad-chinese-informal","transform","translate","translate3d","translateX","translateY","translateZ","transparent","ultra-condensed","ultra-expanded","underline","unset","up","upper-alpha","upper-armenian","upper-greek","upper-hexadecimal","upper-latin","upper-norwegian","upper-roman","uppercase","urdu","url","var","vertical","vertical-text","visible","visibleFill","visiblePainted","visibleStroke","visual","w-resize","wait","wave","wider","window","windowframe","windowtext","words","wrap","wrap-reverse","x-large","x-small","xor","xx-large","xx-small"],y=t(x),b=i.concat(n).concat(o).concat(l).concat(d).concat(p).concat(g).concat(x);function w(e,t){for(var i,s=!1;null!=(i=e.next());){if(s&&"/"==i){t.tokenize=null;break}s="*"==i}return["comment","comment"]}e.registerHelper("hintWords","css",b),e.defineMIME("text/css",{documentTypes:s,mediaTypes:a,mediaFeatures:r,mediaValueKeywords:c,propertyKeywords:u,nonStandardPropertyKeywords:f,fontProperties:h,counterDescriptors:m,colorKeywords:v,valueKeywords:y,tokenHooks:{"/":function(e,t){return!!e.eat("*")&&(t.tokenize=w,w(e,t))}},name:"css"}),e.defineMIME("text/x-scss",{mediaTypes:a,mediaFeatures:r,mediaValueKeywords:c,propertyKeywords:u,nonStandardPropertyKeywords:f,colorKeywords:v,valueKeywords:y,fontProperties:h,allowNested:!0,lineComment:"//",tokenHooks:{"/":function(e,t){return e.eat("/")?(e.skipToEnd(),["comment","comment"]):e.eat("*")?(t.tokenize=w,w(e,t)):["operator","operator"]},":":function(e){return!!e.match(/\s*\{/,!1)&&[null,null]},$:function(e){return e.match(/^[\w-]+/),e.match(/^\s*:/,!1)?["variable-2","variable-definition"]:["variable-2","variable"]},"#":function(e){return!!e.eat("{")&&[null,"interpolation"]}},name:"css",helperType:"scss"}),e.defineMIME("text/x-less",{mediaTypes:a,mediaFeatures:r,mediaValueKeywords:c,propertyKeywords:u,nonStandardPropertyKeywords:f,colorKeywords:v,valueKeywords:y,fontProperties:h,allowNested:!0,lineComment:"//",tokenHooks:{"/":function(e,t){return e.eat("/")?(e.skipToEnd(),["comment","comment"]):e.eat("*")?(t.tokenize=w,w(e,t)):["operator","operator"]},"@":function(e){return e.eat("{")?[null,"interpolation"]:!e.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i,!1)&&(e.eatWhile(/[\w\\\-]/),e.match(/^\s*:/,!1)?["variable-2","variable-definition"]:["variable-2","variable"])},"&":function(){return["atom","atom"]}},name:"css",helperType:"less"}),e.defineMIME("text/x-gss",{documentTypes:s,mediaTypes:a,mediaFeatures:r,propertyKeywords:u,nonStandardPropertyKeywords:f,fontProperties:h,counterDescriptors:m,colorKeywords:v,valueKeywords:y,supportsAtComponent:!0,tokenHooks:{"/":function(e,t){return!!e.eat("*")&&(t.tokenize=w,w(e,t))}},name:"css",helperType:"gss"})})(i(4))},function(e,t,i){(function(e){"use strict";e.defineMode("markdown",function(t,i){var s=e.getMode(t,"text/html"),n="null"==s.name;void 0===i.highlightFormatting&&(i.highlightFormatting=!1),void 0===i.maxBlockquoteDepth&&(i.maxBlockquoteDepth=0),void 0===i.taskLists&&(i.taskLists=!1),void 0===i.strikethrough&&(i.strikethrough=!1),void 0===i.emoji&&(i.emoji=!1),void 0===i.fencedCodeBlockHighlighting&&(i.fencedCodeBlockHighlighting=!0),void 0===i.xml&&(i.xml=!0),void 0===i.tokenTypeOverrides&&(i.tokenTypeOverrides={});var a={header:"header",code:"comment",quote:"quote",list1:"variable-2",list2:"variable-3",list3:"keyword",hr:"hr",image:"image",imageAltText:"image-alt-text",imageMarker:"image-marker",formatting:"formatting",linkInline:"link",linkEmail:"link",linkText:"link",linkHref:"string",em:"em",strong:"strong",strikethrough:"strikethrough",emoji:"builtin"};for(var o in a)a.hasOwnProperty(o)&&i.tokenTypeOverrides[o]&&(a[o]=i.tokenTypeOverrides[o]);var r=/^([*\-_])(?:\s*\1){2,}\s*$/,l=/^(?:[*\-+]|^[0-9]+([.)]))\s+/,c=/^\[(x| )\](?=\s)/i,d=i.allowAtxHeaderWithoutSpace?/^(#+)/:/^(#+)(?: |$)/,u=/^ *(?:\={1,}|-{1,})\s*$/,p=/^[^#!\[\]*_\\<>` "'(~:]+/,f=/^(~~~+|```+)[ \t]*([\w+#-]*)[^\n`]*$/,h=/^\s*\[[^\]]+?\]:.*$/,m=/[!\"#$%&\'()*+,\-\.\/:;<=>?@\[\\\]^_`{|}~—]/;function g(e,t,i){return t.f=t.inline=i,i(e,t)}function v(e,t,i){return t.f=t.block=i,i(e,t)}function x(e){return e.linkTitle=!1,e.linkHref=!1,e.linkText=!1,e.em=!1,e.strong=!1,e.strikethrough=!1,e.quote=0,e.indentedCode=!1,e.f==b&&(e.f=S,e.block=y),e.trailingSpace=0,e.trailingSpaceNewLine=!1,e.prevLine=e.thisLine,e.thisLine={stream:null},null}function y(s,n){var o,p=s.column()===n.indentation,m=!(o=n.prevLine.stream)||!/\S/.test(o.string),v=n.indentedCode,x=n.prevLine.hr,y=!1!==n.list,b=(n.listStack[n.listStack.length-1]||0)+3;n.indentedCode=!1;var _=n.indentation;if(null===n.indentationDiff&&(n.indentationDiff=n.indentation,y)){for(n.em=!1,n.strong=!1,n.code=!1,n.strikethrough=!1,n.list=null;_<n.listStack[n.listStack.length-1];)n.listStack.pop(),n.listStack.length?n.indentation=n.listStack[n.listStack.length-1]:n.list=!1;!1!==n.list&&(n.indentationDiff=_-n.listStack[n.listStack.length-1])}var S=!(m||x||n.prevLine.header||y&&v||n.prevLine.fencedCodeEnd),C=(!1===n.list||x||m)&&n.indentation<=b&&s.match(r),A=null;if(n.indentationDiff>=4&&(v||n.prevLine.fencedCodeEnd||n.prevLine.header||m))return s.skipToEnd(),n.indentedCode=!0,a.code;if(s.eatSpace())return null;if(p&&n.indentation<=b&&(A=s.match(d))&&A[1].length<=6)return n.quote=0,n.header=A[1].length,n.thisLine.header=!0,i.highlightFormatting&&(n.formatting="header"),n.f=n.inline,k(n);if(n.indentation<=b&&s.eat(">"))return n.quote=p?1:n.quote+1,i.highlightFormatting&&(n.formatting="quote"),s.eatSpace(),k(n);if(!C&&!n.setext&&p&&n.indentation<=b&&(A=s.match(l))){var M=A[1]?"ol":"ul";return n.indentation=_+s.current().length,n.list=!0,n.quote=0,n.listStack.push(n.indentation),i.taskLists&&s.match(c,!1)&&(n.taskList=!0),n.f=n.inline,i.highlightFormatting&&(n.formatting=["list","list-"+M]),k(n)}return p&&n.indentation<=b&&(A=s.match(f,!0))?(n.quote=0,n.fencedEndRE=new RegExp(A[1]+"+ *$"),n.localMode=i.fencedCodeBlockHighlighting&&function(i){if(e.findModeByName){var s=e.findModeByName(i);s&&(i=s.mime||s.mimes[0])}var n=e.getMode(t,i);return"null"==n.name?null:n}(A[2]),n.localMode&&(n.localState=e.startState(n.localMode)),n.f=n.block=w,i.highlightFormatting&&(n.formatting="code-block"),n.code=-1,k(n)):n.setext||!(S&&y||n.quote||!1!==n.list||n.code||C||h.test(s.string))&&(A=s.lookAhead(1))&&(A=A.match(u))?(n.setext?(n.header=n.setext,n.setext=0,s.skipToEnd(),i.highlightFormatting&&(n.formatting="header")):(n.header="="==A[0].charAt(0)?1:2,n.setext=n.header),n.thisLine.header=!0,n.f=n.inline,k(n)):C?(s.skipToEnd(),n.hr=!0,n.thisLine.hr=!0,a.hr):"["===s.peek()?g(s,n,F):g(s,n,n.inline)}function b(t,i){var a=s.token(t,i.htmlState);if(!n){var o=e.innerMode(s,i.htmlState);("xml"==o.mode.name&&null===o.state.tagStart&&!o.state.context&&o.state.tokenize.isInText||i.md_inside&&t.current().indexOf(">")>-1)&&(i.f=S,i.block=y,i.htmlState=null)}return a}function w(e,t){var s,n=t.listStack[t.listStack.length-1]||0,o=t.indentation<n,r=n+3;return t.fencedEndRE&&t.indentation<=r&&(o||e.match(t.fencedEndRE))?(i.highlightFormatting&&(t.formatting="code-block"),o||(s=k(t)),t.localMode=t.localState=null,t.block=y,t.f=S,t.fencedEndRE=null,t.code=0,t.thisLine.fencedCodeEnd=!0,o?v(e,t,t.block):s):t.localMode?t.localMode.token(e,t.localState):(e.skipToEnd(),a.code)}function k(e){var t=[];if(e.formatting){t.push(a.formatting),"string"==typeof e.formatting&&(e.formatting=[e.formatting]);for(var s=0;s<e.formatting.length;s++)t.push(a.formatting+"-"+e.formatting[s]),"header"===e.formatting[s]&&t.push(a.formatting+"-"+e.formatting[s]+"-"+e.header),"quote"===e.formatting[s]&&(!i.maxBlockquoteDepth||i.maxBlockquoteDepth>=e.quote?t.push(a.formatting+"-"+e.formatting[s]+"-"+e.quote):t.push("error"))}if(e.taskOpen)return t.push("meta"),t.length?t.join(" "):null;if(e.taskClosed)return t.push("property"),t.length?t.join(" "):null;if(e.linkHref?t.push(a.linkHref,"url"):(e.strong&&t.push(a.strong),e.em&&t.push(a.em),e.strikethrough&&t.push(a.strikethrough),e.emoji&&t.push(a.emoji),e.linkText&&t.push(a.linkText),e.code&&t.push(a.code),e.image&&t.push(a.image),e.imageAltText&&t.push(a.imageAltText,"link"),e.imageMarker&&t.push(a.imageMarker)),e.header&&t.push(a.header,a.header+"-"+e.header),e.quote&&(t.push(a.quote),!i.maxBlockquoteDepth||i.maxBlockquoteDepth>=e.quote?t.push(a.quote+"-"+e.quote):t.push(a.quote+"-"+i.maxBlockquoteDepth)),!1!==e.list){var n=(e.listStack.length-1)%3;n?1===n?t.push(a.list2):t.push(a.list3):t.push(a.list1)}return e.trailingSpaceNewLine?t.push("trailing-space-new-line"):e.trailingSpace&&t.push("trailing-space-"+(e.trailingSpace%2?"a":"b")),t.length?t.join(" "):null}function _(e,t){if(e.match(p,!0))return k(t)}function S(t,n){var o=n.text(t,n);if(void 0!==o)return o;if(n.list)return n.list=null,k(n);if(n.taskList)return" "===t.match(c,!0)[1]?n.taskOpen=!0:n.taskClosed=!0,i.highlightFormatting&&(n.formatting="task"),n.taskList=!1,k(n);if(n.taskOpen=!1,n.taskClosed=!1,n.header&&t.match(/^#+$/,!0))return i.highlightFormatting&&(n.formatting="header"),k(n);var r=t.next();if(n.linkTitle){n.linkTitle=!1;var l=r;"("===r&&(l=")");var d="^\\s*(?:[^"+(l=(l+"").replace(/([.?*+^\[\]\\(){}|-])/g,"\\$1"))+"\\\\]+|\\\\\\\\|\\\\.)"+l;if(t.match(new RegExp(d),!0))return a.linkHref}if("`"===r){var u=n.formatting;i.highlightFormatting&&(n.formatting="code"),t.eatWhile("`");var p=t.current().length;if(0!=n.code||n.quote&&1!=p){if(p==n.code){var f=k(n);return n.code=0,f}return n.formatting=u,k(n)}return n.code=p,k(n)}if(n.code)return k(n);if("\\"===r&&(t.next(),i.highlightFormatting)){var h=k(n),g=a.formatting+"-escape";return h?h+" "+g:g}if("!"===r&&t.match(/\[[^\]]*\] ?(?:\(|\[)/,!1))return n.imageMarker=!0,n.image=!0,i.highlightFormatting&&(n.formatting="image"),k(n);if("["===r&&n.imageMarker&&t.match(/[^\]]*\](\(.*?\)| ?\[.*?\])/,!1))return n.imageMarker=!1,n.imageAltText=!0,i.highlightFormatting&&(n.formatting="image"),k(n);if("]"===r&&n.imageAltText){i.highlightFormatting&&(n.formatting="image");var h=k(n);return n.imageAltText=!1,n.image=!1,n.inline=n.f=A,h}if("["===r&&!n.image)return n.linkText=!0,i.highlightFormatting&&(n.formatting="link"),k(n);if("]"===r&&n.linkText){i.highlightFormatting&&(n.formatting="link");var h=k(n);return n.linkText=!1,n.inline=n.f=t.match(/\(.*?\)| ?\[.*?\]/,!1)?A:S,h}if("<"===r&&t.match(/^(https?|ftps?):\/\/(?:[^\\>]|\\.)+>/,!1))return n.f=n.inline=C,i.highlightFormatting&&(n.formatting="link"),(h=k(n))?h+=" ":h="",h+a.linkInline;if("<"===r&&t.match(/^[^> \\]+@(?:[^\\>]|\\.)+>/,!1))return n.f=n.inline=C,i.highlightFormatting&&(n.formatting="link"),(h=k(n))?h+=" ":h="",h+a.linkEmail;if(i.xml&&"<"===r&&t.match(/^(!--|[a-z][a-z0-9-]*(?:\s+[a-z_:.\-]+(?:\s*=\s*[^>]+)?)*\s*>)/i,!1)){var x=t.string.indexOf(">",t.pos);if(-1!=x){var y=t.string.substring(t.start,x);/markdown\s*=\s*('|"){0,1}1('|"){0,1}/.test(y)&&(n.md_inside=!0)}return t.backUp(1),n.htmlState=e.startState(s),v(t,n,b)}if(i.xml&&"<"===r&&t.match(/^\/\w*?>/))return n.md_inside=!1,"tag";if("*"===r||"_"===r){for(var w=1,_=1==t.pos?" ":t.string.charAt(t.pos-2);w<3&&t.eat(r);)w++;var M=t.peek()||" ",F=!/\s/.test(M)&&(!m.test(M)||/\s/.test(_)||m.test(_)),E=!/\s/.test(_)&&(!m.test(_)||/\s/.test(M)||m.test(M)),L=null,$=null;if(w%2&&(n.em||!F||"*"!==r&&E&&!m.test(_)?n.em!=r||!E||"*"!==r&&F&&!m.test(M)||(L=!1):L=!0),w>1&&(n.strong||!F||"*"!==r&&E&&!m.test(_)?n.strong!=r||!E||"*"!==r&&F&&!m.test(M)||($=!1):$=!0),null!=$||null!=L){i.highlightFormatting&&(n.formatting=null==L?"strong":null==$?"em":"strong em"),!0===L&&(n.em=r),!0===$&&(n.strong=r);f=k(n);return!1===L&&(n.em=!1),!1===$&&(n.strong=!1),f}}else if(" "===r&&(t.eat("*")||t.eat("_"))){if(" "===t.peek())return k(n);t.backUp(1)}if(i.strikethrough)if("~"===r&&t.eatWhile(r)){if(n.strikethrough){i.highlightFormatting&&(n.formatting="strikethrough");f=k(n);return n.strikethrough=!1,f}if(t.match(/^[^\s]/,!1))return n.strikethrough=!0,i.highlightFormatting&&(n.formatting="strikethrough"),k(n)}else if(" "===r&&t.match(/^~~/,!0)){if(" "===t.peek())return k(n);t.backUp(2)}if(i.emoji&&":"===r&&t.match(/^[a-z_\d+-]+:/)){n.emoji=!0,i.highlightFormatting&&(n.formatting="emoji");var P=k(n);return n.emoji=!1,P}return" "===r&&(t.match(/ +$/,!1)?n.trailingSpace++:n.trailingSpace&&(n.trailingSpaceNewLine=!0)),k(n)}function C(e,t){if(">"===e.next()){t.f=t.inline=S,i.highlightFormatting&&(t.formatting="link");var s=k(t);return s?s+=" ":s="",s+a.linkInline}return e.match(/^[^>]+/,!0),a.linkInline}function A(e,t){if(e.eatSpace())return null;var s,n=e.next();return"("===n||"["===n?(t.f=t.inline=(s="("===n?")":"]",function(e,t){var n=e.next();if(n===s){t.f=t.inline=S,i.highlightFormatting&&(t.formatting="link-string");var a=k(t);return t.linkHref=!1,a}return e.match(M[s]),t.linkHref=!0,k(t)}),i.highlightFormatting&&(t.formatting="link-string"),t.linkHref=!0,k(t)):"error"}var M={")":/^(?:[^\\\(\)]|\\.|\((?:[^\\\(\)]|\\.)*\))*?(?=\))/,"]":/^(?:[^\\\[\]]|\\.|\[(?:[^\\\[\]]|\\.)*\])*?(?=\])/};function F(e,t){return e.match(/^([^\]\\]|\\.)*\]:/,!1)?(t.f=E,e.next(),i.highlightFormatting&&(t.formatting="link"),t.linkText=!0,k(t)):g(e,t,S)}function E(e,t){if(e.match(/^\]:/,!0)){t.f=t.inline=L,i.highlightFormatting&&(t.formatting="link");var s=k(t);return t.linkText=!1,s}return e.match(/^([^\]\\]|\\.)+/,!0),a.linkText}function L(e,t){return e.eatSpace()?null:(e.match(/^[^\s]+/,!0),void 0===e.peek()?t.linkTitle=!0:e.match(/^(?:\s+(?:"(?:[^"\\]|\\\\|\\.)+"|'(?:[^'\\]|\\\\|\\.)+'|\((?:[^)\\]|\\\\|\\.)+\)))?/,!0),t.f=t.inline=S,a.linkHref+" url")}var $={startState:function(){return{f:y,prevLine:{stream:null},thisLine:{stream:null},block:y,htmlState:null,indentation:0,inline:S,text:_,formatting:!1,linkText:!1,linkHref:!1,linkTitle:!1,code:0,em:!1,strong:!1,header:0,setext:0,hr:!1,taskList:!1,list:!1,listStack:[],quote:0,trailingSpace:0,trailingSpaceNewLine:!1,strikethrough:!1,emoji:!1,fencedEndRE:null}},copyState:function(t){return{f:t.f,prevLine:t.prevLine,thisLine:t.thisLine,block:t.block,htmlState:t.htmlState&&e.copyState(s,t.htmlState),indentation:t.indentation,localMode:t.localMode,localState:t.localMode?e.copyState(t.localMode,t.localState):null,inline:t.inline,text:t.text,formatting:!1,linkText:t.linkText,linkTitle:t.linkTitle,linkHref:t.linkHref,code:t.code,em:t.em,strong:t.strong,strikethrough:t.strikethrough,emoji:t.emoji,header:t.header,setext:t.setext,hr:t.hr,taskList:t.taskList,list:t.list,listStack:t.listStack.slice(0),quote:t.quote,indentedCode:t.indentedCode,trailingSpace:t.trailingSpace,trailingSpaceNewLine:t.trailingSpaceNewLine,md_inside:t.md_inside,fencedEndRE:t.fencedEndRE}},token:function(e,t){if(t.formatting=!1,e!=t.thisLine.stream){if(t.header=0,t.hr=!1,e.match(/^\s*$/,!0))return x(t),null;if(t.prevLine=t.thisLine,t.thisLine={stream:e},t.taskList=!1,t.trailingSpace=0,t.trailingSpaceNewLine=!1,!t.localState&&(t.f=t.block,t.f!=b)){var i=e.match(/^\s*/,!0)[0].replace(/\t/g,"    ").length;if(t.indentation=i,t.indentationDiff=null,i>0)return null}}return t.f(e,t)},innerMode:function(e){return e.block==b?{state:e.htmlState,mode:s}:e.localState?{state:e.localState,mode:e.localMode}:{state:e,mode:$}},indent:function(t,i,n){return t.block==b&&s.indent?s.indent(t.htmlState,i,n):t.localState&&t.localMode.indent?t.localMode.indent(t.localState,i,n):e.Pass},blankLine:x,getType:k,closeBrackets:"()[]{}''\"\"``",fold:"markdown"};return $},"xml"),e.defineMIME("text/markdown","markdown"),e.defineMIME("text/x-markdown","markdown")})(i(4),i(19),i(597))},function(e,t,i){(function(e){"use strict";function t(e,t,i,s,n,a){this.indented=e,this.column=t,this.type=i,this.info=s,this.align=n,this.prev=a}function i(e,i,s,n){var a=e.indented;return e.context&&"statement"==e.context.type&&"statement"!=s&&(a=e.context.indented),e.context=new t(a,i,s,n,null,e.context)}function s(e){var t=e.context.type;return")"!=t&&"]"!=t&&"}"!=t||(e.indented=e.context.indented),e.context=e.context.prev}function n(e,t,i){return"variable"==t.prevToken||"type"==t.prevToken||(!!/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(e.string.slice(0,i))||(!(!t.typeAtEndOfLine||e.column()!=e.indentation())||void 0))}function a(e){for(;;){if(!e||"top"==e.type)return!0;if("}"==e.type&&"namespace"!=e.prev.info)return!1;e=e.prev}}function o(e){for(var t={},i=e.split(" "),s=0;s<i.length;++s)t[i[s]]=!0;return t}function r(e,t){return"function"==typeof e?e(t):e.propertyIsEnumerable(t)}e.defineMode("clike",function(o,l){var c,d,u=o.indentUnit,p=l.statementIndentUnit||u,f=l.dontAlignCalls,h=l.keywords||{},m=l.types||{},g=l.builtin||{},v=l.blockKeywords||{},x=l.defKeywords||{},y=l.atoms||{},b=l.hooks||{},w=l.multiLineStrings,k=!1!==l.indentStatements,_=!1!==l.indentSwitch,S=l.namespaceSeparator,C=l.isPunctuationChar||/[\[\]{}\(\),;\:\.]/,A=l.numberStart||/[\d\.]/,M=l.number||/^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i,F=l.isOperatorChar||/[+\-*&%=<>!?|\/]/,E=l.isIdentifierChar||/[\w\$_\xa1-\uffff]/;function L(e,t){var i,s=e.next();if(b[s]){var n=b[s](e,t);if(!1!==n)return n}if('"'==s||"'"==s)return t.tokenize=(i=s,function(e,t){for(var s,n=!1,a=!1;null!=(s=e.next());){if(s==i&&!n){a=!0;break}n=!n&&"\\"==s}return(a||!n&&!w)&&(t.tokenize=null),"string"}),t.tokenize(e,t);if(C.test(s))return c=s,null;if(A.test(s)){if(e.backUp(1),e.match(M))return"number";e.next()}if("/"==s){if(e.eat("*"))return t.tokenize=$,$(e,t);if(e.eat("/"))return e.skipToEnd(),"comment"}if(F.test(s)){for(;!e.match(/^\/[\/*]/,!1)&&e.eat(F););return"operator"}if(e.eatWhile(E),S)for(;e.match(S);)e.eatWhile(E);var a=e.current();return r(h,a)?(r(v,a)&&(c="newstatement"),r(x,a)&&(d=!0),"keyword"):r(m,a)?"type":r(g,a)?(r(v,a)&&(c="newstatement"),"builtin"):r(y,a)?"atom":"variable"}function $(e,t){for(var i,s=!1;i=e.next();){if("/"==i&&s){t.tokenize=null;break}s="*"==i}return"comment"}function P(e,t){l.typeFirstDefinitions&&e.eol()&&a(t.context)&&(t.typeAtEndOfLine=n(e,t,e.pos))}return{startState:function(e){return{tokenize:null,context:new t((e||0)-u,0,"top",null,!1),indented:0,startOfLine:!0,prevToken:null}},token:function(e,t){var o=t.context;if(e.sol()&&(null==o.align&&(o.align=!1),t.indented=e.indentation(),t.startOfLine=!0),e.eatSpace())return P(e,t),null;c=d=null;var r=(t.tokenize||L)(e,t);if("comment"==r||"meta"==r)return r;if(null==o.align&&(o.align=!0),";"==c||":"==c||","==c&&e.match(/^\s*(?:\/\/.*)?$/,!1))for(;"statement"==t.context.type;)s(t);else if("{"==c)i(t,e.column(),"}");else if("["==c)i(t,e.column(),"]");else if("("==c)i(t,e.column(),")");else if("}"==c){for(;"statement"==o.type;)o=s(t);for("}"==o.type&&(o=s(t));"statement"==o.type;)o=s(t)}else c==o.type?s(t):k&&(("}"==o.type||"top"==o.type)&&";"!=c||"statement"==o.type&&"newstatement"==c)&&i(t,e.column(),"statement",e.current());if("variable"==r&&("def"==t.prevToken||l.typeFirstDefinitions&&n(e,t,e.start)&&a(t.context)&&e.match(/^\s*\(/,!1))&&(r="def"),b.token){var u=b.token(e,t,r);void 0!==u&&(r=u)}return"def"==r&&!1===l.styleDefs&&(r="variable"),t.startOfLine=!1,t.prevToken=d?"def":r||c,P(e,t),r},indent:function(t,i){if(t.tokenize!=L&&null!=t.tokenize||t.typeAtEndOfLine)return e.Pass;var s=t.context,n=i&&i.charAt(0);if("statement"==s.type&&"}"==n&&(s=s.prev),l.dontIndentStatements)for(;"statement"==s.type&&l.dontIndentStatements.test(s.info);)s=s.prev;if(b.indent){var a=b.indent(t,s,i);if("number"==typeof a)return a}var o=n==s.type,r=s.prev&&"switch"==s.prev.info;if(l.allmanIndentation&&/[{(]/.test(n)){for(;"top"!=s.type&&"}"!=s.type;)s=s.prev;return s.indented}return"statement"==s.type?s.indented+("{"==n?0:p):!s.align||f&&")"==s.type?")"!=s.type||o?s.indented+(o?0:u)+(o||!r||/^(?:case|default)\b/.test(i)?0:u):s.indented+p:s.column+(o?0:1)},electricInput:_?/^\s*(?:case .*?:|default:|\{\}?|\})$/:/^\s*[{}]$/,blockCommentStart:"/*",blockCommentEnd:"*/",blockCommentContinue:" * ",lineComment:"//",fold:"brace"}});var l="auto if break case register continue return default do sizeof static else struct switch extern typedef union for goto while enum const volatile",c="int long char short double float unsigned signed void size_t ptrdiff_t";function d(e,t){if(!t.startOfLine)return!1;for(var i,s=null;i=e.peek();){if("\\"==i&&e.match(/^.$/)){s=d;break}if("/"==i&&e.match(/^\/[\/\*]/,!1))break;e.next()}return t.tokenize=s,"meta"}function u(e,t){return"type"==t.prevToken&&"type"}function p(e){return e.eatWhile(/[\w\.']/),"number"}function f(e,t){if(e.backUp(1),e.match(/(R|u8R|uR|UR|LR)/)){var i=e.match(/"([^\s\\()]{0,16})\(/);return!!i&&(t.cpp11RawStringDelim=i[1],t.tokenize=m,m(e,t))}return e.match(/(u8|u|U|L)/)?!!e.match(/["']/,!1)&&"string":(e.next(),!1)}function h(e,t){for(var i;null!=(i=e.next());)if('"'==i&&!e.eat('"')){t.tokenize=null;break}return"string"}function m(e,t){var i=t.cpp11RawStringDelim.replace(/[^\w\s]/g,"\\$&");return e.match(new RegExp(".*?\\)"+i+'"'))?t.tokenize=null:e.skipToEnd(),"string"}function g(t,i){"string"==typeof t&&(t=[t]);var s=[];function n(e){if(e)for(var t in e)e.hasOwnProperty(t)&&s.push(t)}n(i.keywords),n(i.types),n(i.builtin),n(i.atoms),s.length&&(i.helperType=t[0],e.registerHelper("hintWords",t[0],s));for(var a=0;a<t.length;++a)e.defineMIME(t[a],i)}function v(e,t){for(var i=!1;!e.eol();){if(!i&&e.match('"""')){t.tokenize=null;break}i="\\"==e.next()&&!i}return"string"}g(["text/x-csrc","text/x-c","text/x-chdr"],{name:"clike",keywords:o(l),types:o(c+" bool _Complex _Bool float_t double_t intptr_t intmax_t int8_t int16_t int32_t int64_t uintptr_t uintmax_t uint8_t uint16_t uint32_t uint64_t"),blockKeywords:o("case do else for if switch while struct"),defKeywords:o("struct"),typeFirstDefinitions:!0,atoms:o("NULL true false"),hooks:{"#":d,"*":u},modeProps:{fold:["brace","include"]}}),g(["text/x-c++src","text/x-c++hdr"],{name:"clike",keywords:o(l+" asm dynamic_cast namespace reinterpret_cast try explicit new static_cast typeid catch operator template typename class friend private this using const_cast inline public throw virtual delete mutable protected alignas alignof constexpr decltype nullptr noexcept thread_local final static_assert override"),types:o(c+" bool wchar_t"),blockKeywords:o("catch class do else finally for if struct switch try while"),defKeywords:o("class namespace struct enum union"),typeFirstDefinitions:!0,atoms:o("true false NULL"),dontIndentStatements:/^template$/,isIdentifierChar:/[\w\$_~\xa1-\uffff]/,hooks:{"#":d,"*":u,u:f,U:f,L:f,R:f,0:p,1:p,2:p,3:p,4:p,5:p,6:p,7:p,8:p,9:p,token:function(e,t,i){if("variable"==i&&"("==e.peek()&&(";"==t.prevToken||null==t.prevToken||"}"==t.prevToken)&&(s=e.current(),(n=/(\w+)::~?(\w+)$/.exec(s))&&n[1]==n[2]))return"def";var s,n}},namespaceSeparator:"::",modeProps:{fold:["brace","include"]}}),g("text/x-java",{name:"clike",keywords:o("abstract assert break case catch class const continue default do else enum extends final finally float for goto if implements import instanceof interface native new package private protected public return static strictfp super switch synchronized this throw throws transient try volatile while @interface"),types:o("byte short int long float double boolean char void Boolean Byte Character Double Float Integer Long Number Object Short String StringBuffer StringBuilder Void"),blockKeywords:o("catch class do else finally for if switch try while"),defKeywords:o("class interface enum @interface"),typeFirstDefinitions:!0,atoms:o("true false null"),number:/^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,hooks:{"@":function(e){return!e.match("interface",!1)&&(e.eatWhile(/[\w\$_]/),"meta")}},modeProps:{fold:["brace","import"]}}),g("text/x-csharp",{name:"clike",keywords:o("abstract as async await base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in interface internal is lock namespace new operator out override params private protected public readonly ref return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"),types:o("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"),blockKeywords:o("catch class do else finally for foreach if struct switch try while"),defKeywords:o("class interface namespace struct var"),typeFirstDefinitions:!0,atoms:o("true false null"),hooks:{"@":function(e,t){return e.eat('"')?(t.tokenize=h,h(e,t)):(e.eatWhile(/[\w\$_]/),"meta")}}}),g("text/x-scala",{name:"clike",keywords:o("abstract case catch class def do else extends final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try type val var while with yield _ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble"),types:o("AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"),multiLineStrings:!0,blockKeywords:o("catch class enum do else finally for forSome if match switch try while"),defKeywords:o("class enum def object package trait type val var"),atoms:o("true false null"),indentStatements:!1,indentSwitch:!1,isOperatorChar:/[+\-*&%=<>!?|\/#:@]/,hooks:{"@":function(e){return e.eatWhile(/[\w\$_]/),"meta"},'"':function(e,t){return!!e.match('""')&&(t.tokenize=v,t.tokenize(e,t))},"'":function(e){return e.eatWhile(/[\w\$_\xa1-\uffff]/),"atom"},"=":function(e,i){var s=i.context;return!("}"!=s.type||!s.align||!e.eat(">"))&&(i.context=new t(s.indented,s.column,s.type,s.info,null,s.prev),"operator")},"/":function(e,t){return!!e.eat("*")&&(t.tokenize=function e(t){return function(i,s){for(var n;n=i.next();){if("*"==n&&i.eat("/")){if(1==t){s.tokenize=null;break}return s.tokenize=e(t-1),s.tokenize(i,s)}if("/"==n&&i.eat("*"))return s.tokenize=e(t+1),s.tokenize(i,s)}return"comment"}}(1),t.tokenize(e,t))}},modeProps:{closeBrackets:{triples:'"'}}}),g("text/x-kotlin",{name:"clike",keywords:o("package as typealias class interface this super val operator var fun for is in This throw return annotation break continue object if else while do try when !in !is as? file import where by get set abstract enum open inner override private public internal protected catch finally out final vararg reified dynamic companion constructor init sealed field property receiver param sparam lateinit data inline noinline tailrec external annotation crossinline const operator infix suspend actual expect setparam"),types:o("Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy LazyThreadSafetyMode LongArray Nothing ShortArray Unit"),intendSwitch:!1,indentStatements:!1,multiLineStrings:!0,number:/^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,blockKeywords:o("catch class do else finally for if where try while enum"),defKeywords:o("class val var object interface fun"),atoms:o("true false null this"),hooks:{"@":function(e){return e.eatWhile(/[\w\$_]/),"meta"},'"':function(e,t){var i;return t.tokenize=(i=e.match('""'),function(e,t){for(var s,n=!1,a=!1;!e.eol();){if(!i&&!n&&e.match('"')){a=!0;break}if(i&&e.match('"""')){a=!0;break}s=e.next(),!n&&"$"==s&&e.match("{")&&e.skipTo("}"),n=!n&&"\\"==s&&!i}return!a&&i||(t.tokenize=null),"string"}),t.tokenize(e,t)}},modeProps:{closeBrackets:{triples:'"'}}}),g(["x-shader/x-vertex","x-shader/x-fragment"],{name:"clike",keywords:o("sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow const attribute uniform varying break continue discard return for while do if else struct in out inout"),types:o("float int bool void vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 mat2 mat3 mat4"),blockKeywords:o("for while do if else struct"),builtin:o("radians degrees sin cos tan asin acos atan pow exp log exp2 sqrt inversesqrt abs sign floor ceil fract mod min max clamp mix step smoothstep length distance dot cross normalize ftransform faceforward reflect refract matrixCompMult lessThan lessThanEqual greaterThan greaterThanEqual equal notEqual any all not texture1D texture1DProj texture1DLod texture1DProjLod texture2D texture2DProj texture2DLod texture2DProjLod texture3D texture3DProj texture3DLod texture3DProjLod textureCube textureCubeLod shadow1D shadow2D shadow1DProj shadow2DProj shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod dFdx dFdy fwidth noise1 noise2 noise3 noise4"),atoms:o("true false gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_FogCoord gl_PointCoord gl_Position gl_PointSize gl_ClipVertex gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor gl_TexCoord gl_FogFragCoord gl_FragCoord gl_FrontFacing gl_FragData gl_FragDepth gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse gl_TexureMatrixTranspose gl_ModelViewMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose gl_TextureMatrixInverseTranspose gl_NormalScale gl_DepthRange gl_ClipPlane gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel gl_FrontLightModelProduct gl_BackLightModelProduct gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ gl_FogParameters gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits gl_MaxDrawBuffers"),indentSwitch:!1,hooks:{"#":d},modeProps:{fold:["brace","include"]}}),g("text/x-nesc",{name:"clike",keywords:o(l+"as atomic async call command component components configuration event generic implementation includes interface module new norace nx_struct nx_union post provides signal task uses abstract extends"),types:o(c),blockKeywords:o("case do else for if switch while struct"),atoms:o("null true false"),hooks:{"#":d},modeProps:{fold:["brace","include"]}}),g("text/x-objectivec",{name:"clike",keywords:o(l+"inline restrict _Bool _Complex _Imaginary BOOL Class bycopy byref id IMP in inout nil oneway out Protocol SEL self super atomic nonatomic retain copy readwrite readonly"),types:o(c),atoms:o("YES NO NULL NILL ON OFF true false"),hooks:{"@":function(e){return e.eatWhile(/[\w\$]/),"keyword"},"#":d,indent:function(e,t,i){if("statement"==t.type&&/^@\w/.test(i))return t.indented}},modeProps:{fold:"brace"}}),g("text/x-squirrel",{name:"clike",keywords:o("base break clone continue const default delete enum extends function in class foreach local resume return this throw typeof yield constructor instanceof static"),types:o(c),blockKeywords:o("case catch class else for foreach if switch try while"),defKeywords:o("function local class"),typeFirstDefinitions:!0,atoms:o("true false null"),hooks:{"#":d},modeProps:{fold:["brace","include"]}});var x=null;g("text/x-ceylon",{name:"clike",keywords:o("abstracts alias assembly assert assign break case catch class continue dynamic else exists extends finally for function given if import in interface is let module new nonempty object of out outer package return satisfies super switch then this throw try value void while"),types:function(e){var t=e.charAt(0);return t===t.toUpperCase()&&t!==t.toLowerCase()},blockKeywords:o("case catch class dynamic else finally for function if interface module new object switch try while"),defKeywords:o("class dynamic function interface module object package value"),builtin:o("abstract actual aliased annotation by default deprecated doc final formal late license native optional sealed see serializable shared suppressWarnings tagged throws variable"),isPunctuationChar:/[\[\]{}\(\),;\:\.`]/,isOperatorChar:/[+\-*&%=<>!?|^~:\/]/,numberStart:/[\d#$]/,number:/^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,multiLineStrings:!0,typeFirstDefinitions:!0,atoms:o("true false null larger smaller equal empty finished"),indentSwitch:!1,styleDefs:!1,hooks:{"@":function(e){return e.eatWhile(/[\w\$_]/),"meta"},'"':function(e,t){return t.tokenize=function e(t){return function(i,s){for(var n,a=!1,o=!1;!i.eol();){if(!a&&i.match('"')&&("single"==t||i.match('""'))){o=!0;break}if(!a&&i.match("``")){x=e(t),o=!0;break}n=i.next(),a="single"==t&&!a&&"\\"==n}return o&&(s.tokenize=null),"string"}}(e.match('""')?"triple":"single"),t.tokenize(e,t)},"`":function(e,t){return!(!x||!e.match("`"))&&(t.tokenize=x,x=null,t.tokenize(e,t))},"'":function(e){return e.eatWhile(/[\w\$_\xa1-\uffff]/),"atom"},token:function(e,t,i){if(("variable"==i||"type"==i)&&"."==t.prevToken)return"variable-2"}},modeProps:{fold:["brace","import"],closeBrackets:{triples:'"'}}})})(i(4))},function(e,t,i){(function(e){"use strict";e.defineMode("yaml",function(){var e=new RegExp("\\b(("+["true","false","on","off","yes","no"].join(")|(")+"))$","i");return{token:function(t,i){var s=t.peek(),n=i.escaped;if(i.escaped=!1,"#"==s&&(0==t.pos||/\s/.test(t.string.charAt(t.pos-1))))return t.skipToEnd(),"comment";if(t.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))return"string";if(i.literal&&t.indentation()>i.keyCol)return t.skipToEnd(),"string";if(i.literal&&(i.literal=!1),t.sol()){if(i.keyCol=0,i.pair=!1,i.pairStart=!1,t.match(/---/))return"def";if(t.match(/\.\.\./))return"def";if(t.match(/\s*-\s+/))return"meta"}if(t.match(/^(\{|\}|\[|\])/))return"{"==s?i.inlinePairs++:"}"==s?i.inlinePairs--:"["==s?i.inlineList++:i.inlineList--,"meta";if(i.inlineList>0&&!n&&","==s)return t.next(),"meta";if(i.inlinePairs>0&&!n&&","==s)return i.keyCol=0,i.pair=!1,i.pairStart=!1,t.next(),"meta";if(i.pairStart){if(t.match(/^\s*(\||\>)\s*/))return i.literal=!0,"meta";if(t.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i))return"variable-2";if(0==i.inlinePairs&&t.match(/^\s*-?[0-9\.\,]+\s?$/))return"number";if(i.inlinePairs>0&&t.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/))return"number";if(t.match(e))return"keyword"}return!i.pair&&t.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)?(i.pair=!0,i.keyCol=t.indentation(),"atom"):i.pair&&t.match(/^:\s*/)?(i.pairStart=!0,"meta"):(i.pairStart=!1,i.escaped="\\"==s,t.next(),null)},startState:function(){return{pair:!1,pairStart:!1,keyCol:0,inlinePairs:0,inlineList:0,literal:!1,escaped:!1}},lineComment:"#"}}),e.defineMIME("text/x-yaml","yaml"),e.defineMIME("text/yaml","yaml")})(i(4))},function(e,t,i){"use strict";(function(e){t.a={computed:{suggestKey:function(){var t=e.omit(this.config,["display","instructions","max_items","localizable","required","name"]);return JSON.stringify(t)}}}}).call(t,i(1))},,function(e,t,i){i(185),e.exports=i(691)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(3),n=i.n(s);n.a.config.debug=!1,n.a.config.silent=!0,n.a.config.devtools=!0,window.Vue=n.a,window._=i(1),window.$=window.jQuery=i(2),window.MediumEditor=i(11),i(187),i(204),i(205),i(206),i(207),i(208),i(209),i(210),i(213),i(223),i(230),i(528),i(688)},,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(3),n=i.n(s),a=i(21),o=i.n(a);n.a.use(o.a),n.a.http.headers.common["X-CSRF-TOKEN"]=document.querySelector("#csrf-token").getAttribute("value"),n.a.http.interceptors.push({response:function(e){return 401===e.status&&(this.$root.showLoginModal=!0),e}})},,,,,,,,,,,,,,,,,function(e,t,i){(function(e,t){e.cp_url=function(e){return(e=Statamic.cpRoot+"/"+e).replace(/\/+/g,"/")},e.resource_url=function(e){return(e=Statamic.resourceUrl+"/"+e).replace(/\/+/g,"/")},e.get_from_segment=function(e){return Statamic.urlPath.split("/").splice(e).join("/")},e.format_input_options=function(e){if("string"==typeof e[0])return e;var i=[];return t.each(e,function(e,t,s){i.push({value:t,text:e})}),i},e.file_icon=function(e){return resource_url("img/filetypes/"+e+".png")},e.dd=function(e){console.log(e)},e.data_get=function(e,t){return t.split(".").reduce(function(e,t){return void 0===e||null===e?e:e[t]},e)},e.Cookies=i(23),e.tailwind_width_class=function(e){return"w-"+({25:"1/4",33:"1/3",50:"1/2",66:"2/3",75:"3/4",100:"full"}[e]||"full")}}).call(t,i(8),i(1))},function(e,t){String.prototype.includes||(String.prototype.includes=function(e,t){"use strict";return"number"!=typeof t&&(t=0),!(t+e.length>this.length)&&-1!==this.indexOf(e,t)})},function(e,t,i){(function(e){e.mixin({objMap:function(t,i,s){return e.reduce(t,function(e,n,a){return e[a]=i.call(s,n,a,t),e},{},s)},objFilter:function(t,i,s){return e.reduce(t,function(e,n,a){return i.call(s,n,a,t)&&(e[a]=n),e},{},s)},objReject:function(t,i,s){return e.reduce(t,function(e,n,a){return i.call(s,n,a,t)||(e[a]=n),e},{},s)}})}).call(t,i(1))},function(e,t,i){(function(e,t){e.extend(e.fn,{within:function(e){return this.filter(function(){return t(this).closest(e).length})}})}).call(t,i(2),i(2))},function(e,t,i){(function(e){e.Redactor.prototype.assets=function(){return{init:function(){if(this.assets.vue().assetsEnabled){var e=this.button.add("assets",translate_choice("cp.assets",2));this.button.addCallback(e,this.assets.show)}},show:function(){this.selection.save(),this.assets.vue().addAsset()},vue:function(){return this.$editor.closest(".redactor-fieldtype-wrapper")[0].__vue__}}}}).call(t,i(2))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=function(){};s.prototype.setMessages=function(e){this.messages=e},s.prototype.get=function(e,t){if(!this.has(e))return e;var i=this._getMessage(e,t);return null===i?e:(t&&(i=this._applyReplacements(i,t)),i)},s.prototype.has=function(e){return!("string"!=typeof e||!this.messages)&&null!==this._getMessage(e)},s.prototype.choice=function(e,t,i){(i=void 0!==i?i:{}).count=t;var s=this.get(e,i);if(null===s||void 0===s)return s;for(var n=s.split("|"),a=[],o=/{\d+}\s(.+)|\[\d+,\d+\]\s(.+)|\[\d+,Inf\]\s(.+)/,r=0;r<n.length;r++)if(n[r]=n[r].trim(),o.test(n[r])){var l=n[r].split(/\s/);a.push(l.shift()),n[r]=l.join(" ")}if(1===n.length)return s;for(r=0;r<a.length;r++)if(this._testInterval(t,a[r]))return n[r];return 1===t?n[0]:n[1]},s.prototype._parseKey=function(e){if("string"!=typeof e)return null;var t=e.split(".");return e.includes("::")?{source:t.splice(0,t.length-1).join("."),entries:t.slice(t.length-1)}:{source:t[0],entries:t.slice(1)}},s.prototype._getMessage=function(e){if(e=this._parseKey(e),void 0===this.messages[e.source])return null;for(var t=this.messages[e.source];e.entries.length&&(t=t[e.entries.shift()]););return"string"!=typeof t?null:t},s.prototype._applyReplacements=function(e,t){for(var i in t)e=e.split(":"+i).join(t[i]);return e},s.prototype._testInterval=function(e,t){return!1};var n=new s;window.translate=function(e,t){var i=n.get(e,t);return i===e?function(e){for(var t=e.split(/[-_]/),i=0;i<t.length;i++){var s=t[i];t[i]=s.charAt(0).toUpperCase()+s.slice(1)}return t.join(" ")}(i.replace("cp.","")):i},window.translate_choice=function(e,t,i){return n.choice(e,t,i)},n.setMessages(Statamic.translations)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(3),n=i.n(s),a={install:function(e,t){e.prototype.cp_url=function(e){return cp_url(e)}}},o={install:function(e,t){e.prototype.translate=function(e,t){return translate(e,t)},e.prototype.translate_choice=function(e,t,i){return translate_choice(e,t,i)}}},r={install:function(e,t){e.prototype.resource_url=function(e){return resource_url(e)}}},l={install:function(e,t){e.prototype.file_icon=function(e){return file_icon(e)}}},c=i(211),d=i(24),u=i.n(d),p={install:function(e,t){e.prototype.$slugify=function(e,t){return u()(e,{replacement:t||"-",lower:!0})}}};n.a.use(a),n.a.use(o),n.a.use(r),n.a.use(l),n.a.use(c.a),n.a.use(p)},function(e,t,i){"use strict";(function(e){if(Statamic.permissions)var i=JSON.parse(atob(Statamic.permissions));var s=function(t){if(e.contains(i,"super"))return!0;if(2===t.split(":").length-1){var s=t.split(":"),n=s[0]+":";if("delete"===s[2]?n+="delete":n+="manage",e.contains(i,n))return!0}return e.contains(i,t)};t.a={install:function(e,t){e.prototype.can=function(e){return s(e)},e.can=function(e){return s(e)}}}}).call(t,i(1))},,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(3),n=i.n(s);n.a.filter("deslugify",i(214)),n.a.filter("titleize",i(215)),n.a.filter("pre",i(216)),n.a.filter("reverse",i(217)),n.a.filter("pluck",i(218)),n.a.filter("parse",i(219)),n.a.filter("optionize",i(220)),n.a.filter("markdown",i(221)),n.a.filter("caseInsensitiveOrderBy",i(222))},function(e,t){e.exports=function(e){return e.replace(/[-_]/g," ")}},function(e,t){e.exports=function(e){if(!e.split)return e;var t=[];return e.split(" ").forEach(function(e){var i;t.push((i=e).charAt(0).toUpperCase()+i.slice(1).toLowerCase())}),t.join(" ")}},function(e,t){e.exports=function(e){return"<pre><code>"+JSON.stringify(e,null,2)+"</code></pre>"}},function(e,t){e.exports=function(e){return e.split("").reverse().join("")}},function(e,t){e.exports=function(e,t){return e.map(function(e){return e[t]})}},function(e,t){e.exports=function(e){return JSON.parse(e)}},function(e,t){e.exports=function(e){return options=JSON.parse(JSON.stringify(e)),format_input_options(options)}},function(e,t,i){var s=i(12);s.setOptions({gfm:!0,breaks:Statamic.markdownHardWrap,tables:!0}),e.exports=function(e){return s(e)}},function(e,t,i){(function(t){e.exports=function(e,i,s){if(!i)return e;var n=s&&s<0?-1:1;return e.slice().sort(function(e,s){return"$key"!==i&&(t.util.isObject(e)&&"$value"in e&&(e=e.$value),t.util.isObject(s)&&"$value"in s&&(s=s.$value)),e=t.util.isObject(e)?t.parsers.path.getPath(e,i):e,s=t.util.isObject(s)?t.parsers.path.getPath(s,i):s,(e="string"==typeof e?e.toLowerCase():e)===(s="string"==typeof s?s.toLowerCase():s)?0:e>s?n:-n})}}).call(t,i(3))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});i(3);var s=i(224),n=i.n(s);window.Dossier=n.a,window.Fieldtype={props:{data:{},config:{},name:{},leaveAlert:{default:!1}},data:function(){return{autoBindChangeWatcher:!0,changeWatcherIsBound:!1,changeWatcherWatchDeep:!0}},computed:{isInsideGridField:function(){for(var e=this;;){var t=e.$parent;if(!t)return!1;if("GridFieldtype"===t.constructor.name)return!0;e=t}}},ready:function(){this.autoBindChangeWatcher&&this.bindChangeWatcher()},methods:{bindChangeWatcher:function(){this.leaveAlert&&(this.changeWatcherIsBound||(this.$watch("data",function(){this.$dispatch("changesMade",!0)},{deep:this.changeWatcherWatchDeep}),this.changeWatcherIsBound=!0))},getReplicatorPreviewText:function(){return this.data},focus:function(){this.$el.focus()}}},window.AutoSlug={data:function(){return{autoSlugOptions:{isActive:!0}}},computed:{autoSlugPublishFieldsComponent:function(){return this.$parent.$parent}},methods:{autoSlug:function(e,t){var i=this;this[t=t||"data"]||(this.$watch(t,function(t){var s=i.autoSlugPublishFieldsComponent.data[e]||"";i.autoSlugOptions.isActive=t===i.$slugify(s)}),this.autoSlugPublishFieldsComponent.$watch("data."+e,function(e){i.autoSlugOptions.isActive&&(i[t]=i.$slugify(e))}))}}}},function(e,t,i){var s,n={};s=i(225),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(n).forEach(function(e){var t=n[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(226),n=i.n(s),a=i(229);t.default={mixins:[a.a],data:function(){return{loading:!0,items:[],columns:[],sort:null,sortOrder:null,reordering:!1,searchTerm:null}},computed:{hasItems:function(){return!this.loading&&this.items&&this.items.length},noItems:function(){return!this.loading&&this.items&&!this.items.length},checkedItems:function(){return this.items.filter(function(e){return e.checked}).map(function(e){return e.id})},allItemsChecked:function(){return this.items.length===this.checkedItems.length},isSearching:function(){return this.searchTerm.length>=3},getParameters:function(){return{sort:this.sort,order:this.sortOrder,page:this.selectedPage}}},ready:function(){this.getItems()},watch:{searchTerm:function(e){e.length>=3?this.performSearch():this.getItems()}},components:{"dossier-table":n.a},methods:{getItems:function(){this.$http.get(this.ajax.get,this.getParameters,function(e,t,i){this.items=e.items,this.columns=this.parseColumns(e.columns),this.loading=!1,this.pagination=e.pagination}).error(function(){this.$notify.error(translate("cp.error_fetching_data"))})},performSearch:function(){this.$http.get(this.ajax.search+"?q="+this.searchTerm,function(e,t,i){this.items=e,this.loading=!1}).error(function(){this.$notify.error(translate("cp.error_fetching_data"))})},sortBy:function(e,t){this.sort=e,this.sortOrder=t,this.getItems()},removeItemFromList:function(t){var i=e.findWhere(this.items,{id:t}),s=e.indexOf(this.items,i);this.items.splice(s,1)},deleteMultiple:function(){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_items",2),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.$http.delete(t.ajax.delete,{ids:t.checkedItems},function(i){e.each(t.checkedItems,function(e){t.removeItemFromList(e)})})})},deleteItem:function(e){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_items",1),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.$http.delete(t.ajax.delete,{ids:[e]},function(i){t.removeItemFromList(e)})})},enableReorder:function(){this.reordering=!0,this.$broadcast("reordering.start")},cancelOrder:function(){this.reordering=!1,this.$broadcast("reordering.stop")},saveOrder:function(){this.saving=!0;var t=e.map(this.items,function(e,t){return e.id});this.$http.post(this.ajax.reorder,{ids:t},function(){this.saving=!1,this.$broadcast("reordering.saved"),this.loading=!0,this.getItems(),this.reordering=!1})},parseColumns:function(t){var i=void 0===e.findWhere(t,{link:!0});return e.map(t,function(e,t){"string"==typeof e&&(e={value:e});var s=e.value;return e.value.includes(".")&&(s=e.value.split(".")[0]),{value:e.value,header:translate("cp."+(e.header||s)),extra:e.extra,width:e.width,link:e.link||i&&0==t}})}}}}.call(t,i(1))},function(e,t,i){var s,n,a={};s=i(227),n=i(228),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i,s){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default={props:["options","items","isSearching"],data:function(){return{columns:this.$parent.columns,reordering:!1}},partials:{cell:'\n            <span :class="{ \'has-status-icon\': $index === 0 }">\n                <span v-if="$index === 0" class="status status-{{ (item.published) ? \'live\' : \'hidden\' }}"\n                      :title="(item.published) ? translate(\'cp.published\') : translate(\'cp.draft\')"\n                ></span>\n                <a v-if="column.link" :href="item.edit_url" class="has-status-icon">\n                    {{{ formatValue(item[column.value]) }}}\n                </a>\n                <template v-else>\n                    {{{ formatValue(item[column.value]) }}}\n                </template>\n            </span>\n        '},computed:{hasCheckboxes:function(){return!1!==this.options.checkboxes},itemsAreChecked:function(){return this.checkedItems.length>0},hasHeaders:function(){return!1!==this.options.headers},hasActions:function(){return void 0!==this.options.partials.actions&&""!==this.options.partials.actions},showBulkActions:function(){return this.hasItems&&this.hasCheckboxes&&this.itemsAreChecked&&!this.reordering},hasItems:function(){return this.$parent.hasItems},reorderable:function(){return this.options.reorderable},checkedItems:function(){return this.items.filter(function(e){return e.checked}).map(function(e){return e.id})},allItemsChecked:function(){return this.items.length===this.checkedItems.length},pagination:function(){return this.$parent.pagination},sortOrder:function(){return this.$parent.sortOrder}},beforeCompile:function(){var t=this;e.each(t.options.partials,function(e,i){t.$options.partials[i]=e})},methods:{registerPartials:function(){e.each(this.options.partials,function(e,t){i.partial(t,e)})},sortBy:function(e){if(!this.isSearching){var t=e.value,i="desc";this.$parent.sort===t&&(i="asc"===this.$parent.sortOrder?"desc":"asc"),this.$parent.sortBy(t,i)}},checkAllItems:function(){var t=!this.allItemsChecked;e.each(this.items,function(e){e.checked=t})},uncheckAllItems:function(){e.each(this.items,function(e){e.checked=!1})},toggle:function(e){e.checked=!e.checked},enableReorder:function(){var e=this;e.reordering=!0,s(this.$els.tbody).sortable({axis:"y",revert:175,placeholder:"placeholder",handle:".drag-handle",forcePlaceholderSize:!0,start:function(e,t){t.item.data("start",t.item.index())},update:function(t,i){var s=i.item.data("start"),n=i.item.index();e.items.splice(n,0,e.items.splice(s,1)[0])}})},disableReorder:function(){this.reordering=!1,s(this.$els.tbody).sortable("destroy")},saveOrder:function(){this.$parent.saveOrder()},call:function(e){var t=Array.prototype.slice.call(arguments,1);this.$parent[e].apply(this,t)},paginationPageSelected:function(e){this.$parent.selectedPage=e,this.$parent.getItems()},isColumnActive:function(e){return!this.isSearching&&e.value===this.$parent.sort},tableColWidth:function(e){if(e&&100!==e)return"string"==typeof e&&e.endsWith("px")?e:e+"%"},formatValue:function(e){if(e&&"object"===(void 0===e?"undefined":n(e))&&!Array.isArray()&&e.thumbnail){var t='<span class="img"><img src="'+e.thumbnail+'" alt="'+e.value+'" />';return e.value&&(t+="<span>"+e.value+"</span>"),t+="</span>"}return Array.isArray(e)?e.join(", "):e}},events:{"reordering.start":function(){this.enableReorder()},"reordering.saved":function(){this.reordering=!1},"reordering.stop":function(){this.disableReorder()}}}}.call(t,i(1),i(3),i(2))},function(e,t){e.exports=" <div class=dossier-table-wrapper> <table :class=\"['dossier', { 'has-checkboxes': hasCheckboxes }]\"> <thead v-if=hasHeaders> <tr> <th class=checkbox-col v-if=hasCheckboxes> <input type=checkbox id=checkbox-all :checked=allItemsChecked @click=checkAllItems /> <label for=checkbox-all></label> </th> <th v-for=\"column in columns\" @click=sortBy(column) :class=\"['column-' + column.value, {'active': isColumnActive(column), 'column-sortable': !isSearching, 'extra-col': column.extra} ]\" :style=\"{ width: tableColWidth(column.width) }\"> {{ column.header }} <i v-if=isColumnActive(column) class=\"icon icon-chevron-{{ sortOrder === 'asc' ? 'up' : 'down' }}\"></i> </th> <th class=column-actions v-if=hasActions></th> </tr> </thead> <tbody v-el:tbody> <tr v-for=\"item in items\"> <td class=checkbox-col v-if=\"hasCheckboxes && !reordering\"> <input type=checkbox :id=\"'checkbox-' + $index\" :checked=item.checked @change=toggle(item) /> <label :for=\"'checkbox-' + $index\"></label> </td> <td class=checkbox-col v-if=reordering> <div class=drag-handle> <i class=\"icon icon-menu\"></i> </div> </td> <td v-for=\"(i, column) in columns\" :class=\"[\n                    `cell-${column.value}`, {\n                        'extra-col': column.extra,\n                        'empty-col': !item[column.value],\n                        'first-cell': i === 0\n                    }]\n                \"> <span class=column-label>{{ column.header }}</span> <partial name=cell></partial> </td> <td class=column-actions v-if=hasActions> <div class=\"btn-group action-more\"> <button type=button class=\"btn-more dropdown-toggle\" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <i class=\"icon icon-dots-three-vertical\"></i> </button> <ul class=dropdown-menu> <partial name=actions></partial> </ul> </div> </td> </tr> </tbody> </table> <div v-if=showBulkActions :class=\"{ 'bulk-actions': true, 'no-checkboxes': !hasCheckboxes }\"> <button type=button class=\"btn action\" @click=uncheckAllItems> {{ translate('cp.uncheck_all') }} </button> <button type=button class=\"btn btn-delete action\" @click.prevent=\"call('deleteMultiple', 'foo', 'bar')\"> {{ translate('cp.delete') }} {{ checkedItems.length }} {{ translate_choice('cp.items', checkedItems.length)}} </button> </div> <pagination v-if=\"!isSearching && pagination.totalPages > 1\" :total=pagination.totalPages :current=pagination.currentPage :segments=pagination.segments @selected=paginationPageSelected> </pagination> </div> "},function(e,t,i){"use strict";t.a={data:function(){return{pagination:{},selectedPage:1}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(3),n=i.n(s),a=i(25),o=i(26),r={mixins:[a.a,o.a,Dossier],props:["get","delete","reorder","search","canCreate","canDelete","sort","sortOrder","reorderable","collection","createEntryRoute"],data:function(){return{ajax:{get:this.get,delete:this.delete,reorder:this.reorder,search:this.search},tableOptions:{sort:this.sort,sortOrder:this.sortOrder,reorderable:this.reorderable,partials:{}}}},computed:{getParameters:function(){return{sort:this.sort,order:this.sortOrder,page:this.selectedPage,locale:this.locale,drafts:this.showDrafts?1:0}},createEntryUrl:function(){var e=this.createEntryRoute;return this.locale!==Object.keys(Statamic.locales)[0]&&(e+="?locale="+this.locale),e}},ready:function(){this.addActionPartial(),this.bindLocaleWatcher(),this.bindShowDraftsWatcher()},methods:{addActionPartial:function(){var e="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>";this.canCreate&&(e+="\n                    <li>\n                        <a href=\"#\" @click.prevent=\"call('duplicate', item.id)\">{{ translate('cp.duplicate') }}</a>\n                    </li>"),this.canDelete&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e},onLocaleChanged:function(){this.getItems()},onShowDraftsChanged:function(){this.getItems()},duplicate:function(e){var t=cp_url("collections/entries/"+this.collection+"/duplicate");this.$http.post(t,{id:e}).success(function(e){window.location=e.redirect})}}};n.a.component("addon-listing",i(231)),n.a.component("asset-manager",i(232)),n.a.component("asset-browser",i(237)),n.a.component("asset-container-form",i(299)),n.a.component("asset-container-listing",i(307)),n.a.component("asset-container-wizard",i(308)),n.a.component("collection-listing",i(320)),n.a.component("configure-asset-container-listing",i(321)),n.a.component("configure-collection-listing",i(322)),n.a.component("configure-globals-listing",i(323)),n.a.component("configure-taxonomies-listing",i(324)),n.a.component("entry-listing",r),n.a.component("formset-builder",i(325)),n.a.component("fieldset-builder",i(333)),n.a.component("page-tree",i(342)),n.a.component("publish",i(354)),n.a.component("typeahead",i(369)),n.a.component("installer",i(375)),n.a.component("updater",i(387)),n.a.component("importer",i(388)),n.a.component("term-listing",i(389)),n.a.component("taxonomies-listing",i(390)),n.a.component("globals-listing",i(391)),n.a.component("user-listing",i(392)),n.a.component("user-group-listing",i(393)),n.a.component("user-role-listing",i(394)),n.a.component("fieldset-listing",i(395)),n.a.component("form-submission-listing",i(396)),n.a.component("roles",i(397)),n.a.component("login",i(398)),n.a.component("login-modal",i(399)),n.a.component("svg-icon",i(402)),n.a.component("file-icon",i(467)),n.a.component("list",i(470)),n.a.component("alert",i(474)),n.a.component("branch",i(39)),n.a.component("branches",i(40)),n.a.component("fields-builder",i(475)),n.a.component("fieldset-fields",i(477)),n.a.component("fieldset-field",i(164)),n.a.component("fieldtype-selector",i(510)),n.a.component("modal",i(513)),n.a.component("pagination",i(516)),n.a.component("search",i(522)),n.a.component("dossier-sort-selector",i(525))},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("configure/addons/get"),delete:cp_url("configure/addons/delete")},tableOptions:{checkboxes:!1,partials:{cell:"\n                        <a :href=\"item.settings_url\" v-if=\"item.settings_url && column.value === 'name'\">{{ item[column.value] }}</a>\n                        <template v-else>\n                            <template v-if=\"column.value === 'installed'\">{{ item.installed ? '✔' : '✘' }}</template>\n                            <template v-else>{{ item[column.value] }}</template>\n                        </template>\n                    ",actions:'\n                        <li v-if="item.settings_url"><a :href="item.settings_url">Settings</a></li>\n                        <li class="warning" v-if="can(\'super\')">\n                            <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                        </li>\n                    '}}}},methods:{refresh:function(){window.location=cp_url("configure/addons/refresh")}}}},function(e,t,i){var s,n,a={};s=i(233),n=i(236),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{Mover:i(27)},props:["container","path"],data:function(){return{selectedAssets:[],showAssetMover:!1}},ready:function(){this.bindBrowserNavigation()},methods:{bindBrowserNavigation:function(){var e=this;window.history.replaceState({container:this.container,path:this.path},""),window.onpopstate=function(t){e.container=t.state.container,e.path=t.state.path}},pushState:function(){var e=cp_url("assets/browse/"+this.container);"/"!==this.path&&(e+="/"+this.path),window.history.pushState({container:this.container,path:this.path},"",e)},navigate:function(e,t){this.container=e,this.path=t,this.pushState(),this.selectedAssets=[]},updateSelections:function(e){this.selectedAssets=e},deleteSelected:function(){this.$broadcast("delete-assets",this.selectedAssets)},openAssetMover:function(){this.showAssetMover=!0},closeAssetMover:function(){this.showAssetMover=!1},assetsMoved:function(e){this.closeAssetMover(),this.navigate(this.container,e)}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["assets","container","folder"],data:function(){return{show:!0,selectedFolder:null,saving:!1,errors:null,warningText:translate("cp.move_file_warning")}},computed:{hasChanged:function(){return this.selectedFolder!==this.folder},fieldtypeConfig:function(){return{container:this.container}}},ready:function(){this.selectedFolder=this.folder},watch:{show:function(e){e||this.cancel()}},methods:{save:function(){var e=this;if(this.hasChanged){this.saving=!0;var t=cp_url("/assets/move"),i={assets:this.assets,folder:this.selectedFolder,container:this.container};this.$http.post(t,i).success(function(t){e.$emit("saved",e.selectedFolder),e.cancel()}).error(function(t){e.saving=!1,e.errors=t})}},cancel:function(){this.$emit("closed")}}}},function(e,t){e.exports=' <modal :show.sync=show :saving=saving class=modal-small> <template slot=header> {{ translate(\'cp.move_file\') }} </template> <template slot=body> <div class="alert alert-warning">{{{ warningText | markdown }}}</div> <div class="alert alert-danger" v-if=errors> <p v-for="error in errors">{{ error }}</p> </div> <div class=form-group> <label>{{ translate(\'cp.folder\') }}</label> <asset_folder-fieldtype :data.sync=selectedFolder :config=fieldtypeConfig> </asset_folder-fieldtype> </div> </template> <template slot=footer> <button class="btn btn-primary" :disabled=!hasChanged @click=save>Save</button> <button type=button class=btn @click=cancel>{{ translate(\'cp.cancel\') }}</button> </template> </modal> '},function(e,t){e.exports=" <div class=asset-manager> <asset-browser :selected-container=container :selected-path=path :selected-assets=selectedAssets @navigated=navigate @selections-updated=updateSelections> <template slot=contextual-actions v-if=selectedAssets.length> <button class=\"btn btn-danger ml-16 mr-2 mb-3\" @click=deleteSelected>{{ translate('cp.delete') }}</button> <div class=\"btn-group mb-3\"> <button class=btn @click=\"selectedAssets = []\">{{ translate('cp.uncheck_all') }}</button> <button class=btn @click=openAssetMover>{{ translate('cp.move') }}</button> </div> </template> </asset-browser> <mover v-if=showAssetMover :assets=selectedAssets :container=container :folder=path @saved=assetsMoved @closed=closeAssetMover> </mover> </div> "},function(e,t,i){var s,n,a={};s=i(238),n=i(298),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(28);t.default={components:{GridListing:i(239),TableListing:i(248),Uploader:i(13),Uploads:i(34),AssetEditor:i(35),FolderEditor:i(292),Breadcrumbs:i(295)},mixins:[s.a],props:["selectedContainer","selectedPath","restrictNavigation","selectedAssets","maxFiles"],data:function(){return{loadingAssets:!0,initializedAssets:!1,loadingContainers:!0,containers:null,container:null,path:null,assets:[],folders:[],folder:{},displayMode:"table",uploads:[],draggingFile:!1,pagination:{},selectedPage:1,editedAssetId:null,showFolderCreator:!1,editedFolderPath:null,editorHasChild:!1,isSearching:!1,sort:"title",sortOrder:"asc"}},computed:{initialized:function(){return this.initializedAssets&&!this.loadingContainers},loading:function(){return this.loadingAssets||this.loadingContainers},hasAssets:function(){return this.assets.length>0},hasSubfolders:function(){return this.subfolders.length>0},isEmpty:function(){return!this.hasAssets&&!this.hasSubfolders},canEdit:function(){return this.can("assets:"+this.container.id+":edit")},showSidebar:function(){return!!this.initialized&&(!this.isSearching&&(!this.restrictNavigation&&Object.keys(this.containers).length>1))},listingComponent:function(){return"grid"===this.displayMode?"GridListing":"TableListing"},fullPath:function(){if(this.container){var e=this.container.id;return"/"!==this.path&&(e+="/"+this.path),e}},subfolders:function(){return this.restrictNavigation?[]:this.folders},uploadElement:function(){return this.$el},showAssetEditor:function(){return Boolean(this.editedAssetId)},showFolderEditor:function(){return null!==this.editedFolderPath},maxFilesReached:function(){return this.maxFiles&&this.selectedAssets.length>=this.maxFiles}},ready:function(){this.path=this.selectedPath,this.loadContainers(),this.displayMode=Cookies.get("statamic.assets.listing_view_mode")||"table"},events:{"close-editor":function(){if(this.editorHasChild)return this.$broadcast("close-child-editor");this.showFolderCreator=!1,this.editedAssetId=null,this.editedFolderPath=null},"refresh-assets":function(){this.loadAssets()},"delete-assets":function(e){this.deleteAsset(e)}},watch:{fullPath:function(){this.loadAssets()},selectedContainer:function(e){this.container=this.containers[e]},selectedPath:function(e){this.path=e},selectedAssets:function(e){this.$emit("selections-updated",e)},searchTerm:function(e){e?this.search():this.loadAssets()}},methods:{loadContainers:function(){var t=this;this.$http.get(cp_url("assets/containers/get")).success(function(i){t.containers=e.chain(i.items).map(function(t){return e.pick(t,"id","title")}).indexBy("id").value(),t.container=t.containers[t.selectedContainer],t.loadingContainers=!1})},loadAssets:function(e){var t=this;this.loadingAssets=!0,this.$http.post(cp_url("assets/browse"),{container:this.container.id,path:this.path,page:this.selectedPage,sort:this.sort,dir:this.sortOrder}).success(function(e){t.assets=e.assets,t.folders=e.folders,t.folder=e.folder,t.pagination=e.pagination,t.selectedPage=e.pagination.currentPage,t.loadingAssets=!1,t.initializedAssets=!0,t.isSearching=!1})},search:function(){var e=this;this.loadingAssets=!0,this.$http.post(cp_url("assets/search"),{term:this.searchTerm,container:this.container.id,folder:this.folder.path,restrictNavigation:this.restrictNavigation}).success(function(t){e.isSearching=!0,e.assets=t.assets,e.folders=[],e.loadingAssets=!1,e.initializedAssets=!0})},folderSelected:function(e){this.path=e,this.selectedPage=1,this.$emit("navigated",this.container.id,this.path)},selectContainer:function(e){this.container=this.containers[e],this.path="/",this.$emit("navigated",this.container.id,this.path)},assetSelected:function(t){1===this.maxFiles&&this.maxFilesReached&&(this.selectedAssets=[t]),this.maxFilesReached||e(this.selectedAssets).contains(t)||(this.selectedAssets.push(t),this.selectedAssets=e(this.selectedAssets).map(function(e){return e}))},assetDeselected:function(t){this.selectedAssets=e(this.selectedAssets).without(t)},editAsset:function(e){this.canEdit&&(this.editedAssetId=e)},deleteAsset:function(t){var i=this;t=Array.isArray(t)?t:[t],swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_items",t),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){var s=cp_url("assets/delete");i.$http.delete(s,{ids:t}).success(function(s){i.loadAssets(),i.selectedAssets=e(i.selectedAssets).difference(t)})})},closeAssetEditor:function(){this.$dispatch("modal.close"),this.editedAssetId=null},assetSaved:function(){this.closeAssetEditor(),this.loadAssets()},assetDeleted:function(){this.closeAssetEditor(),this.loadAssets()},assetMoved:function(e){this.closeAssetEditor(),this.folderSelected(e)},assetDoubleclicked:function(e){this.assetSelected(e),this.$emit("asset-doubleclicked")},uploadFile:function(){this.$refs.uploader.browse()},paginationPageSelected:function(e){this.selectedPage=e,this.loadAssets()},createFolder:function(){this.showFolderCreator=!0},folderCreatorClosed:function(){this.showFolderCreator=!1},folderCreated:function(e){this.folderSelected(e)},editFolder:function(e){this.editedFolderPath=e},folderEditorClosed:function(){this.editedFolderPath=null},folderDeleted:function(e){this.loadAssets()},uploadsUpdated:function(e){this.$set("uploads",e)},setDisplayMode:function(e){this.displayMode=e,Cookies.set("statamic.assets.listing_view_mode",e)},assetsDraggedToFolder:function(e){var t=this,i=cp_url("/assets/move"),s={assets:this.selectedAssets,folder:e,container:this.container.id};this.$http.post(i,s).success(function(e){t.loadAssets(),t.selectedAssets=[]})},sortBy:function(e){if(!this.isSearching){var t="asc";this.sort===e&&(t="asc"===this.sortOrder?"desc":"asc"),this.sort=e,this.sortOrder=t,this.loadAssets()}}}}}.call(t,i(1))},function(e,t,i){var s,n,a={};s=i(240),n=i(247),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(29);t.default={mixins:[s.a],components:{AssetTile:i(241),FolderTile:i(244)}}},function(e,t,i){var s,n,a={};s=i(242),n=i(243),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(30);t.default={mixins:[s.a],computed:{isImage:function(){return this.asset.is_image},icon:function(){return resource_url("img/filetypes/"+this.asset.extension+".png")},label:function(){return this.asset.title||this.asset.basename}}}},function(e,t){e.exports=" <div class=asset-tile :class=\"{\n         'is-image': isImage && !canShowSvg,\n         'is-svg': canShowSvg,\n         'is-file': !isImage && !canShowSvg,\n         'is-selected': isSelected\n     }\" :title=asset.filename @click=toggle @dblclick=doubleClicked @dragstart=assetDragStart> <div class=asset-thumb-container> <div v-if=canShowSvg class=svg-img :style=svgBackgroundStyle> </div> <template v-else> <div class=asset-thumb v-if=isImage> <img :src=asset.thumbnail> </div> <file-icon v-else :extension=asset.extension></file-icon> </template> </div> <div class=asset-meta :title=label>{{ label }}</div> </div> "},function(e,t,i){var s,n,a={};s=i(245),n=i(246),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(31);t.default={mixins:[s.a]}},function(e,t){e.exports=' <div class="asset-tile is-folder" @click.prevent=selectFolder(folder.path)> <div class=asset-thumb-container> <file-icon extension=folder></file-icon> </div> <div class=asset-meta> <div class=asset-filename :title=label>{{ folder.title }}</div> </div> </div> '},function(e,t){e.exports=' <div class=asset-grid-listing v-if="hasParent && !restrictNavigation || (!isSearching || (isSearching && hasResults))"> <div class="asset-tile is-folder" @click.prevent=selectFolder(folder.parent_path)> <div class=asset-thumb-container> <file-icon extension=folder></file-icon> </div> <div class=asset-meta> <div class=asset-filename>..</div> </div> </div> <folder-tile v-for="folder in subfolders" :folder=folder @selected=selectFolder @editing=editFolder @deleting=deleteFolder> </folder-tile> <asset-tile v-for="asset in assets" :asset=asset :selected-assets=selectedAssets @selected=selectAsset @deselected=deselectAsset @editing=editAsset @doubleclicked=assetDoubleclicked> </asset-tile> </div> '},function(e,t,i){var s,n,a={};s=i(249),n=i(256),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(29);t.default={mixins:[s.a],components:{AssetRow:i(250),FolderRow:i(253)},data:function(){return{columns:[{field:"title",label:translate("cp.title")},{field:"size",label:translate("cp.filesize"),extra:!0},{field:"lastModified",label:translate("cp.date_modified"),extra:!0}]}},computed:{sortOrder:function(){return this.$parent.sortOrder}},methods:{closeDropdowns:function(e){this.$broadcast("close-dropdown",e)},droppedOnFolder:function(e,t){var i=t.dataTransfer.getData("asset");t.dataTransfer.clearData("asset"),""!=i&&this.$emit("assets-dragged-to-folder",e)},isColumnActive:function(e){return!this.isSearching&&e.field===this.$parent.sort}}}},function(e,t,i){var s,n,a={};s=i(251),n=i(252),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(30),n=i(32);t.default={mixins:[s.a,n.a],computed:{canEdit:function(){return this.can("assets:"+this.asset.container+":edit")}},methods:{closeDropdownAndEditAsset:function(){this.showActionsDropdown=!1,this.editAsset()},closeDropdownAndDeleteAsset:function(){this.showActionsDropdown=!1,this.deleteAsset()}}}},function(e,t){e.exports=' <tr @click=toggle @dblclick=doubleClicked :class="{ \'selected\': isSelected }"> <td class=thumbnail-col @dragstart=assetDragStart> <div v-if=canShowSvg class="img svg-img" :style=svgBackgroundStyle> </div> <div class=img v-else> <img v-if=asset.is_image :src=asset.thumbnail /> <file-icon v-else :extension=asset.extension></file-icon> </div> </td> <td class=title-col>{{ asset.title || asset.basename }}</td> <td class="size-col extra-col">{{ asset.size_formatted }}</td> <td class="modifed-col extra-col">{{ asset.last_modified_formatted }}</td> <td class=column-actions> <div class="btn-group action-more" :class="{ open: showActionsDropdown }" v-if=canEdit v-on-clickaway=away> <button type=button class="btn-more dropdown-toggle" @click.prevent.stop=toggleActions> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <li><a @click=closeDropdownAndEditAsset>{{ translate(\'cp.edit\') }}</a></li> <li class=divider></li> <li class=warning><a href="" @click.prevent=closeDropdownAndDeleteAsset>{{ translate(\'cp.delete\') }}</a></li> </ul> </div> </td> </tr> '},function(e,t,i){var s,n,a={};s=i(254),n=i(255),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(31),n=i(32);t.default={mixins:[s.a,n.a]}},function(e,t){e.exports=' <tr @dragover=dragOver @drop=drop> <td> <div class=img> <a href="" @click.prevent=selectFolder(folder.path)> <file-icon extension=folder></file-icon> </a> </div> </td> <td> <a @click=selectFolder(folder.path)> {{ folder.title }} </a> </td> <td colspan=2 class=extra-col></td> <td class=column-actions> <div class="btn-group action-more" :class="{ open: showActionsDropdown }" v-on-clickaway=away> <button type=button class="btn-more dropdown-toggle" aria-haspopup=true aria-expanded=false @click=toggleActions> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <li> <a href="" @click.prevent=editFolder> {{ translate(\'cp.edit\') }} </a> </li> <li class=divider></li> <li class=warning> <a href=# @click.prevent=deleteFolder> {{ translate(\'cp.delete\') }} </a> </li> </ul> </div> </td> </tr> '},function(e,t){e.exports=' <div class=asset-table-listing> <table v-if="!isSearching || (isSearching && hasResults)"> <thead> <tr> <th></th> <th v-for="column in columns" :class="{\n                        \'extra-col\': column.extra,\n                        \'active\': isColumnActive(column),\n                        \'column-sortable\': !isSearching\n                    }" @click="$emit(\'sorted\', column.field)"> {{ column.label }} <i v-if=isColumnActive(column) class="icon icon-chevron-{{ sortOrder === \'asc\' ? \'up\' : \'down\' }}"></i> </th> <th class=column-actions></th> </tr> </thead> <tbody> <tr v-if="hasParent && !restrictNavigation"> <td> <div class=img> <a @click.prevent=selectFolder(folder.parent_path)> <file-icon extension=folder></file-icon> </a> </div> </td> <td> <a href="" @click.prevent=selectFolder(folder.parent_path)>..</a> </td> <td colspan=3>..</td> </tr> <tr is=folderRow v-for="folder in subfolders" :folder=folder @open-dropdown=closeDropdowns @selected=selectFolder @editing=editFolder @deleting=deleteFolder @dropped-on-folder=droppedOnFolder> </tr> <tr is=assetRow v-for="asset in assets" :asset=asset :selected-assets=selectedAssets @open-dropdown=closeDropdowns @selected=selectAsset @deselected=deselectAsset @editing=editAsset @deleting=deleteAsset @assetdragstart=assetDragStart @doubleclicked=assetDoubleclicked> </tr> </tbody> </table> </div> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={props:["domElement","container","path"],data:function(){return{uploads:[]}},computed:{extraData:function(){return{container:this.container,folder:this.path,_token:document.querySelector("#csrf-token").getAttribute("value")}}},ready:function(){this.bindUploader()},destroyed:function(){e(this.domElement).unbind().removeData()},watch:{uploads:function(e){this.$emit("updated",e)},container:function(){this.updateExtraData()},path:function(){this.updateExtraData()}},methods:{browse:function(){e(this.$els.nativeFileField).click()},bindUploader:function(){var t=this;e(this.domElement).dmUploader({url:cp_url("assets"),extraData:this.extraData,onNewFile:function(e,i){t.uploads.push({id:e,basename:i.name,extension:i.name.split(".").pop(),percent:0,errorMessage:null})},onUploadProgress:function(e,s){var n=i(t.uploads).findWhere({id:e});n.percent=s,t.$emit("progress",n,t.uploads)},onUploadSuccess:function(e,s){t.$emit("upload-complete",s.asset,t.uploads);var n=i(t.uploads).findIndex({id:e});t.uploads.splice(n,1)},onComplete:function(){t.$emit("uploads-complete",t.uploads)},onUploadError:function(e,s,n){var a=i(t.uploads).findWhere({id:e});400==n.status?s=n.responseJSON:413==n.status&&(s="This file exceeds your server's max upload filesize limit."),a.errorMessage=s,t.$emit("error",a,t.uploads)}})},updateExtraData:function(){e(this.domElement).data("dmUploader").settings.extraData=this.extraData}}}}.call(t,i(2),i(1))},function(e,t){e.exports=" <div class=asset-uploader> <input type=file multiple=multiple class=hide v-el:native-file-field> </div> "},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["uploads"],components:{Upload:i(260)},methods:{clearUpload:function(e){this.uploads.splice(e,1)}}}},function(e,t,i){var s,n,a={};s=i(261),n=i(262),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["extension","basename","percent","error"],computed:{status:function(){return this.error?"error":100===this.percent?"pending":"uploading"}},methods:{clear:function(){this.$emit("clear")}}}},function(e,t){e.exports=' <tr> <td class=column-status :class=status> <span class="icon icon-warning error" v-if="status === \'error\'"></span> <span class="icon icon-circular-graph animation-spin" v-else></span> </td> <td class=column-thumbnail> <div class=img> <file-icon :extension=extension></file-icon> </div> </td> <td class=column-filename> <span class=filename>{{ basename }}</span> </td> <td class=column-progress v-if="status !== \'error\'"> <div class=progress> <div class=progress-bar :style="{ width: percent+\'%\' }"></div> </div> </td> <td class=column-error v-else>{{ error }}</td> <td style="width: 30px"> <a href=# v-if="status == \'error\'" @click.prevent=clear> <i class="icon icon-circle-with-cross"></i> </a> </td> </tr> '},function(e,t){e.exports=" <div class=asset-upload-listing> <div class=asset-upload-listing-header> <h6>{{ translate_choice('cp.uploads', uploads.length) }}</h6> </div> <table> <tbody> <tr is=upload v-for=\"(i, upload) in uploads\" :basename=upload.basename :extension=upload.extension :percent=upload.percent :error=upload.errorMessage @clear=clearUpload(i)> </tr> </tbody> </table> </div> "},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(14);t.default={components:{FocalPointEditor:i(265),Renamer:i(268),Mover:i(27),PublishFields:i(15)},props:{id:String,hasChild:!1,allowDeleting:{type:Boolean,default:function(){return!0}}},data:function(){return{loading:!0,saving:!1,asset:null,fields:null,publishFields:null,showFocalPointEditor:!1,showRenamer:!1,showMover:!1,errors:[]}},computed:{isImage:function(){return!!this.asset&&this.asset.is_image},hasErrors:function(){return 0!==e.size(this.errors)}},ready:function(){this.load()},events:{"close-child-editor":function(){this.closeFocalPointEditor(),this.closeImageEditor(),this.closeRenamer()}},methods:{load:function(){var e=this;this.loading=!0;var t=cp_url("assets/"+this.id.replace("::","/"));this.$http.get(t).success(function(t){e.asset=t.asset,e.fields=t.fields,e.getFieldset()})},getFieldset:function(){var t=this,i=cp_url("fieldsets-json/"+this.asset.fieldset);this.$http.get(i).success(function(i){var n=new s.a(i);t.publishFields=e.chain(n.sections).map(function(e){return e.fields}).flatten(!0).value(),t.loading=!1})},openFocalPointEditor:function(){this.showFocalPointEditor=!0,this.hasChild=!0},closeFocalPointEditor:function(){this.showFocalPointEditor=!1,this.hasChild=!1},selectFocalPoint:function(e){e="50-50"===e?null:e,this.$set("fields.focus",e)},save:function(){var e=this;this.saving=!0;var t=cp_url("assets/"+this.id.replace("::","/"));this.$http.post(t,this.fields).success(function(t){e.$emit("saved",t.asset),e.saving=!1}).error(function(t){e.$notify.error(translate("cp.error"),{timeout:2e3}),e.saving=!1,e.errors=t}),this.$dispatch("changesMade",!1)},delete:function(){var e=this;if(confirm(translate("cp.are_you_sure"))){this.saving=!0;var t=cp_url("assets/delete");this.$http.delete(t,{ids:this.asset.id}).success(function(t){e.$emit("deleted",e.asset.id),e.saving=!1})}},close:function(){this.$emit("closed")},openRenamer:function(){this.showRenamer=!0,this.hasChild=!0},closeRenamer:function(){this.showRenamer=!1,this.hasChild=!1},assetRenamed:function(e){this.asset=e,this.$emit("saved",e)},openMover:function(){this.showMover=!0,this.hasChild=!0},closeMover:function(){this.showMover=!1,this.hasChild=!1},assetMoved:function(e,t){this.asset=e,this.$emit("moved",e,t)},download:function(){window.open(this.asset.download_url)}}}}.call(t,i(1))},function(e,t,i){var s,n,a={};s=i(266),n=i(267),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","image"],data:function(){return{x:50,y:50}},computed:{bgPosition:function(){return this.x+"% "+this.y+"%"},bgImage:function(){return encodeURI(this.image)}},ready:function(){var e=(this.data||"50-50").split("-");this.x=e[0],this.y=e[1]},methods:{define:function(t){var i=e(t.target),s=i.width(),n=i.height(),a=t.pageX-i.offset().left,o=t.pageY-i.offset().top;this.x=(a/s*100).toFixed(),this.y=(o/n*100).toFixed()},select:function(){this.$emit("selected",this.x+"-"+this.y),this.close()},close:function(){this.$emit("closed")},reset:function(){this.x=50,this.y=50}}}}.call(t,i(2))},function(e,t){e.exports=' <div class=focal-point> <div class="focal-point-toolbox card"> <div class=form-group> <label>{{ translate(\'cp.focal_point_label\') }}</label> <small class=help-block>{{ translate(\'cp.focal_point_instructions\') }}</small> <div class="focal-point-image inline-block"> <img :src=image @click=define /> <div class=focal-point-reticle :style="{ top: y+\'%\', left: x+\'%\' }"></div> </div> </div> <div class="flexy apart"> <div class=btn-group> <button type=button class="btn btn-default" @click.prevent=close>{{ translate(\'cp.cancel\') }}</button> <button type=button class="btn btn-default" @click.prevent=reset>{{ translate(\'cp.reset\') }}</button> <button type=button class="btn btn-primary" @click=select>{{ translate(\'cp.select\') }}</button> </div> <div class=focal-point-coordinates> <div class=pair> <div class=axis>X</div> <div class=value>{{ x }}<sup>%</sup></div> </div> <div class=pair> <div class=axis>Y</div> <div class=value>{{ y }}<sup>%</sup></div> </div> </div> </div> </div> <div v-for="n in 9" class="frame frame-{{ n+1 }}" :style="{ backgroundImage: \'url(\'+bgImage+\')\', backgroundPosition: bgPosition }"> </div> </div> '},function(e,t,i){var s,n,a={};s=i(269),n=i(270),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["asset"],data:function(){return{show:!0,filename:null,saving:!1,errors:null,warningText:translate("cp.rename_file_warning")}},computed:{hasChanged:function(){return this.asset.filename!==this.filename}},ready:function(){this.filename=this.asset.filename},watch:{show:function(e){e||this.cancel()}},methods:{save:function(){var e=this;if(this.hasChanged){this.saving=!0;var t=cp_url("/assets/rename/"+this.asset.id.replace("::","/"));this.$http.post(t,{filename:this.filename}).success(function(t){e.$emit("saved",t),e.cancel()}).error(function(t){e.saving=!1,e.errors=t,e.$els.input.focus()})}},cancel:function(){this.$emit("closed")}}}},function(e,t){e.exports=' <modal :show.sync=show :saving=saving class=modal-small> <template slot=header> {{ translate(\'cp.rename_file\') }} </template> <template slot=body> <div class="alert alert-warning">{{{ warningText | markdown }}}</div> <div class="alert alert-danger" v-if=errors> <p v-for="error in errors">{{ error }}</p> </div> <div class=form-group> <input type=text autofocus class=form-control v-el:input v-model=filename @keyup.esc=cancel @keyup.enter=save /> </div> </template> <template slot=footer> <button class="btn btn-primary" :disabled=!hasChanged @click=save>Save</button> <button type=button class=btn @click=cancel>{{ translate(\'cp.cancel\') }}</button> </template> </modal> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={components:{MetaField:i(272),RegularField:i(287)},props:{fields:Array,data:Object,errors:Object,hiddenFields:{type:Array,default:[]},autofocus:Boolean,regularTitleField:{type:Boolean,default:!1}},methods:{componentName:function(e){return this.isMeta(e)?"MetaField":"RegularField"},widthText:function(t){t=t||100;return e.findWhere(this.widths,{value:t}).text},hasError:function(t){return e.has(this.errors,"fields."+t.name)},isVisible:function(e){return!this.hiddenFields.includes(e.name)},isMeta:function(e){if("title"!==e.name||!this.regularTitleField)return e.isMeta||["title","slug","date"].includes(e.name)}},ready:function(){}}}.call(t,i(1))},function(e,t,i){var s,n,a={};s=i(273),n=i(286),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(36),n=i(274),a=i.n(n),o=i(277),r=i.n(o),l=i(280),c=i.n(l),d=i(283),u=i.n(d);t.default={mixins:[s.a],components:{DateField:r.a,SlugField:a.a,TitleField:c.a,TaxonomyField:u.a},computed:{componentName:function(){var e="taxonomy"===this.field.type?"taxonomy":this.field.name;return""+e[0].toUpperCase()+e.slice(1)+"Field"},display:function(){return this.$refs.field.display||this.config.display||this.$refs.field.displayFallback||this.field.name},instructions:function(){return this.$refs.field.instructions||this.config.instructions},fieldtypeClass:function(){return this.field.name+"-meta-fieldtype"},isRequired:function(){var e=this.$refs.field.isRequired;return void 0!==e?e:this.field.required},isLocalizable:function(){var e=this.$refs.field.isLocalizable;return void 0!==e?e:this.config.localizable}}}},function(e,t,i){var s,n,a={};s=i(275),n=i(276),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(9);t.default={mixins:[s.a,AutoSlug],computed:{slug:{get:function(){return this.formData.fields.slug},set:function(e){this.formData.fields.slug=e}},displayFallback:function(){return translate("cp.slug")},isRequired:function(){return!0},isLocalizable:function(){return!0}},ready:function(){this.autoSlug("title","slug")}}},function(e,t){e.exports=' <input type=text v-model=slug class="form-control w-full mono" placeholder="{{ translate(\'cp.new\').toLowerCase() }}-{{ contentType.toLowerCase() }}"/> '},function(e,t,i){var s,n,a={};s=i(278),n=i(279),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(9);t.default={mixins:[s.a],computed:{displayFallback:function(){return translate("cp.date_and_time")},isLocalizable:function(){return!1}}}},function(e,t){e.exports=" <date-fieldtype name=date :data.sync=formData.fields.date :leave-alert=true :config=config></date-fieldtype> "},function(e,t,i){var s,n,a={};s=i(281),n=i(282),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(9);t.default={mixins:[s.a],computed:{displayFallback:function(){return translate("cp.title")},isRequired:function(){return!0},isLocalizable:function(){return!0}}}},function(e,t){e.exports=' <input type=text class="form-control type-text" autofocus=autofocus v-model=formData.fields.title /> '},function(e,t,i){var s,n,a={};s=i(284),n=i(285),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(9);t.default={mixins:[s.a],computed:{fieldConfig:function(){return{type:"taxonomy",taxonomy:this.config.name,width:this.config.width}}}}},function(e,t){e.exports=" <taxonomy-fieldtype name=categories :config=fieldConfig :data.sync=formData.fields[config.name] :leave-alert=true></taxonomy-fieldtype> "},function(e,t){e.exports=' <div :class=classes> <div class=field-inner> <div v-if=isReadOnly class=read-only-overlay :title="translate(\'cp.read_only\')"></div> <label class=block> {{ display }} <i class=required v-if=isRequired>*</i> </label> <small class=help-block v-if=instructions v-html="instructions | markdown"></small> <component v-ref:field :is=componentName :config=config :autofocus=autofocus></component> </div> </div> '},function(e,t,i){var s,n,a={};s=i(288),n=i(289),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(36);t.default={mixins:[s.a],computed:{componentName:function(){return this.field.type.replace(".","-")+"-fieldtype"},isLocalizable:function(){return this.config.localizable}}}},function(e,t){e.exports=' <div v-show=isVisible :class=classes> <div class=field-inner> <div v-if=isReadOnly class=read-only-overlay :title="translate(\'cp.read_only\')"></div> <label class=block :class="{\'bold\': field.bold}"> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | deslugify | titleize }}</template> <i class=required v-if=field.required>*</i> </label> <small class=help-block v-if=field.instructions v-html="field.instructions | markdown"></small> <component :is=componentName :name=field.name :data.sync=data :config=config :autofocus=autofocus :leave-alert=true> </component> </div> </div> '},function(e,t){e.exports=' <div class="publish-fields p-1"> <component v-for="(i, field) in fields" :is=componentName(field) :field=field :data.sync=data[field.name] :config=fields[$index] :autofocus="autofocus && i == 0"></component> </div> '},function(e,t){e.exports=' <div class=asset-editor-modal> <div class="asset-editor {{ isImage ? \'is-image\' : \'is-file\' }}"> <div v-if=loading class=loading> <div><span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }}</div> </div> <div v-if=saving class=loading> <div><span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.saving\') }}</div> </div> <template v-if="!loading && !saving"> <div class=editor-meta> <div class=asset-editor-meta-items> <div class="meta-item one-line"> <file-icon :extension=asset.extension></file-icon> {{ asset.path }} </div> <div class=meta-item v-if=isImage> <span class=meta-label>{{ translate(\'cp.dimensions\') }}</span> <span class=meta-value>{{ asset.width }} x {{ asset.height }}</span> </div> <div class=meta-item> <span class=meta-label>{{ translate(\'cp.size\') }}</span> <span class=meta-value>{{ asset.size }}</span> </div> <div class=meta-item> <span class=meta-label>{{ translate(\'cp.last_modified\') }}</span> <span class=meta-value :title=asset.last_modified>{{ asset.last_modified_relative }}</span> </div> </div> <div class=asset-editor-meta-actions> <a @click.prevent=download title="{{ translate(\'cp.download\') }}"> <svg xmlns=http://www.w3.org/2000/svg width=27 height=23 viewBox="0 0 27 23"> <g fill=none fill-rule=evenodd stroke=#676767 stroke-width=2 transform="translate(1 1.045)"> <path d="M21.1219828 6.85714286C21.1219828 6.85714286 20.0297414 6.69642857 18.9655172 6.85714286M3.01724138 6C3.01724138 4.10657143 4.5612069 2.57142857 6.46551724 2.57142857 8.36982759 2.57142857 9.9137931 4.10657143 9.9137931 6"/> <path d="M18.5344828 16.2857143L20.2465517 16.2857143C22.8607759 16.2857143 25 14.1591429 25 11.5594286 25 9.25757143 23.3215517 7.26942857 21.1219828 6.85714286 21.0728448 3.129 18.0219828 0 14.2603448 0 11.8642241 0 9.61465517 1.28785714 8.37241379 3.144 7.82586207 2.78271429 7.17068966 2.57142857 6.46551724 2.57142857 4.5612069 2.57142857 3.01724138 4.10657143 3.01724138 6 3.01724138 6.06557143 3.02327586 6.12985714 3.02715517 6.19457143 3.02284483 6.273 3.01724138 6.35142857 3.01724138 6.42857143 1.29784483 7.248 0 9.19585714 0 11.2092857 0 14.0014286 2.29741379 16.2857143 5.10560345 16.2857143L7.32758621 16.2857143M12.9310345 11.1428571L12.9310345 21M12.9310345 21L9.48275862 17.5714286M16.3793103 17.5714286L12.9310345 21"/> </g> </svg> </a> <a @click.prevent=close title="{{ translate(\'cp.close\') }}"> <svg xmlns=http://www.w3.org/2000/svg width=18 height=19 viewBox="0 0 18 19"> <g fill=none fill-rule=evenodd stroke=#676767 stroke-width=2 transform="translate(1 1.545)"> <path d="M16 0L.160533333 15.8389333M16 15.8389333L.160533333 0"/> </g> </svg> </a> </div> </div> <div class=editor-main> <div class=editor-preview> <div class=editor-preview-image v-if=isImage> <div class=image-wrapper> <img :src=asset.preview class=asset-thumb /> </div> </div> <div class=audio-wrapper v-if=asset.is_audio> <audio :src=asset.url controls preload=auto></audio> </div> <div class=video-wrapper v-if=asset.is_video> <video :src=asset.url controls></video> </div> <div class=full-height v-if="asset.extension == \'pdf\'"> <object data="{{ asset.url }}" type=application/pdf width=100% height=100%> </object> </div> <div class=full-height v-if=asset.is_previewable> <iframe class="full-height full-width" frameborder=0 src="https://docs.google.com/gview?url={{ asset.permalink }}&embedded=true"></iframe> </div> <div class=editor-file-actions> <button v-if=isImage type=button class=btn @click.prevent=openFocalPointEditor>{{ translate(\'cp.focal_point\') }} </button> <button type=button class=btn @click.prevent=openRenamer>{{ translate(\'cp.rename_file\') }} </button> <button type=button class=btn @click.prevent=openMover>{{ translate(\'cp.move_file\') }} </button> </div> </div> <div class=editor-form> <div class=editor-form-fields> <div class="alert alert-danger" v-if=hasErrors> <ul> <li v-for="error in errors">{{ error }}</li> </ul> </div> <publish-fields :fields=publishFields :data.sync=fields :errors=errors :autofocus=true :regular-title-field=true> </publish-fields> </div> <div class=editor-form-actions> <button type=button class="btn btn-danger" @click=delete v-if=allowDeleting> {{ translate(\'cp.delete\') }} </button> <button type=button class="btn btn-primary" @click=save> {{ translate(\'cp.save\') }} </button> </div> </div> </div> </template> <focal-point-editor v-if=showFocalPointEditor :data=fields.focus :image=asset.preview @selected=selectFocalPoint @closed=closeFocalPointEditor> </focal-point-editor> <image-editor v-if=showImageEditor :id=asset.id :container=asset.container :path=asset.path :url=asset.permalink @saved=updateThumbnail> </image-editor> <renamer v-if=showRenamer :asset=asset @saved=assetRenamed @closed=closeRenamer> </renamer> <mover v-if=showMover :assets=[asset.id] :folder=asset.folder :container=asset.container @saved=assetMoved @closed=closeMover> </mover> </div> </div> '},function(e,t,i){var s,n,a={};s=i(293),n=i(294),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{container:String,path:String,create:Boolean},data:function(){return{form:{},folder:{},loading:!0,saving:!1,errors:[],basenameModified:!1}},computed:{hasErrors:function(){return Object.keys(this.errors).length>0&&!this.saving}},methods:{reset:function(){this.path="",this.folder={},this.form={},this.loading=!0},getFolder:function(){this.create?this.getBlankFolder():this.getExistingFolder()},getBlankFolder:function(){this.folder={},this.form={container:this.container,parent:this.path,title:"",basename:""},this.loading=!1},getExistingFolder:function(){var e=cp_url("assets/folders/"+this.container+"/"+this.path);this.$http.get(e).success(function(e){this.folder=e,this.form={title:e.title},this.loading=!1})},save:function(){this.saving=!0,this.create?this.saveNewFolder():this.saveExistingFolder()},saveNewFolder:function(){var e=cp_url("assets/folders");this.$http.post(e,this.form).success(function(e){this.$emit("created",e.folder.path),this.saving=!1,this.close()}).error(function(e){this.errors=e,this.saving=!1})},saveExistingFolder:function(){var e=cp_url("assets/folders/"+this.container+"/"+this.path);this.$http.post(e,this.form).success(function(e){this.$emit("updated"),this.saving=!1,this.close()})},close:function(){this.$emit("closed")}},ready:function(){this.getFolder()}}},function(e,t){e.exports=" <modal :show=true class=\"asset-modal asset-folder-editor\" :saving=saving :loading=loading> <template slot=close> <button type=button tabindex=-1 class=close slot=close aria-label=Close @click=close><span aria-hidden=true>&times;</span> </button> </template> <template slot=header> <h1 v-if=create>{{ translate('cp.create_folder') }}</h1> <h1 v-if=!create>{{ translate('cp.edit_folder') }}</h1> </template> <template slot=body> <div class=\"alert alert-danger\" v-if=hasErrors> <p v-for=\"error in errors\">{{ error }}</p> </div> <div class=form-group v-if=create> <label class=block>{{ translate('cp.name') }}</label> <small class=help-block>{{ translate('cp.folder_directory_instructions') }}</small> <input type=text class=form-control v-model=form.basename @keyup.esc=close v-focus=create> </div> <div class=form-group> <label class=block>{{ translate('cp.title') }}</label> <small class=help-block>{{ translate('cp.folder_title_instructions') }}</small> <input type=text class=form-control v-model=form.title @keyup.esc=close v-focus=\"! create\"> </div> </template> <template slot=footer> <button type=button class=btn @click=close>{{ translate('cp.close') }}</button> <button type=button class=\"btn btn-primary\" @click=save>{{ translate('cp.save') }}</button> </template> </modal> "},function(e,t,i){var s,n,a={};s=i(296),n=i(297),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["path"],computed:{pathParts:function(){var e=["/"];return"/"===this.path?e:e.concat(this.path.split("/"))}},methods:{selectFolder:function(e){var t=0===e?"/":this.pathParts.slice(1,e+1).join("/");this.$emit("navigated",t)}}}},function(e,t){e.exports=' <div class=breadcrumbs> <a href="" v-for="(i, part) in pathParts" @click.prevent=selectFolder(i)> <span class="icon icon-folder"></span> {{ part }} </a> </div> '},function(e,t){e.exports=' <div class="asset-browser card" @dragover=dragOver @dragleave=dragStop @drop=dragStop> <div v-if="! initialized" class="asset-browser-loading loading"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div class=drag-notification v-show="canEdit && draggingFile"> <i class="icon icon-download"></i> <h3>{{ translate(\'cp.drop_to_upload\') }}</h3> </div> <div v-if=showSidebar class=asset-browser-sidebar> <h4>{{ translate(\'cp.containers\') }}</h4> <div v-for="c in containers" class=sidebar-item :class="{ \'active\': container.id == c.id }"> <a @click=selectContainer(c.id)> {{ c.title }} </a> </div> </div> <div class=asset-browser-main v-if=initialized> <div class=asset-browser-header> <h1 class=mb-3> <template v-if=isSearching> {{ translate(\'cp.search_results\') }} </template> <template v-else> <template v-if=restrictNavigation> {{ folder.title || folder.path }} </template> <template v-else> {{ container.title }} </template> </template> <div class=loading-indicator v-show=loadingAssets> <span class="icon icon-circular-graph animation-spin"></span> </div> </h1> <input type=text class="search filter-control mb-3" placeholder="{{ translate(\'cp.search\') }}..." v-model=searchTerm debounce=500 /> <div class="asset-browser-actions flexy wrap"> <slot name=contextual-actions></slot> <div class="btn-group action mb-3"> <button type=button class="btn btn-icon" :class="{\'depressed\': displayMode == \'grid\'}" @click="setDisplayMode(\'grid\')"> <span class="icon icon-grid"></span> </button> <button type=button class="btn btn-icon" :class="{\'depressed\': displayMode == \'table\'}" @click="setDisplayMode(\'table\')"> <span class="icon icon-list"></span> </button> </div> <div class="btn-group action mb-3" v-if=canEdit> <button type=button class=btn v-if="!restrictNavigation && !isSearching" @click.prevent=createFolder> {{ translate(\'cp.new_folder\') }} </button> <button type=button class=btn @click.prevent=uploadFile v-if=!isSearching> {{ translate(\'cp.upload\') }} </button> </div> </div> </div> <div class=asset-browser-content> <uploader v-ref:uploader :dom-element=uploadElement :container=container.id :path=path @updated=uploadsUpdated @upload-complete=loadAssets> </uploader> <uploads v-if=uploads.length :uploads=uploads> </uploads> <component :is=listingComponent :container=container.id :assets=assets :folder=folder :subfolders=subfolders :loading=loading :selected-assets=selectedAssets :restrict-navigation=restrictNavigation :is-searching=isSearching @folder-selected=folderSelected @folder-editing=editFolder @folder-deleted=folderDeleted @asset-selected=assetSelected @asset-deselected=assetDeselected @asset-editing=editAsset @asset-deleting=deleteAsset @assets-dragged-to-folder=assetsDraggedToFolder @asset-doubleclicked=assetDoubleclicked @sorted=sortBy> </component> <div class=no-results v-if="isSearching && isEmpty"> <svg-icon name=folder-search-empty class="h-16 w-16 mx-auto"></svg-icon> <h2>{{ translate(\'cp.no_search_results\') }}</h2> </div> <pagination v-if="pagination.totalPages > 1" :total=pagination.totalPages :current=pagination.currentPage :segments=pagination.segments @selected=paginationPageSelected> </pagination> </div> <breadcrumbs v-if="!restrictNavigation && !isSearching" :path=path @navigated=folderSelected> </breadcrumbs> <asset-editor v-if=showAssetEditor :id=editedAssetId :has-child.sync=editorHasChild @closed=closeAssetEditor @saved=assetSaved @deleted=assetDeleted @moved=assetMoved> </asset-editor> <folder-editor v-if=showFolderCreator :create=true :container=container.id :path=path @closed=folderCreatorClosed @created=folderCreated> </folder-editor> <folder-editor v-if=showFolderEditor :create=false :container=container.id :path=editedFolderPath @closed=folderEditorClosed @updated=loadAssets> </folder-editor> </div> </div> '},function(e,t,i){var s,n,a={};s=i(300),n=i(306),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={components:{"driver-local":i(37),"driver-s3":i(38)},props:{isNew:Boolean,container:Object},data:function(){return{config:{title:null,handle:null,driver:"local",fieldset:null,local:{},s3:{}},drivers:[{value:"local",text:"Local"},{value:"s3",text:"Amazon S3"}],isHandleModified:!1,errors:[]}},computed:{driver:function(){return this.config.driver},hasErrors:function(){return 0!==e.size(this.errors)}},ready:function(){if(this.isNew)this.config.s3.region=e.first(this.s3Regions).value;else{var t=this.container.driver||"local";this.config.driver=t,this.config.title=this.container.title,this.config.handle=this.container.handle,this.config.fieldset=this.container.fieldset,this.config[t]=this.container}this.isNew&&this.syncTitleAndHandleFields()},methods:{save:function(){var e=this.isNew?cp_url("configure/content/assets"):cp_url("configure/content/assets/"+this.container.id);this.$http.post(e,this.config).success(function(e){e.success?window.location=e.redirect:this.errors=e.errors})},syncTitleAndHandleFields:function(){this.$watch("config.title",function(e){this.isHandleModified||(this.config.handle=this.$slugify(e))})}}}}.call(t,i(1))},function(e,t){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{path:String,url:String,editing:{type:Boolean,default:function(){return!1}}},data:function(){return{resolvedPath:null,resolvingPath:!1,resolvedPathExists:!1,resolvedUrl:null,resolvingUrl:!1}},computed:{showResolvedPath:function(){return this.resolvedPath||this.resolvingPath},showResolvedUrl:function(){return this.resolvedUrl||this.resolvingUrl},validUrl:function(){return"http"===this.showResolvedUrl.substr(0,4)},canContinue:function(){return this.resolvedPathExists}},ready:function(){var e=this;this.editing&&setTimeout(function(){return e.resolvePath()},0)},watch:{resolvedPathExists:function(e){e&&this.resolveUrl()}},methods:{resolvePath:function(){this.resolvingPath=!0,this.$http.post(cp_url("assets/containers/resolve-path"),{path:this.path},function(e){this.resolvingPath=!1,this.resolvedPath=e.path,this.resolvedPathExists=e.exists})},resolveUrl:function(){this.resolvingUrl=!0,this.$http.post(cp_url("assets/containers/resolve-url"),{url:this.url},function(e){this.resolvingUrl=!1,this.resolvedUrl=e.url})},submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=" <div class=form-group> <label class=block>{{ translate('cp.path') }}</label> <small class=help-block>{{ translate('cp.asset_path_instructions') }}</small> <div class=input-with-loader> <input type=text class=form-control v-model=path @keyup=\"resolvePath | debounce 500\"/> <span v-show=resolvingPath class=\"icon-resolving icon icon-circular-graph animation-spin\"></span> </div> <small class=help-block v-if=showResolvedPath> <span> {{ translate('cp.path_resolves_to', { path: resolvedPath }) }} <span v-show=resolvedPathExists class=text-success>{{ translate('cp.path_exists') }}</span> <span v-else class=text-danger>{{ translate('cp.path_does_not_exist') }}</span> </span> </small> </div> <div class=form-group v-if=resolvedPathExists> <label class=block>{{ translate('cp.url') }}</label> <small class=help-block>{{ translate('cp.asset_url_instructions') }}</small> <div class=input-with-loader> <input type=text class=form-control v-model=url @keyup=\"resolveUrl | debounce 500\"/> <span v-show=resolvingUrl class=\"icon-resolving icon icon-circular-graph animation-spin\"></span> </div> <small class=help-block v-if=showResolvedUrl> {{ translate('cp.url_resolves_to', { path: resolvedUrl }) }} <span class=text-success v-show=validUrl>{{ translate('cp.valid_url') }}.</span> <span class=text-danger v-else>{{ translate('cp.invalid_url') }}</span> </small> </div> <div class=form-group v-if=!editing> <button class=\"btn btn-default\" @click=submit :disabled=!canContinue>{{ translate('cp.next_step') }}</button> </div> "},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{key:String,secret:String,bucket:String,region:String,path:String,editing:{type:Boolean,default:function(){return!1}}},data:function(){return{validating:!1,validationError:null,validationSuccess:!1,filesDetected:null}},computed:{s3Regions:function(){return[{value:"us-east-1",text:"US East (N. Virginia) / US Standard / us-east-1"},{value:"us-east-2",text:"US East (Ohio) / us-east-2"},{value:"us-west-1",text:"US West (N. California) / us-west-1"},{value:"us-west-2",text:"US West (Oregon) / us-west-2"},{value:"ca-central-1",text:"Canada (Central) / ca-central-1"},{value:"ap-south-1",text:"Asia Pacific (Mumbai) / ap-south-1"},{value:"ap-northeast-2",text:"Asia Pacific (Seoul) / ap-northeast-2"},{value:"ap-southeast-1",text:"Asia Pacific (Singapore) / ap-southeast-1"},{value:"ap-southeast-2",text:"Asia Pacific (Sydney) / ap-southeast-2"},{value:"ap-northeast-1",text:"Asia Pacific (Tokyo) / ap-northeast-1"},{value:"eu-central-1",text:"EU (Frankfurt) / eu-central-1"},{value:"eu-west-1",text:"EU (Ireland) / eu-west-1"},{value:"eu-west-2",text:"EU (London) / eu-west-2"},{value:"sa-east-1",text:"South America (Sao Paulo) / sa-east-1)"}]},hasCredentials:function(){return this.key&&this.secret&&this.region&&this.bucket}},ready:function(){this.setDefaults()},methods:{setDefaults:function(){this.key=this.key||"",this.secret=this.secret||"",this.bucket=this.bucket||"",this.path=this.path||"",this.region=this.region||"us-east-1"},validateCredentials:function(){this.validationError=null,this.validating=!0,this.$http.post(cp_url("assets/containers/validate-s3"),{key:this.key,secret:this.secret,bucket:this.bucket,region:this.region,path:this.path}).success(function(e){this.validationSuccess=!0,this.filesDetected=e.files,this.validationError=null,this.validating=!1}).error(function(e){this.validationSuccess=!1,this.validationError=e.error,this.validating=!1})},submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=' <div class=form-group> <label class=block>{{ translate(\'cp.access_key_id\') }}</label> <input type=text class=form-control v-model=key /> </div> <div class=form-group> <label class=block>{{ translate(\'cp.secret_access_key\') }}</label> <input type=text class=form-control v-model=secret /> </div> <div class=form-group> <label class=block>{{ translate(\'cp.bucket\') }}</label> <input type=text class=form-control v-model=bucket /> </div> <div class=form-group> <label class=block>{{ translate(\'cp.region\') }}</label> <select-fieldtype :data.sync=region :options=s3Regions></select-fieldtype> </div> <div class=form-group> <label class=block>{{ translate(\'cp.path\') }}</label> <input type=text class=form-control v-model=path /> </div> <div class=form-group> <button class="btn btn-default" @click=validateCredentials :disabled="!hasCredentials || validating"> Validate Credentials </button> <button class="btn btn-default" v-if="validationSuccess && !editing" @click=submit> Next Step </button> </div> <div class=form-group v-if="validating || validationError || validationSuccess"> <dl> <dd v-if=validating> <span class="icon icon-circular-graph animation-spin"></span> Validating... </dd> <dd class=text-danger v-if="validationError && !validating"> <span class="icon icon-cross"></span> Invalid Credentials <br> <small>{{ validationError }}</small> </dd> <dd v-if="validationSuccess && !validating"> <span class=text-success> <span class="icon icon-check"></span> Valid credentials. </span><br> <small>Files detected: {{ filesDetected }}</small> </dd> </dl> </div> '},function(e,t){e.exports=" <div class=\"alert alert-danger\" v-if=hasErrors> <ul> <li v-for=\"error in errors\">{{ error }}</li> </ul> </div> <div class=\"flexy mb-3\"> <h1 class=fill v-if=isNew>{{ translate('cp.creating_asset_container') }}</h1> <h1 class=fill v-else>{{ translate('cp.editing_asset_container') }}</h1> <button type=submit class=\"btn btn-primary\" @click=save>{{ translate('cp.save') }}</button> </div> <div class=\"publish-fields card\"> <div class=form-group> <label class=block>{{ translate('cp.title') }}</label> <small class=help-block>{{ translate('cp.asset_name_instructions') }}</small> <input type=text class=form-control v-model=config.title autofocus=autofocus /> </div> <div class=form-group v-if=isNew> <label class=block>{{ translate('cp.handle') }}</label> <div class=help-block>{{ translate('cp.asset_handle_instructions') }}</div> <input type=text class=form-control v-model=config.handle @keydown=\"isHandleModified = true\"/> </div> <div class=form-group> <label class=block>{{ translate('cp.fieldset') }}</label> <small class=help-block>{{ translate('cp.asset_fieldset_instructions') }}</small> <fieldset-fieldtype :data.sync=config.fieldset></fieldset-fieldtype> </div> <div class=form-group> <label class=block>{{ translate('cp.driver') }}</label> <small class=help-block>{{ translate('cp.asset_driver_instructions') }}</small> <select-fieldtype :data.sync=config.driver :options=drivers></select-fieldtype> </div> <driver-local v-if=\"driver === 'local'\" :editing=true :path.sync=config.local.path :url.sync=config.local.url> </driver-local> <driver-s3 v-if=\"driver === 's3'\" :editing=true :key.sync=config.s3.key :secret.sync=config.s3.secret :bucket.sync=config.s3.bucket :region.sync=config.s3.region :path.sync=config.s3.path> </driver-s3> </div> "},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("assets/containers/get")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-folder-images"></span>\n                            {{ item.assets }}\n                        </div>\n                        <a :href="item.browse_url">{{ item.title }}</a>'}}}}}},function(e,t,i){var s,n,a={};s=i(309),n=i(319),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{"meta-fields":i(310),"driver-fields":i(313),"fieldset-fields":i(316)},data:function(){return{step:"meta",title:null,handle:null,fieldset:null,driver:null,driverConfig:{}}},methods:{metaSubmit:function(){this.step="driver"},driverSubmit:function(){this.step="fieldset"},fieldsetSubmit:function(){this.complete()},complete:function(){var e=cp_url("configure/content/assets"),t={title:this.title,handle:this.handle,fieldset:this.fieldset,driver:this.driver,local:this.driverConfig.local,s3:this.driverConfig.s3};this.$http.post(e,t).success(function(e){e.success?window.location=e.redirect:this.errors=e.errors})}}}},function(e,t,i){var s,n,a={};s=i(311),n=i(312),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["title","handle"],data:function(){return{isHandleModified:!1}},computed:{canContinue:function(){return this.title&&this.handle}},watch:{title:function(e){this.isHandleModified||(this.handle=this.$slugify(e,"_"))}},methods:{submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=" <div class=publish-fields> <div class=form-group> <label class=block>{{ translate('cp.title') }}</label> <small class=help-block>{{ translate('cp.asset_name_instructions') }}</small> <input type=text class=form-control v-model=title autofocus=autofocus /> </div> <div class=form-group> <label class=block>{{ translate('cp.handle') }}</label> <div class=help-block>{{{ translate('cp.asset_handle_instructions') }}}</div> <input type=text class=form-control v-model=handle @keydown=\"isHandleModified = true\"/> </div> <div class=form-group> <button class=\"btn btn-default\" @click=submit :disabled=!canContinue>Next Step</button> </div> </div> "},function(e,t,i){var s,n,a={};s=i(314),n=i(315),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{"driver-local":i(37),"driver-s3":i(38)},props:{driver:String,config:Object},data:function(){return{}},methods:{submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=" <div class=publish-fields> <div class=form-group> <label class=block>{{ translate('cp.driver') }}</label> <small class=help-block>{{ translate('cp.asset_driver_instructions') }}</small> <ul class=list-unstyled> <li> <input type=radio v-model=driver value=local id=driver-local /> <label for=driver-local>Local Filesystem</label> </li> <li> <input type=radio v-model=driver value=s3 id=driver-s3 /> <label for=driver-s3>Amazon S3</label> </li> </ul> </div> <driver-local v-if=\"driver === 'local'\" :path.sync=config.local.path :url.sync=config.local.url @submit=submit> </driver-local> <driver-s3 v-if=\"driver === 's3'\" :key.sync=config.s3.key :secret.sync=config.s3.secret :bucket.sync=config.s3.bucket :region.sync=config.s3.region :path.sync=config.s3.path @submit=submit> </driver-s3> </div> "},function(e,t,i){var s,n,a={};s=i(317),n=i(318),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["fieldset"],methods:{submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=" <div class=publish-fields> <div class=form-group> <label class=block>{{ translate('cp.fieldset') }}</label> <small class=help-block>{{ translate('cp.asset_fieldset_instructions') }}</small> <fieldset-fieldtype :data.sync=fieldset></fieldset-fieldtype> </div> <div class=form-group> <button class=\"btn btn-default\" @click=submit>Next Step</button> </div> </div> "},function(e,t){e.exports=" <div> <h1 class=mb-3>{{ translate('cp.creating_asset_container') }}</h1> <div class=\"publish-form flush card\"> <div class=\"breadcrumbs wizard\"> <span class=step :class=\"{'active': step === 'meta'}\"> Meta </span> <span class=step :class=\"{'active': step === 'driver'}\"> Driver </span> <span class=step :class=\"{'active': step === 'fieldset'}\"> Fieldset </span> </div> <div class=pad> <meta-fields v-if=\"step === 'meta'\" :title.sync=title :handle.sync=handle @submit=metaSubmit> </meta-fields> <driver-fields v-if=\"step === 'driver'\" :driver.sync=driver :config.sync=driverConfig @submit=driverSubmit> </driver-fields> <fieldset-fields v-if=\"step === 'fieldset'\" :fieldset.sync=fieldset @submit=fieldsetSubmit> </fieldset-fields> </div> </div> </div> "},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("collections/get")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-documents"></span>\n                            {{ item.entries }}\n                        </div>\n                        <a :href="item.entries_url">{{ item.title }}</a>\n\n                        <a href="{{ item.create_url }}" v-if="can(\'collections:\'+item.id+\':create\')"\n                           class="btn btn-icon btn-primary pull-right"><span class="icon icon-plus"></span>\n                       </a>'}}}},ready:function(){this.can("super")&&this.addActionPartial()},methods:{addActionPartial:function(){this.tableOptions.partials.actions="\n                <li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>\n            "}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("assets/containers/get"),delete:cp_url("configure/content/assets")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-folder-images"></span>\n                            {{ item.assets }}\n                        </div>\n                        <a :href="item.edit_url">{{ item.title }}</a>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("assets:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("assets:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("collections/get"),delete:cp_url("configure/content/collections/delete")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-documents"></span>\n                            {{ item.entries }}\n                        </div>\n                        <a :href="item.edit_url">{{ item.title }}</a>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("collections:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("collections:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("globals/get"),delete:cp_url("configure/content/globals/delete")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:"<a :href=\"cp_url('configure/content/globals/')+item.slug\">{{ item.title }}</a>"}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("globals:manage")&&(e+="<li><a :href=\"cp_url('configure/content/globals/')+item.slug\">{{ translate('cp.edit') }}</a></li>"),this.can("globals:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("taxonomies/get"),delete:cp_url("configure/content/taxonomies/delete")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-documents"></span>\n                            {{ item.taxonomies }}\n                        </div>\n                        <a :href="item.edit_url">{{ item.title }}</a>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("taxonomies:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("taxonomies:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t,i){e.exports={template:i(326),components:{"formset-fields-builder":i(327),"formset-columns":i(331)},props:{formsetTitle:String,formsetName:String,create:{type:Boolean,default:!1},saveUrl:String},data:function(){return{loading:!0,errorMessage:null,slug:null,formset:{fields:[],columns:[]}}},computed:{columns:{get:function(){return this.formset.columns||[]},set:function(e){this.formset.columns=e}},metricsGridConfig:function(){return{add_row:translate("cp.formset_metrics_grid_add_row"),mode:"stacked",fields:[{name:"type",display:translate("cp.formset_metrics_grid_type_field"),width:25,type:"select",options:[{value:"sum",text:translate("cp.formset_metrics_grid_type_option_sum")},{value:"total",text:translate("cp.formset_metrics_grid_type_option_total")},{value:"average",text:translate("cp.formset_metrics_grid_type_option_average")}]},{name:"label",display:translate("cp.formset_metrics_grid_label_field"),type:"text",width:75},{name:"params",display:translate("cp.formset_metrics_grid_params_field"),type:"array"}]}},emailGridConfig:function(){return{add_row:translate("cp.formset_emails_grid_add_row"),mode:"stacked",fields:[{name:"to",display:translate("cp.formset_emails_grid_to_field"),type:"text",width:50,instructions:translate("cp.formset_emails_grid_to_instructions")},{name:"from",display:translate("cp.formset_emails_grid_from_field"),type:"text",width:50,instructions:translate("cp.formset_emails_grid_from_instructions")},{name:"reply_to",display:translate("cp.formset_emails_grid_reply_to_field"),type:"text"},{name:"subject",display:translate("cp.formset_emails_grid_subject_field"),type:"text",instructions:translate("cp.formset_emails_grid_subject_instructions")},{name:"template",display:translate("cp.formset_emails_grid_template_field"),type:"text",instructions:translate("cp.formset_emails_grid_template_instructions")}]}}},methods:{getBlankFormset:function(){this.formset={title:"",fields:[]},this.loading=!1},getFormset:function(){var e=this,t=cp_url("/forms/"+this.formsetName+"/get");e.$http.get(t).success(function(t){e.formset=t,e.loading=!1}).error(function(t){e.errorMessage=t.message})},save:function(){this.formset.title?this.$http.post(this.saveUrl,{slug:this.slug,formset:this.formset}).success(function(e){window.location=e.redirect}):this.$dispatch("setFlashError",translate("validation.required",{attribute:"title"}))}},ready:function(){this.create?this.getBlankFormset():this.getFormset()}}},function(e,t){e.exports="<div> <div class=\"sticky flexy mb-3 full-width\"> <h1 class=fill v-if=create> {{ translate('cp.create_formset') }} </h1> <h1 class=fill v-if=!create> {{ translate('cp.editing_formset') }}: <strong>{{ formsetTitle }}</strong> </h1> <button type=button class=\"btn btn-primary\" v-on:click=save()>{{ translate('cp.save') }}</button> </div> <div class=px-3> <div class=\"card p-3\"> <div v-if=\"loading && !errorMessage\" class=loading> <span class=\"icon icon-circular-graph animation-spin\"></span> {{ translate('cp.loading') }} </div> <div v-if=errorMessage class=\"alert alert-danger\"> <p>{{ errorMessage }}</p> </div> <div class=fieldset-builder v-if=\"! loading\"> <div class=form-group> <label class=block>{{ translate('cp.title') }}</label> <small class=help-block>{{ translate('cp.formset_title_instructions') }}</small> <input type=text class=form-control v-model=formset.title autofocus=autofocus /> </div> <div class=form-group v-if=create> <label class=block>{{ translate('cp.slug') }}</label> <small class=help-block>{{ translate('cp.formset_slug_instructions') }}</small> <input type=text class=form-control v-model=slug /> </div> <div class=form-group> <label class=block>{{ translate_choice('cp.metrics', 2) }}</label> <small class=help-block>{{ translate('cp.formset_metrics_instructions') }}</small> <grid-fieldtype :data.sync=formset.metrics :config=metricsGridConfig></grid-fieldtype> </div> <div class=form-group> <label class=block>{{ translate_choice('cp.emails', 2) }}</label> <small class=help-block>{{ translate('cp.formset_emails_instructions') }}</small> <grid-fieldtype :data.sync=formset.email :config=emailGridConfig></grid-fieldtype> </div> <div class=form-group> <label class=block>{{ translate('cp.formset_honeypot_field') }}</label> <small class=help-block>{{ translate('cp.formset_honeypot_instructions') }} <a href=https://docs.statamic.com/forms#honeypot>{{ translate('cp.formset_honeypot_link') }}</a></small> <input type=text class=form-control v-model=formset.honeypot /> </div> <div class=form-group> <label class=block>{{ translate('cp.formset_store_field') }}</label> <small class=help-block>{{ translate('cp.formset_store_instructions') }}</small> <toggle-fieldtype :data.sync=formset.store></toggle-fieldtype> </div> </div> </div> <div class=\"card p-3\" v-if=!loading> <div class=\"head clearfix\"> <h2 class=m-0>{{ translate_choice('cp.fields', 2) }}</h2> <small class=help-block>{{ translate('cp.formset_fields_instructions') }}</small> </div> <formset-fields-builder :fields=formset.fields></formset-fields-builder> </div> </div> </div> "},function(e,t,i){(function(t){e.exports={template:i(328),components:{"field-settings":i(329)},props:{fields:{type:Array,default:[]}},data:function(){return{showEditModal:!1,selectedField:null}},methods:{selectField:function(e){this.selectedField=e},deselectField:function(){this.selectedField=null},deleteField:function(e){this.selectedField=null,this.fields.splice(e,1)},addField:function(){var e=(this.fields.length||0)+1;this.fields.push({name:"field_"+e,display:"Field "+e,isNew:!0}),this.selectedField=e-1,this.$nextTick(function(){t(this.$el).find("input").first().focus().select()})},enableSorting:function(){var e=this;t(".sortable").sortable({axis:"y",revert:175,placeholder:"placeholder",handle:".drag-handle",forcePlaceholderSize:!0,start:function(e,t){t.item.data("start",t.item.index())},update:function(t,i){var s=i.item.data("start"),n=i.item.index();e.fields.splice(n,0,e.fields.splice(s,1)[0])}})}},watch:{selectedField:function(e){this.showEditModal=null!==e},showEditModal:function(e){e?t(this.$el).find(".modal-body").find("input").first().focus().select():this.deselectField()}},ready:function(){this.enableSorting()}}}).call(t,i(2))},function(e,t){e.exports='<div> <table class="fields-table bordered-table"> <thead> <tr> <th>{{ translate(\'cp.handle\') }}</th> <th>{{ translate(\'cp.label\') }}</th> <th class=col-column>{{ translate_choice(\'cp.columns\', 1) }}</th> <th class=row-controls></th> </tr> </thead> <tbody class=sortable v-el:tbody> <tr v-for="field in fields"> <td class=col-handle><input type=text class=code v-model=field.name /></td> <td class=col-display><input type=text v-model=field.display /></td> <td class=col-column> <toggle-fieldtype :data.sync=field.column></toggle-fieldtype> </td> <td class=row-controls> <span class="icon icon-edit edit" @click=selectField($index)></span> <span class="icon icon-menu move drag-handle"></span> <span class="icon icon-cross delete" @click=deleteField($index)></span> </td> </tr> </tbody> </table> <modal :show.sync=showEditModal class=markdown-modal> <template slot=header>{{ translate(\'cp.edit_field\') }}</template> <template slot=body> <field-settings :field.sync=fields[selectedField]> </field-settings> </template> </modal> <button type=button class="btn btn-default" @click=addField>{{ translate_choice(\'cp.fields\', 1) }} <i class="icon icon-plus icon-right"></i></button> </div> '},function(e,t,i){e.exports={template:i(330),props:["field"],data:function(){return{isNameModified:!0}},ready:function(){this.field.isNew&&(this.isNameModified=!1,delete this.field.isNew,this.$watch("field.display",function(e){this.isNameModified||(this.field.name=this.$slugify(e,"_"))}))}}},function(e,t){e.exports="<div> <div class=form-group> <label>{{ translate('cp.display_text') }}</label> <small class=help-block>{{ translate('cp.display_text_instructions') }}</small> <input type=text class=form-control v-model=field.display v-focus=true /> </div> <div class=form-group> <label>{{ translate('cp.field_name') }}</label> <small class=help-block>{{ translate('cp.field_name_instructions') }}</small> <input type=text class=form-control v-model=field.name @keydown=\"isNameModified = true\"/> </div> <div class=form-group> <label>{{ translate('cp.validation_rules') }}</label> <small class=help-block>{{{ translate('cp.validation_rules_instructions', { url: \"https://laravel.com/docs/5.1/validation#available-validation-rules\" }) }}}</small> <input type=text class=form-control v-model=field.validate /> </div> </div> "},function(e,t,i){(function(t){e.exports={template:i(332),props:{columns:{type:Array},fields:{type:Array}},computed:{suggestions:function(){var e=[];return t.each(this.fields,function(t){e.push({text:t.display,value:t.name})}),e}}}}).call(t,i(1))},function(e,t){e.exports="<div> <relate-fieldtype :suggestions-prop=suggestions :data.sync=columns :config={}></relate-fieldtype> </div> "},function(e,t,i){var s,n,a={};s=i(334),n=i(341),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){Mousetrap=i(16),t.default={components:{SectionBuilder:i(335)},props:{fieldsetTitle:String,create:{type:Boolean,default:!1},saveUrl:String},data:function(){return{loading:!0,saving:!1,errors:[],errorMessage:null,slug:null,fieldset:{title:"",sections:null},fieldtypes:[]}},computed:{canSave:function(){return""!==this.fieldset.title},hasErrors:function(){return 0!==e.size(this.errors)}},methods:{getFieldtypes:function(){var t=this;this.$http.get(cp_url("/fieldtypes")).success(function(i){e.each(i,function(e){t.fieldtypes.push(e)}),t.getFieldset()})},getFieldset:function(){var e=this,t=cp_url("/fieldsets-json/"+get_from_segment(3)+"/edit");e.$http.get(t).success(function(t){var i=this;this.fieldset=t,e.loading=!1,this.$nextTick(function(){i.$watch("fieldset",function(){i.$dispatch("changesMade",!0)},{deep:!0})})}).error(function(t){e.errorMessage=t.message})},save:function(){var e=this;this.saving=!0,this.errors=[],this.$http.post(this.saveUrl,{slug:this.slug,fieldset:this.fieldset}).success(function(t){if(t.success){if(e.$dispatch("changesMade",!1),e.create)return void(window.location=t.redirect);e.saving=!1,e.$dispatch("setFlashSuccess",t.message,{timeout:1500})}else e.$dispatch("setFlashError",translate("cp.error")),e.saving=!1,e.errors=t.errors,s("html, body").animate({scrollTop:0})}).error(function(e){alert("There was a problem saving the fieldset. Please check your logs.")})},fieldDeleted:function(e){this.$refs.sectionBuilder.deleteField(e)}},ready:function(){var e=this;this.getFieldtypes(),Mousetrap.bindGlobal("mod+s",function(t){t.preventDefault(),e.save()})}}}.call(t,i(1),i(2))},function(e,t,i){var s,n,a={};s=i(336),n=i(340),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){i(14);var n=i(6),a=(i.n(n),i(337)),o=i.n(a);var r=null,l=null;t.default={components:{SectionsSection:o.a},props:["fieldtypes","sections"],data:function(){return{activeSection:null,isDraggingField:!1}},computed:{hasSidebar:function(){return null!=this.sidebarSection},sidebarSection:function(){return e.find(this.sections,{handle:"sidebar"})},sidebarSectionLabel:function(){return this.sidebarSection.display||this.sidebarSection.handle},sidebarSectionFields:function(){var t=this,i=e.findIndex(this.sections,{handle:"sidebar"});return-1==i?[]:e.map(this.sections[i].fields,function(e){return t.getFieldById(e)})},editingSidebar:function(){return!!this.hasSidebar&&this.activeSection===e.find(this.sections,{handle:"sidebar"}).id}},ready:function(){var e=this;this.activeSection=this.sections[0].id,this.$nextTick(function(){e.makeSectionsSortable(),e.makeFieldsSortable()})},watch:{activeSection:function(){var e=this;this.$nextTick(function(){return e.updateFieldWidths()})}},methods:{getFieldByName:function(t){return e.find(this.fieldset.fields,{name:t})},getFieldById:function(t){return e.find(this.fieldset.fields,{id:t})},getSectionFields:function(t){var i=this;return e.map(this.sections[t].fields,function(e){return i.getFieldById(e)})},makeSectionsSortable:function(){var e=this;(r=new n.Sortable(this.$els.tabs,{draggable:".tab",delay:200,mirror:{constrainDimensions:!1,cursorOffsetX:0,yAxis:!1}})).on("sortable:start",function(t){e.activeSection=e.sections[t.startIndex].id}),r.on("sortable:stop",function(t){e.sections.splice(t.newIndex,0,e.sections.splice(t.oldIndex,1)[0])})},makeFieldsSortable:function(){var t=this;(l=new n.Sortable(this.$el.querySelectorAll(".root-level-section-fields"),{draggable:".root-level-section-field",handle:".root-level-drag-handle",appendTo:this.$el,mirror:{constrainDimensions:!0}})).on("drag:start",function(e){t.isDraggingField=!0}),l.on("sortable:stop",function(i){t.isDraggingField=!1;var s=i.oldIndex,n=i.newIndex,a=e.findIndex(t.sections,{id:i.oldContainer.parentElement.__vue__.section.id}),o=e.findIndex(t.sections,{id:i.newContainer.parentElement.__vue__.section.id}),r=t.sections[a].fields[s];if(a===o){var c=t.sections[o].fields;c.splice(n,0,c.splice(s,1)[0])}else{t.sections[o].fields.splice(n,0,r),t.sections[a].fields.splice(s,1);var d=window.scrollY;t.sections=JSON.parse(JSON.stringify(t.sections)),l.destroy(),t.$nextTick(function(){t.makeFieldsSortable(),window.scroll(0,d)})}}),this.$nextTick(function(){return t.updateFieldWidths()})},addSection:function(){var e=this,t=this.sections.length+1,i={display:"Section "+t,handle:"section_"+t,id:"section_"+t,fields:[]};this.sections.push(i),this.activeSection=i.id,this.$nextTick(function(){var t=e.sections.length-1;r.destroy(),e.makeSectionsSortable(),l.destroy(),e.makeFieldsSortable(),e.$refs.sections[t].focus()})},deleteSection:function(e){var t;if(0!==e||1!==this.sections.length){var i=0===e?1:0;(t=this.sections[i].fields).splice.apply(t,[this.sections[i].fields.length,0].concat(function(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}(this.sections[e].fields))),this.sections.splice(e,1),this.activeSection=this.sections[i].id}},getSectionComponentByHandle:function(t){if("sidebar"===t)return this.$refs.sidebarSection;var i=e.findIndex(this.sections,{handle:t});return this.$refs.sections[i]},createNewField:function(t){var i=(this.fieldset.fields.length||0)+1,n=e.findWhere(this.fieldtypes,{name:t}),a=s.extend({},n);return a.type=a.name,a.name="field_"+i,a.id="field_"+i,a.display="Field "+i,a.instructions=null,a.localizable=!1,a.width=100,a.isNew=!0,delete a.config,delete a.label,delete a.canBeValidated,delete a.canBeLocalized,delete a.canHaveDefault,a},hoveredIntoTab:function(e){this.isDraggingField&&(this.activeSection=e)},updateFieldWidths:function(){e.each(this.$refs.sections,function(e){return e.updateFieldWidths()})}}}}.call(t,i(1),i(2))},function(e,t,i){var s,n,a={};s=i(338),n=i(339),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["fieldtypes","section"],data:function(){return{isAddingField:!1,isQuickAddingField:!1,handleModified:!RegExp(/^section_\d+/).test(this.section.handle)}},computed:{display:function(){return this.section.display}},watch:{display:function(e){this.handleModified||(this.section.handle=this.$slugify(e,"_"))},handle:function(e,t){t!==e&&("sidebar"===t&&this.$emit("no-longer-sidebar"),"sidebar"===e&&this.$emit("became-sidebar"))}},methods:{focus:function(){this.$els.display.select()},fieldSelectorClosed:function(){this.isAddingField=!1},updateFieldWidths:function(){this.$refs.fields.updateFieldWidths()},addField:function(){this.isAddingField=!0,this.isQuickAddingField=!1},quickAddField:function(){this.addField(),this.isQuickAddingField=!0}}}},function(e,t){e.exports=' <div class=section-layout> <div class="section-header p-3 border-b"> <div> <label>{{ translate(\'cp.section_label\') }}</label> <input type=text class="section-display form-control" v-model=section.display v-el:display/> </div> <div> <label class="flex justify-between"> <span class=mr-sm>{{ translate(\'cp.section_handle\') }}</span> <i class="icon icon-info text-xxs opacity-25 hover:opacity-75" v-tip :tip-text="translate(\'cp.section_handle_tip\')"></i> </label> <input type=text class="section-handle form-control mono" v-model=section.handle @keydown="handleModified = true"/> </div> </div> <div class=px-3> <h2>Fields</h2> </div> <fieldset-fields v-ref:fields :fields.sync=section.fields :section=section :fieldtypes=fieldtypes :is-adding=isAddingField :is-quick-adding=isQuickAddingField @selector-closed=fieldSelectorClosed @updated=fieldsUpdated classes="root-level-section-fields px-2"></fieldset-fields> <div class="p-3 border-t"> <button class="btn btn-primary mr-1" @click.prevent=addField>{{ translate(\'cp.add_field\') }}</button> <button class="btn btn-default" @click.prevent=quickAddField>{{ translate(\'cp.quick_add\') }}</button> </div> </div> '},function(e,t){e.exports=' <div class=section-builder :class="{ \'is-dragging-field\': isDraggingField }"> <div class=tabs-outer> <div class=tabs v-el:tabs> <a href="" v-for="(i, section) in sections" :class="[\'tab\', { \'active\': activeSection === section.id }]" @click.prevent="activeSection = section.id" @mouseenter=hoveredIntoTab(section.id)> {{ section.display }} <span class="icon icon-cross section-delete opacity-25 hover:opacity-75" @click.prevent=deleteSection(i) v-if="sections.length > 1"></span> </a> </div> <button @click.prevent=addSection class="py-1 px-2 opacity-50 hover:opacity-100"> <span class="icon icon-plus"></span> </button> </div> <div class=sections-container :class="{ \'has-sidebar\': hasSidebar, \'editing-sidebar\': editingSidebar }"> <sections-section v-for="(i, section) in sections" v-show="activeSection === section.id" v-ref:sections :section.sync=section :fieldtypes=fieldtypes :is-only-section="sections.length === 1" @field-added=addField @deleted=deleteSection(i) @fields-sorted=fieldsSorted></sections-section> <div class=other-section-placeholder v-if=hasSidebar v-text="editingSidebar ? translate_choice(\'cp.sections\', 2) : sidebarSectionLabel"></div> </div> </div> '},function(e,t){e.exports=' <div> <div class="flexy mb-3 sticky"> <h1 class=fill v-if=create> {{ translate(\'cp.create_fieldset\') }} </h1> <h1 class=fill v-else> {{ translate(\'cp.editing_fieldset\') }}: <strong>{{ fieldsetTitle }}</strong> </h1> <button type=button class="btn btn-primary" v-on:click=save() :disabled=!canSave>{{ translate(\'cp.save\') }}</button> </div> <div class=px-3> <div class="alert alert-danger" v-if=hasErrors> <ul> <li v-for="error in errors">{{ error }}</li> </ul> </div> <div class="card p-0"> <div v-if="loading && !errorMessage" class=loading> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if=errorMessage class="alert alert-danger"> <p>{{ errorMessage }}</p> </div> <div class="fieldset-builder flex flex-wrap" v-if="! loading"> <div class="form-group p-2 mb-0 w-full flex items-center border-b"> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.title\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.fieldset_title_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <input type=text class=form-control v-model=fieldset.title autofocus=autofocus /> </div> </div> <div class="form-group p-2 mb-0 w-full flex items-center border-b" v-if=create> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.handle\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.fieldset_handle_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <input type=text class=form-control v-model=slug /> </div> </div> <div class="form-group p-2 mb-0 w-full flex items-center border-b"> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.create_title\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.fieldset_create_title_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <input type=text class=form-control v-model=fieldset.create_title /> </div> </div> <div class="form-group p-2 mb-0 w-full flex items-center border-b"> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.hide\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.fieldset_hide_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <toggle-fieldtype :data.sync=fieldset.hide></toggle-fieldtype> </div> </div> <div class="form-group p-2 mb-0 w-full flex items-center"> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.append_taxonomies\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.append_taxonomies_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <toggle-fieldtype :data.sync=fieldset.taxonomies></toggle-fieldtype> </div> </div> </div> </div> <div class="text-center little-heading mx-1 opacity-50">{{ translate(\'cp.sections_and_fields\') }}</div> <section-builder v-if=!loading v-ref:section-builder :fieldtypes=fieldtypes :sections.sync=fieldset.sections> </section-builder> </div> </div> '},function(e,t,i){var s,n={};s=i(343),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(n).forEach(function(e){var t=n[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s,n){var a=i(39),o=i.n(a),r=i(40),l=i.n(r),c=i(348),d=i.n(c),u=i(351),p=i.n(u),f=i(25),h=i(26);t.default={mixins:[h.a,f.a],components:{Branches:l.a,Branch:o.a,CreatePage:d.a,MountCollection:p.a},data:function(){return{loading:!0,saving:!1,changed:!1,showUrls:!1,show:"urls",pages:[],arePages:!0}},computed:{homeEditUrl:function(){var e=cp_url("pages/edit");return this.locale!==Object.keys(Statamic.locales)[0]&&(e+="?locale="+this.locale),e},hasChildren:function(){return e.some(this.pages,function(e){return e.items.length})},isSortable:function(){return s.can("pages:reorder")}},ready:function(){var e=this;this.getPages(),this.bindLocaleWatcher(),this.bindShowDraftsWatcher(),Mousetrap.bindGlobal("mod+s",function(t){t.preventDefault(),e.save()})},methods:{getPages:function(){this.pages=[],this.loading=!0;var e=cp_url("/pages/get?locale="+this.locale+"&drafts="+(this.showDrafts?1:0));this.$http.get(e,function(e){this.arePages=e.pages.length>0,this.pages=e.pages,this.loading=!1,this.$nextTick(function(){this.initSortable()})})},initSortable:function(){if(this.isSortable){var e,t,i,s=this;n(this.$el).find(".page-tree > ul + ul").nestedSortable({containerSelector:"ul",handle:".drag-handle",placeholderClass:"branch-placeholder",placeholder:'<li class="branch branch-placeholder"><div class="branch-row w-full flex items-center depth-{{ depth }}"><div class="page-move drag-handle w-6 h-full"></div><div class="flex p-1 items-center flex-1"><div class="page-text">&nbsp;</div></div></div></li>',bodyClass:"page-tree-dragging",draggedClass:"branch-dragged",onMousedown:function(e,t,i){var s=e[0].__vue__,n=parseInt(e[0].dataset.depth);return 1!==s.$parent.pages.length||1!==n},onDragStart:function(s,n,a,o){var r=s[0].__vue__;i=r,e=r.branchIndex,t=r.$parent.pages[e],a(s,n)},onDrag:function(e,i,s,a){n(".branch-placeholder").find(".page-text").text(t.title),s(e,i)},onDrop:function(n,a,o,r){s.$els.click.play(),s.changed=!0,i.$parent.pages.splice(e,1);var l=n.index(),c=n.parent()[0].__vue__;t=s.updateDroppedUrl(t,c.$parent.url),c.pages.splice(l,0,t);var d=s.pages;s.pages=[],s.$nextTick(function(){s.pages=d}),o(n,a)}})}},updateDroppedUrl:function(t,i){var s=this;return i=i||"",t.url=i+"/"+t.slug,t.items=e.map(t.items,function(e){return s.updateDroppedUrl(e,t.url)}),t},expandAll:function(){this.$els.card_set.play(),this.toggleAll(!1)},collapseAll:function(){this.$els.card_drop.play(),this.toggleAll(!0)},toggleAll:function(t,i){var n=this;i=i||n.pages,e.each(i,function(e){s.set(e,"collapsed",t),e.items.length&&n.toggleAll(t,e.items)})},toggleUrls:function(){this.showUrls=!this.showUrls,this.showUrls?this.show="titles":this.show="urls"},save:function(){var e=this;e.saving=!0;var t=JSON.parse(JSON.stringify(e.pages));t=e.updateOrderIndexes(t),this.$http.post(cp_url("/pages"),{pages:t}).success(function(t){e.getPages(),e.changed=!1,e.saving=!1,e.$dispatch("setFlashSuccess",translate("cp.pages_reordered"))})},updateOrderIndexes:function(t){var i=this;return e.map(t,function(e,t){return e.items.length&&(e.items=i.updateOrderIndexes(e.items)),e.order=t+1,e})},createPage:function(e){this.$broadcast("pages.create",e)},onShowDraftsChanged:function(){this.getPages()},onLocaleChanged:function(){this.getPages()}},events:{"pages.create":function(e){this.$broadcast("pages.create",e)},"pages.mount":function(e){this.$broadcast("pages.mount",e)},"pages.unmount":function(e){this.saving=!0,this.$broadcast("pages.unmount",e)},"page.deleted":function(){this.pages.length>1||n(this.$el).find(".page-tree > ul + ul").nestedSortable("destroy")}},watch:{changed:function(e){this.$dispatch("changesMade",e)}}}}.call(t,i(1),i(3),i(2))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{branchIndex:Number,uuid:String,title:String,url:String,published:{type:Boolean,default:!0},editUrl:String,hasEntries:Boolean,entriesUrl:String,createEntryUrl:String,childPages:{type:Array,default:function(){return[]}},collapsed:Boolean,depth:Number,home:{type:Boolean,default:!1},sortable:Boolean},computed:{hasChildren:function(){return this.childPages.length},isSingleTopLevelPage:function(){return 1===this.$parent.pages.length&&1===this.depth}},methods:{toggle:function(){this.collapsed=!this.collapsed},createPage:function(){this.$dispatch("pages.create",this.url)},deletePage:function(){var e=this;swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_page",1),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){e.$http.post(cp_url("pages/delete"),{uuid:e.uuid}).success(function(){e.$parent.pages.splice(e.branchIndex,1),this.$dispatch("page.deleted")})})},duplicatePage:function(){this.$http.post(cp_url("pages/duplicate"),{id:this.uuid}).success(function(e){window.location=e.redirect})},mountCollection:function(){this.$dispatch("pages.mount",this.uuid)},unmountCollection:function(){this.$dispatch("pages.unmount",this.uuid)}}}},function(e,t){e.exports=' <li class=branch :class="{ draft: !published }" :data-depth=depth> <div class="branch-row w-full flex items-center"> <div v-if=home class="w-6 home-handle"> <i class="icon icon-home mx-auto opacity-25"></i> </div> <div v-if="!home && sortable" :class="[\'page-move drag-handle w-6 h-full\', {\'cursor-not-allowed opacity-50\': isSingleTopLevelPage}]"></div> <div class="flex items-center flex-1 p-1"> <div class=page-text> <a :href=editUrl class=page-title>{{ title }}</a> <a :href=editUrl class=page-url>{{ url }}</a> </div> <div class="w-6 opacity-25 hover:opacity-50 page-toggle-container ml-px" v-if=hasChildren> <div :class="{\'page-toggle\': true, toggleable: hasChildren}" v-on:click=toggle> <i :class="{ \'icon\': true, \'icon-chevron-down\': true, \'collapsed\': collapsed }"></i> </div> </div> <div class="has-collection flex items-center pl-2" v-if=hasEntries> <svg-icon name=entries class="pr-1 text-grey h-6 w-6"></svg-icon> <a :href=createEntryUrl>{{ translate(\'cp.add\') }}</a> <span class="mx-sm text-grey text-xxs">{{ translate(\'cp.or\') }}</span> <a :href=entriesUrl>{{ translate(\'cp.edit\') }}</a> </div> </div> <div class="branch-meta flex items-center pr-1"> <div class=page-actions v-if="can(\'pages:create\') || can(\'pages:delete\')"> <a :href=url :title=url class="page-action text-grey-dark px-sm bloop" target=_blank> <svg-icon name=visit class="opacity-25 hover:opacity-75 h-4 w-4"></svg-icon> </a> <div class="btn-group page-action action-more px-sm"> <i class="icon icon-dots-three-vertical opacity-25 hover:opacity-75" data-toggle=dropdown></i> <ul class=dropdown-menu> <li v-if="can(\'pages:create\')"><a href="" @click.prevent=createPage>{{ translate(\'cp.create_page_button\') }}</a></li> <li v-if="can(\'super\')"> <a href="" @click.prevent=mountCollection v-if=!hasEntries>{{ translate(\'cp.mount_collection\') }}</a> <a href="" @click.prevent=unmountCollection v-if=hasEntries>{{ translate(\'cp.unmount_collection\') }}</a> </li> <li v-if="can(\'pages:create\')"><a href="" @click.prevent=duplicatePage>{{ translate(\'cp.duplicate\') }}</a></li> <li v-if="can(\'pages:create\') && can(\'pages:delete\')" class=divider></li> <li v-if="can(\'pages:delete\')" class=warning><a href="" @click.prevent=deletePage>{{ translate(\'cp.delete\') }}</a></li> </ul> </div> </div> </div> </div> <branches :pages=childPages :depth="depth + 1" :parent-url=url :collapsed.sync=collapsed :sortable=sortable v-if=!home> </branches> </li> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{pages:Array,depth:Number,parentUrl:{type:String,default:""},collapsed:Boolean,sortable:Boolean},computed:{classes:function(){var e=["branches"];e.push("depth-"+this.depth),this.pages.length||e.push("empty");var t=this.collapsed?"collapsed":"open";return e.push("branches-"+t),e.join(" ")}},methods:{toggle:function(e){e.$set("collapsed",!e.collapsed)},buildUrl:function(e){return this.parentUrl+"/"+e}}}},function(e,t){e.exports=' <ul :class=classes> <branch v-for="page in pages" :branch-index=$index :uuid=page.id :title="page.title || page.slug" :url=buildUrl(page.slug) :published=page.published :edit-url=page.edit_url :has-entries=page.has_entries :entries-url=page.entries_url :create-entry-url=page.create_entry_url :child-pages=page.items :collapsed.sync=page.collapsed :depth=depth :sortable=sortable></branch> </ul> '},function(e,t,i){var s,n,a={};s=i(349),n=i(350),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["locale"],data:function(){return{parent:null,show:!1,saving:!1,loading:!0,fieldsets:[]}},events:{"pages.create":function(e){this.loading=!0,this.parent=e,this.getFieldsets()}},methods:{cancel:function(){this.show=!1},create:function(e){var t="/"===this.parent?"":this.parent,i=cp_url("pages/create"+t+"?fieldset="+e);this.locale!==Object.keys(Statamic.locales)[0]&&(i+="&locale="+this.locale),window.location=i},getFieldsets:function(){var t=cp_url("fieldsets-json?url="+this.parent+"&hidden=false");this.$http.get(t,function(t){var i=[];e.each(t.items,function(e){i.push({value:e.uuid,text:e.title})}),e.findWhere(i,{value:"default"})||i.push({value:"default",text:"Default"}),i=e.sortBy(i,function(e){return e.text}),this.fieldsets=i,this.loading=!1,this.fieldsets.length<=1?this.create(this.fieldsets[0].value):this.show=!0})}}}}.call(t,i(1))},function(e,t){e.exports=" <div> <modal :show.sync=show :saving=saving :loading=loading class=modal-small> <template slot=header>{{ translate('cp.choose_page_type') }}</template> <template slot=body> <ul class=chooser> <li v-for=\"fieldset in fieldsets\"> <a href=\"\" @click.prevent=create(fieldset.value)>{{ fieldset.text }}</a> </li> </ul> </template> <template slot=footer> <div class=pull-left>{{ translate('cp.parent_page') }}: <code>{{ parent }}</code></div> <button type=button class=btn @click=cancel>{{ translate('cp.cancel') }}</button> </template> </modal> </div> "},function(e,t,i){var s,n,a={};s=i(352),n=i(353),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={data:function(){return{id:null,show:!1,saving:!1,loading:!0,fieldsets:[]}},events:{"pages.mount":function(e){this.loading=!0,this.show=!0,this.id=e,this.getCollections()},"pages.unmount":function(e){this.id=e,this.mount(null)}},methods:{getCollections:function(){this.$http.get(cp_url("collections/get"),function(t){var i=[];e.each(t.items,function(e){i.push({value:e.id,text:e.title})}),this.collections=i,this.loading=!1})},cancel:function(){this.show=!1},mount:function(e){this.saving=!0;var t=this.id;this.$http.post(cp_url("pages/mount"),{id:t,collection:e}).success(function(e){window.location=window.location})}}}}.call(t,i(1))},function(e,t){e.exports=" <modal :show.sync=show :saving=saving :loading=loading class=modal-small> <template slot=header>{{ translate('cp.mount_collection') }}</template> <template slot=body> <ul class=chooser> <li v-for=\"collection in collections\"> <a href=\"\" @click.prevent=mount(collection.value)>{{ collection.text }}</a> </li> </ul> </template> <template slot=footer> <button type=button class=btn @click=cancel>{{ translate('cp.cancel') }}</button> </template> </modal> "},function(e,t,i){var s,n,a={};s=i(355),n=i(368),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){var n,a,o,r=i(0),l=i.n(r),c=i(357),d=i(14);Mousetrap=i(16),n=Mousetrap,a={},o=n.prototype.stopCallback,n.prototype.stopCallback=function(e,t,i,s){return!!this.paused||!a[i]&&!a[s]&&o.call(this,e,t,i)},n.prototype.bindGlobal=function(e,t,i){if(this.bind(e,t,i),e instanceof Array)for(t=0;t<e.length;t++)a[e[t]]=!0;else a[e]=!0},n.init(),t.default={components:{"publish-fields":i(15),"user-options":i(359),"status-field":i(361),"publish-section":i(365)},mixins:[c.a],deep:!0,props:{title:String,extra:{type:String,default:"{}"},isNew:Boolean,contentType:String,uuid:String,fieldsetName:String,slug:{type:String,default:""},uri:String,url:String,submitUrl:String,status:{type:Boolean,default:!0},locale:{type:String,default:function(){return Object.keys(Statamic.locales)[0]}},locales:{type:String,default:"[{}]"},isDefaultLocale:{type:Boolean,default:!0},removeTitle:{type:Boolean,default:!1},readOnly:{type:Boolean,default:!1}},data:function(){return{loading:!0,saving:!1,fieldset:{},contentData:null,formData:{extra:{},fields:{}},formDataInitialized:!1,isSlugModified:!1,iframeLoading:!1,previewRequestQueued:!1,errors:[],continuing:!1,anothering:!1,staticCachingEnabled:window.Statamic.staticCachingEnabled,activeSection:null}},computed:{isEntry:function(){return"entry"===this.contentType},isTaxonomy:function(){return"taxonomy"===this.contentType},isGlobal:function(){return"global"===this.contentType},isUser:function(){return"user"===this.contentType},isSettings:function(){return"settings"===this.contentType},isAddon:function(){return"addon"===this.contentType},isPage:function(){return"page"===this.contentType},isHomePage:function(){return this.isPage&&"/"===this.uri},canEdit:function(){return!0!==this.readOnly&&("entry"===this.contentType?this.can("collections:"+this.extra.collection+":edit"):"page"===this.contentType?this.can("pages:edit"):"taxonomy"===this.contentType?this.can("taxonomies:"+this.extra.taxonomy+":edit"):"global"===this.contentType?this.can("globals:"+this.slug+":edit"):"user"===this.contentType?Statamic.userId===this.uuid||this.can("users:edit"):!this.isAddon&&!this.isSettings||this.can("super"))},shouldShowStatus:function(){return!this.isSettings&&!this.isAddon&&!this.isUser},allowStatuses:function(){return!this.isTaxonomy&&!this.isGlobal&&!this.isHomePage},shouldShowDate:function(){return!!this.isEntry&&(!(this.isNew||!this.formData.fields.date)||!(!this.isNew||"date"!==this.formData.extra.order_type))},shouldShowSneakPeek:function(){return!(this.isGlobal||this.isSettings||this.isUser||this.isAddon)},isSneakPeeking:function(){return this.$root.isPreviewing},hasErrors:function(){return 0!==e.size(this.errors)},dateFieldConfig:function(){return this.fieldset.date||{}},filteredFormData:function(){var t=this,i=JSON.parse(JSON.stringify(this.formData));return i.fields=e.objReject(i.fields,function(e,i){return t.hiddenFields.includes(i)}),i},shouldShowSidebar:function(){return!(0==this.sidebarSection.fields.length||this.$root.isPreviewing||this.$root.windowWidth<1400)},sections:function(){return this.fieldset.sections},mainSections:function(){return this.shouldShowSidebar?e.filter(this.sections,function(e){return"sidebar"!=e.handle}):this.sections},sidebarSection:function(){return e.find(this.sections,{handle:"sidebar"})},sectionFields:function(){var e={};return this.sections.forEach(function(t){t.fields.forEach(function(i){e[i.name]=t.handle})}),e},sectionErrors:function(){var e=this,t={};return Object.keys(this.errors).forEach(function(i){i=i.substr(7),t[i]=e.sectionFields[i]}),t},sectionToFocusOnError:function(){var t=this.shouldShowSidebar?e.omit(this.sectionErrors,function(e){return"sidebar"===e}):this.sectionErrors,i=Object.keys(t);return 0===i.length?this.activeSection:t[i[0]]}},methods:{initFormData:function(){this.formData={fieldset:this.fieldsetName,new:this.isNew,type:this.contentType,uuid:this.uuid,id:this.uuid,status:this.status,slug:this.contentData.slug,locale:this.locale,extra:this.extra,fields:this.contentData},this.formDataInitialized=!0},publish:function(){var e=this,t=this;if(t.saving=!0,t.errors=[],this.isSettings)var i=cp_url("settings/")+this.slug;else if(this.isAddon)i=cp_url("addons/")+this.extra.addon+"/settings";else i=this.submitUrl;var n=this.$http.post(i,this.filteredFormData);n.success(function(e){if(t.loading=!1,e.success){if(this.$dispatch("changesMade",!1),!this.formData.continue||this.isNew||this.formData.another)return void(window.location=e.redirect);this.continuing=!0,this.formData.continue=null,this.saving=!1,this.title=this.isUser?this.formData.fields.username:this.formData.fields.title,this.$dispatch("setFlashSuccess",e.message,{timeout:1500})}else this.$dispatch("setFlashError",translate("cp.error")),this.saving=!1,this.errors=e.errors,this.activeSection=this.sectionToFocusOnError,this.$nextTick(function(){s("html, body").animate({scrollTop:0})})}),n.error(function(t){e.saving=!1,e.errors=[];var i="TokenMismatchException"===t.exception?"session_expired_error":"publish_error";e.$notify.error(translate("cp."+i))})},publishWithoutContinuing:function(){localStorage.setItem("statamic.publish.continue",!1),localStorage.setItem("statamic.publish.another",!1),this.publish()},publishAndContinue:function(){this.continuing=!0,this.anothering=!1,this.formData.continue=!0,localStorage.setItem("statamic.publish.continue",!0),localStorage.setItem("statamic.publish.another",!1),this.publish()},publishAndAnother:function(){this.anothering=!0,this.formData.another=!0,localStorage.setItem("statamic.publish.continue",!1),localStorage.setItem("statamic.publish.another",!0),this.publish()},initPreview:function(){s("#sneak-peek-iframe").length||s('<iframe frameborder="0" id="sneak-peek-iframe">').appendTo("#sneak-peek"),this.updatePreview()},updatePreview:e.debounce(function(e){if(this.iframeLoading)this.previewRequestQueued=!0;else{var t=this.formData;if(t.preview=!0,this.iframeLoading=!0,this.isNew)if(this.isPage){var i=this.formData.slug||"new-page";s=(s=this.extra.parent_url+"/"+i).replace("//","/")}else s=this.entryUrl();else var s=this.url;this.$http.post(s,t,function(e,t,i){this.updatePreviewIframe(e),this.iframeLoading=!1,this.previewRequestQueued&&(this.previewRequestQueued=!1,this.updatePreview())})}},150),updatePreviewIframe:function(e){var t=s("#sneak-peek-iframe").get(0);e+='<script type="text/javascript">window.scrollTo('+s(t.contentWindow.document).scrollLeft()+", "+s(t.contentWindow.document).scrollTop()+");<\/script>",t.contentWindow.document.open(),t.contentWindow.document.write(e),t.contentWindow.document.close()},syncTitleAndSlugFields:function(){this.isNew&&this.$watch("formData.fields.title",function(e){this.$slugify(e)==this.formData.fields.slug&&(this.isSlugModified=!1),this.isSlugModified||(this.formData.fields.slug=this.$slugify(e))})},entryUrl:function(){if(!this.isNew)return this.uri;var e=this.isTaxonomy?"new-term":"new-entry",t=this.formData.slug||e,i=this.extra.route,s=i;if("date"===this.extra.order_type)var n=this.date();for(var a,o=/{\s*([a-zA-Z0-9_\-]+)\s*}/g;null!==(a=o.exec(i));){var r=a[0],l="";switch(r){case"{year}":l=n.format("YYYY");break;case"{month}":l=n.format("MM");break;case"{day}":l=n.format("DD");break;case"{slug}":l=t;break;default:var c=r.substring(1,r.length-1);l=this.formData.fields[c]}s=s.replace(r,l)}return s},date:function(){var e=this.extra.datetime,t="YYYY-MM-DD";return e.length>10&&(t+=" HH:mm"),l()(e,t)},modifySlug:function(e){var t=this.formData.fields.title,i=this.formData.slug;this.isSlugModified=this.$slugify(t)!==i},getInitialContinue:function(){return"true"===localStorage.getItem("statamic.publish.continue")},getInitialAnother:function(){return"true"===localStorage.getItem("statamic.publish.another")},getFieldset:function(){var e={},t=cp_url("fieldsets-json/")+this.fieldsetName;e.locale=this.locale,e.taxonomies=this.isEntry,this.$http.get(t,e).success(function(e){this.fieldset=new d.a(e).showDate(this.shouldShowDate),(this.isPage||this.isEntry||this.isTaxonomy)&&this.fieldset.showSlug(!this.isHomePage).prependTitle().prependMeta(),this.activeSection=this.fieldset.sections[0].handle,this.initConditions()})},sectionHasError:function(t){return e.chain(this.sectionErrors).values().contains(t).value()},sectionDisplay:function(e){return e.display||""+e.handle[0].toUpperCase()+e.handle.slice(1)}},watch:{shouldShowSidebar:function(e){e&&"sidebar"===this.activeSection&&(this.activeSection=this.sections[0].handle)},activeSection:function(e){this.$root.$emit("publish.section.changed",e)}},ready:function(){var e=this;this.extra=JSON.parse(this.extra),this.contentData=JSON.parse(JSON.stringify(Statamic.Publish.contentData)),this.locales&&(this.locales=JSON.parse(this.locales)),this.continuing=this.getInitialContinue(),this.anothering=this.getInitialAnother(),this.initFormData(),this.getFieldset(),this.syncTitleAndSlugFields();var t=null;this.shouldShowSneakPeek&&(this.$root.isPublishPage=!0,this.$on("previewing",function(){this.initPreview(),t=this.$watch("formData",function(e){this.updatePreview()},{deep:!0})})),this.$on("previewing.stopped",function(){t()}),this.$on("fieldsetLoaded",function(e){this.fieldset=e,this.loading=!1}),this.canEdit&&(Mousetrap.bindGlobal("mod+s",function(t){t.preventDefault(),e.publishAndContinue()}),Mousetrap.bindGlobal("meta+enter",function(t){t.preventDefault(),e.anothering&&e.publishAndAnother(),e.publish()}))}}}.call(t,i(1),i(2))},,function(e,t,i){"use strict";(function(e){var s=i(358);t.a={data:function(){return{conditions:[],hiddenFields:[]}},methods:{evaluateConditions:function(){var t=this;this.conditions.forEach(function(e){e.passes=e.validate(t.contentData)}),this.hiddenFields=e.chain(this.fieldset.fields()).filter(function(e){return!t.isVisible(e)}).map(function(e){return e.name}).value()},isVisible:function(e){var t=this.conditions.find(function(t){return t.id===e.name});return void 0===t||(void 0!==e.hide_when?!t.passes:t.passes)},initConditions:function(){var e=this;this.conditions=this.fieldset.fields().filter(function(e){return void 0!==e.show_when||void 0!==e.hide_when}).map(function(t){return new s.a(t.name,e.condition(t))}),this.evaluateConditions(),this.$watch("contentData",function(t){return e.evaluateConditions(t)},{deep:!0})},condition:function(e){return void 0!==e.show_when?e.show_when:e.hide_when}}}}).call(t,i(1))},function(e,t,i){"use strict";var s=function(){function e(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,i,s){return i&&e(t.prototype,i),s&&e(t,s),t}}();var n=function(){function e(t,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t,this.rule=i,this.passes=!1,this.validate=this._validate()}return s(e,[{key:"isJavascript",value:function(){return"string"==typeof this.rule}},{key:"exists",value:function(){return!!Statamic.conditions&&Statamic.conditions.hasOwnProperty(this.rule)}},{key:"_validate",value:function(){return this.isJavascript()&&!this.exists()?(console.error("Statamic.conditions."+this.rule+" hasn't been implemented."),function(){return!1}):this.isJavascript()&&this.exists()?Statamic.conditions[this.rule]:function(e){var t=[],i=Object.keys(this.rule).filter(function(e){return e.startsWith("or_")});for(var s in this.rule){if(i.includes(s))if(e[s.substr(3)]===this.rule[s])return!0;!i.includes(s)&&Array.isArray(this.rule[s])?t.push(this.rule[s].includes(e[s])):"not null"===this.rule[s]?t.push(null!==e[s]):t.push(e[s]===this.rule[s])}return!t.includes(!1)}}}]),e}();t.a=n},function(e,t,i){e.exports={template:i(360),props:["username","status"],methods:{sendResetEmail:function(){var e=translate("cp.password_reset_email_not_sent");this.$http.get(cp_url("users/"+this.username+"/send-reset-email")).success(function(t){t.success?this.$dispatch("setFlashSuccess",translate("cp.email_sent")):this.$dispatch("setFlashError",e)}).error(function(t){this.$dispatch("setFlashError",e)})},copyResetLink:function(){var e=translate("cp.copy_password_reset_link_failed");this.$http.get(cp_url("users/"+this.username+"/reset-url")).success(function(t){t.success?prompt("",t.url):this.$dispatch("setFlashError",e)}).error(function(t){this.$dispatch("setFlashError",e)})}}}},function(e,t){e.exports="<div class=btn-group> <button type=button class=\"btn dropdown-toggle\" data-toggle=dropdown aria-haspopup=true aria-expanded=false> {{ translate('cp.user_options') }}&nbsp; <span class=caret></span> </button> <ul class=dropdown-menu> <li> <a href=\"\" @click.prevent=sendResetEmail> {{ status == 'pending' ? translate('cp.send_activation_email') : translate('cp.send_password_reset_email') }} </a> </li> <li v-if=\"can('super')\"> <a href=\"\" @click.prevent=copyResetLink> {{ status == 'pending' ? translate('cp.copy_activation_link') : translate('cp.copy_password_reset_link') }} </a> </li> </ul> </div> "},function(e,t,i){var s,n,a={};i(362),s=i(363),n=i(364),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["locale","locales","status","allowStatuses"],data:function(){return{isShowingLocales:!1}},computed:{singleLocale:function(){return 1===this.locales.length},multipleLocales:function(){return!this.singleLocale},currentLocaleLabel:function(){return e.find(this.locales,{name:this.locale}).label}},methods:{statusClass:function(e){return this.allowStatuses?e.is_published?"icon-status-live":"icon-status-hidden":"icon-status-live"}}}}.call(t,i(1))},function(e,t){e.exports=' <div class=mr-2> <template v-if="singleLocale && allowStatuses"> <button class="btn btn-default" @click.prevent="status = !status"> <span class="mr-8 icon-status {{ status ? \'icon-status-live\' : \'icon-status-hidden\' }}"></span> {{ status ? translate(\'cp.published\') : translate(\'cp.draft\') }} </button> </template> <div class=locale-status-field :class="{ open: isShowingLocales }" v-if=multipleLocales> <button class="btn btn-default dropdown-toggle" @click.prevent="isShowingLocales = !isShowingLocales"> <span class="mr-8 icon-status {{ status ? \'icon-status-live\' : \'icon-status-hidden\' }}"></span> {{ currentLocaleLabel }} </button> <div class=dropdown-menu> <div class=locale-item v-for="locale in locales"> <template v-if=locale.is_active> <span v-if=!allowStatuses class="icon-status icon-status-live"></span> {{ locale.label }} <toggle-fieldtype v-if=allowStatuses :data.sync=status></toggle-fieldtype> </template> <template v-else> <span class="icon-status {{ statusClass(locale) }}"></span> <a :href=locale.url>{{ locale.label }}</a> </template> </div> </div> </div> </div> '},function(e,t,i){var s,n,a={};s=i(366),n=i(367),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{PublishFields:i(15)},props:{section:Object,fieldset:Object,data:Object,errors:Object,hiddenFields:Array,autofocus:Boolean},computed:{handle:function(){return this.section.handle},fields:function(){return this.section.fields}}}},function(e,t){e.exports=' <div class="card p-0"> <div class=card-body> <publish-fields :fields=fields :data.sync=data :errors=errors :hidden-fields=hiddenFields :autofocus=autofocus></publish-fields> </div> </div> '},function(e,t){e.exports=' <div class="content-type-{{ contentType }}"> <div class=publish-form id=publish-form> <div class="publish-errors alert alert-danger" v-if=hasErrors> <ul> <li v-for="error in errors">{{ error }}</li> </ul> </div> <div class="flex flex-wrap items-center w-full sticky" id=publish-controls> <h1 class="w-full my-1 text-center lg:text-left lg:flex-1"> <span>{{ title }}</span> </h1> <div class="controls flex flex-wrap items-center w-full lg:w-auto justify-center"> <div class="mr-2 my-1 fs-13 opacity-50" v-if="! canEdit"> <span class="icon icon-lock"></span> {{ translate(\'cp.read_only_mode\') }} </div> <status-field class=my-1 v-if=shouldShowStatus :locale=locale :locales=locales :allow-statuses=allowStatuses :status.sync=formData.status></status-field> <user-options v-if="isUser && !isNew" :username=slug :status=contentData.status class=mr-2></user-options> <div class="btn-group my-1 mr-2" v-if=$parent.isPublishPage> <template v-if=staticCachingEnabled> <a href="{{ url }}" target=_blank class=btn>{{ translate(\'cp.visit_url\') }}</a> </template> <template v-else> <button type=button class=btn @click.prevent=$parent.preview>{{ translate(\'cp.sneak_peek\') }}</button> <button type=button class="btn dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <span class=caret></span> <span class=sr-only>{{ translate(\'cp.toggle_dropdown\') }}</span> </button> <ul class=dropdown-menu> <li><a href="{{ url }}" target=_blank>{{ translate(\'cp.visit_url\') }}</a></li> </ul> </template> </div> <div class="btn-group btn-group-primary my-1" v-if=canEdit> <button v-if="! continuing && ! anothering" type=button class="btn btn-primary" @click=publishWithoutContinuing :disabled=saving>{{ translate(\'cp.save\') }}</button> <button v-if=continuing type=button class="btn btn-primary" @click=publishAndContinue :disabled=saving>{{ translate(\'cp.save_and_continue\') }}</button> <button v-if=anothering type=button class="btn btn-primary" @click=publishAndAnother :disabled=saving>{{ translate(\'cp.save_and_another\') }}</button> <button type=button class="btn btn-primary dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false :disabled=saving> <span class=caret></span> <span class=sr-only>{{ translate(\'cp.toggle_dropdown\') }}</span> </button> <ul class=dropdown-menu> <li v-if="! continuing"><a id=publish-continue @click=publishAndContinue>{{ translate(\'cp.save_and_continue\') }}</a></li> <li v-if="continuing || anothering"><a @click=publishWithoutContinuing>{{ translate(\'cp.save\') }}</a></li> <li v-if="! anothering"><a @click=publishAndAnother>{{ translate(\'cp.save_and_another\') }}</a></li> </ul> </div> </div> </div> <div :class="[ \'w-full\', { \'px-1 md:px-3\': !isSneakPeeking } ]"> <div :class="[ \'publish-tabs tabs\', { \'mb-2\': !isSneakPeeking } ]" v-show="mainSections.length > 1"> <a v-for="section in mainSections" :class="{ \'active\': activeSection === section.handle, \'has-error\': sectionHasError(section.handle) }" @click="activeSection = section.handle" v-text=sectionDisplay(section)> </a> </div> <div class="flex justify-between"> <div class=w-full> <publish-section v-for="(i, section) in mainSections" v-show="activeSection === section.handle" :section=section :fieldset=fieldset :errors=errors :hidden-fields=hiddenFields :data.sync=formData.fields :autofocus="i === 0"></publish-section> </div> <div class="publish-sidebar ml-32" v-show=shouldShowSidebar> <publish-section :section=sidebarSection :fieldset=fieldset :errors=errors :hidden-fields=hiddenFields :data.sync=formData.fields></publish-section> </div> </div> </div> </div> </div> '},function(e,t,i){var s,n,a={};s=i(370),n=i(374),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:{limit:Number,src:String},data:function(){return{items:[],query:"",current:-1,loading:!1}},components:{"typeahead-input":i(371)},computed:{hasItems:function(){return this.items.length>0},isEmpty:function(){return!this.query&&!this.loading},isDirty:function(){return!!this.query&&!this.loading}},methods:{update:function(){this.query?(this.loading=!0,this.$http.get(this.src,Object.assign({q:this.query},this.data)).success(function(e){this.query&&(this.items=this.limit?e.slice(0,this.limit):e,this.current=-1,this.loading=!1)}.bind(this))):this.reset()},reset:function(){this.items=[],this.query="",this.loading=!1},setActive:function(e){this.current=e},isActive:function(e){return this.current==e},focus:function(){e("#global-search").focus()},hit:function(){this.hasItems&&(window.location.href=this.items[this.current].edit_url)},up:function(){this.current>0&&this.current--},down:function(){this.current<this.items.length-1&&this.current++}},ready:function(){this.$watch("query",function(e,t){this.update()})}}}.call(t,i(2))},function(e,t,i){var s,n,a={};s=i(372),n=i(373),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["query","onUp","onDown","onHit","onReset"],methods:{up:function(){this.onUp()},down:function(){this.onDown()},hit:function(){this.onHit()},reset:function(){this.onReset()}}}},function(e,t){e.exports=" <input type=text autocomplete=off v-model=query @keydown.up=up @keydown.down=down @keydown.enter=hit @keydown.esc=reset @blur=reset placeholder=\"{{ translate('cp.search') }}...\"/> "},function(e,t){e.exports=' <div> <div id=typeahead v-cloak :class="{\'dirty\': isDirty}"> <div class=state-container> <i class="icon icon-magnifying-glass" @click=focus></i> </div> <typeahead-input class="search alt" id=global-search :query.sync=query :on-up=up :on-down=down :on-hit=hit :on-reset=reset @keyup.esc=reset></typeahead-input> <i class="icon icon-cross" v-show="isDirty || loading" @click=reset></i> <ul v-show=hasItems> <li v-for="item in items" :class="{\'active\': isActive($index)}" @mousedown=hit @mousemove=setActive($index)> <span class=title v-html=item.title></span> <span class=url v-html=item.url></span> </li> </ul> </div> </div> '},function(e,t,i){e.exports={components:{permissions:i(376),"license-key":i(378),settings:i(380),user:i(383),login:i(385)},props:["cpUrl"],data:function(){return{steps:{permissions:{label:"Permissions",status:"pending"},licenseKey:{label:"License Key",status:"pending"},settings:{label:"Settings",status:"pending"},user:{label:"Create a User",status:"pending"},login:{label:"Log in",status:"pending"}},currentStep:"permissions",userId:null,cleanupFailed:!1}},methods:{complete:function(){this.$http.get("/installer/complete").success(function(e){e.success?window.location=this.cpUrl:this.cleanupFailed=!0})},url:function(e){var t=Statamic.cpRoot.split("/");return t.pop(),t.join("/")+"/installer/"+e}},events:{"permissions.status":function(e){this.steps.permissions.status=e},"permissions.complete":function(){this.currentStep="licenseKey"},"licensekey.complete":function(){this.steps.licenseKey.status="success",this.currentStep="settings"},"settings.complete":function(){this.steps.settings.status="success",this.currentStep="user"},"user.complete":function(e){this.steps.user.status="success",this.userId=e,this.currentStep="login"},"login.complete":function(){this.complete()}},ready:function(){}}},function(e,t,i){e.exports={template:i(377),data:function(){return{loading:!0,success:null,unwritable:[]}},computed:{failure:function(){return!this.loading&&!this.success}},ready:function(){this.$http.get(this.$parent.url("permissions")).success(function(e){this.success=e.success,this.unwritable=e.unwritable,this.loading=!1,this.success?(this.$dispatch("permissions.status","success"),setTimeout(function(){this.$dispatch("permissions.complete")}.bind(this),1e3)):this.$dispatch("permissions.status","failure")})}}},function(e,t){e.exports="<div class=card> <div class=head> <h1>{{ translate_choice('cp.permissions', 2) }}</h1> </div> <hr> <div v-if=loading class=\"loading loading-basic\"> <span class=\"icon icon-circular-graph animation-spin\"></span> {{ translate('cp.checking_folder_permissions') }} </div> <div v-if=failure> <p>{{ translate('cp.folders_unwritable') }}</p> <ul> <li v-for=\"path in unwritable\"><code>{{ path }}</code></li> </ul> </div> <template v-if=success> <p>{{ translate('cp.folders_permission_valid') }}</p> </template> </div> "},function(e,t,i){e.exports={template:i(379),data:function(){return{loading:!0,valid:!1,key:null,keySubmitted:!1}},computed:{licenseKeyInstructions:function(){return translate("cp.license_key_instructions",{licenses:"https://account.statamic.com/licenses",buy_license:"https://store.statamic.com"})}},methods:{continue:function(){this.$dispatch("licensekey.complete")},validate:function(){this.loading=!0,this.$http.post(this.$parent.url("license"),{key:this.key}).success(function(e){this.success=e.success,this.key=e.key,this.loading=!1,e.key&&(this.keySubmitted=!0),this.success&&(this.valid=!0,this.$dispatch("licensekey.status","success"),setTimeout(function(){this.continue()}.bind(this),1e3))})}},ready:function(){this.validate()}}},function(e,t){e.exports="<div class=card> <div class=head> <h1>{{ translate('cp.license_key') }}</h1> </div> <hr> <div v-if=loading class=\"loading loading-basic\"> <span class=\"icon icon-circular-graph animation-spin\"></span> {{ translate('cp.checking_license_key') }} </div> <p v-if=valid>{{ translate('cp.license_valid') }}</p> <template v-if=\"!loading && !valid\"> <p v-html=licenseKeyInstructions></p> <div class=form-group> <p v-if=\"!valid && keySubmitted\" class=license-error> <small class=help-block>{{ translate('cp.license_invalid') }}</small> </p> <div class=row> <div class=col-sm-9> <input type=text class=form-control v-model=key /> </div> <div class=col-sm-3> <button class=\"btn btn-primary btn-block\" @click=validate :disabled=!key>{{ translate('cp.save') }}</button> </div> </div> </div> <hr> <div class=trial> <a href=\"\" @click.prevent=continue class=btn>{{ translate('cp.continue_in_trial_mode') }}</a> <a href=https://statamic.com/try class=what target=_blank>{{ translate('cp.whats_this') }}</a> </div> </template> </div> "},function(e,t,i){(function(t){e.exports={template:i(381),props:["timezone"],data:function(){return{loading:!1,success:null,debug:!1,locales:[{locale:"en",full:"en_US",name:"English",url:document.location.origin+"/"}],timezones:this.getTimezones()}},computed:{formData:function(){return{debug:this.debug,locales:this.locales,timezone:this.timezone[0]}}},methods:{submit:function(){this.loading=!0,this.$http.post(this.$parent.url("settings"),this.formData).success(function(e){this.loading=!1,this.success=e.success,this.success&&setTimeout(function(){this.$dispatch("settings.complete")}.bind(this),1e3)})},getTimezones:function(){var e=[];return t.each(i(382),function(t){e.push({text:t,value:t})}),e}}}}).call(t,i(1))},function(e,t){e.exports="<div class=\"card install-settings\"> <div class=head> <h1>{{ translate_choice('cp.settings', 2) }}</h1> </div> <hr> <template v-if=!success> <div class=form-group> <label>{{ translate('cp.locales_and_urls') }}</label> <small class=help-block> {{ translate('cp.settings_locales_instructions') }} </small> <locale_settings-fieldtype :data=locales :index-php-warning=true></locale_settings-fieldtype> </div> <div class=form-group> <label>{{ translate('cp.debug_mode') }}</label> <small class=help-block> {{ translate('cp.settings_debug_mode_instructions') }} </small> <toggle-fieldtype :data.sync=debug></toggle-fieldtype> </div> <div class=form-group> <label>{{ translate('cp.timezone') }}</label> <suggest-fieldtype :data.sync=timezone :suggestions-prop=timezones :config='{ \"max_items\": 1 }'></suggest-fieldtype> </div> <button class=\"btn btn-primary\" @click=submit :disabled=loading>{{ translate('cp.save') }}</button> </template> <template v-if=success> <p>{{ translate('cp.settings_updated') }}</p> </template> </div> "},function(e,t){e.exports=["UTC","Africa/Abidjan","Africa/Accra","Africa/Addis_Ababa","Africa/Algiers","Africa/Asmara","Africa/Bamako","Africa/Bangui","Africa/Banjul","Africa/Bissau","Africa/Blantyre","Africa/Brazzaville","Africa/Bujumbura","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/Conakry","Africa/Dakar","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Douala","Africa/El_Aaiun","Africa/Freetown","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Kigali","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Lome","Africa/Luanda","Africa/Lubumbashi","Africa/Lusaka","Africa/Malabo","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Africa/Mogadishu","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Niamey","Africa/Nouakchott","Africa/Ouagadougou","Africa/Porto-Novo","Africa/Sao_Tome","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Anguilla","America/Antigua","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Aruba","America/Asuncion","America/Atikokan","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Cayenne","America/Cayman","America/Chicago","America/Chihuahua","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Dominica","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Fort_Nelson","America/Fortaleza","America/Glace_Bay","America/Godthab","America/Goose_Bay","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Inuvik","America/Iqaluit","America/Jamaica","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Kralendijk","America/La_Paz","America/Lima","America/Los_Angeles","America/Lower_Princes","America/Maceio","America/Managua","America/Manaus","America/Marigot","America/Martinique","America/Matamoros","America/Mazatlan","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Montserrat","America/Nassau","America/New_York","America/Nipigon","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Ojinaga","America/Panama","America/Pangnirtung","America/Paramaribo","America/Phoenix","America/Port-au-Prince","America/Port_of_Spain","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rainy_River","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Sitka","America/St_Barthelemy","America/St_Johns","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Thunder_Bay","America/Tijuana","America/Toronto","America/Tortola","America/Vancouver","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/McMurdo","Antarctica/Palmer","Antarctica/Rothera","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Arctic/Longyearbyen","Asia/Aden","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Atyrau","Asia/Baghdad","Asia/Bahrain","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Chita","Asia/Choibalsan","Asia/Colombo","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kathmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Kuwait","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Muscat","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Phnom_Penh","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qyzylorda","Asia/Riyadh","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ulaanbaatar","Asia/Urumqi","Asia/Ust-Nera","Asia/Vientiane","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faroe","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/St_Helena","Atlantic/Stanley","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Currie","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/Perth","Australia/Sydney","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belgrade","Europe/Berlin","Europe/Bratislava","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Busingen","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Guernsey","Europe/Helsinki","Europe/Isle_of_Man","Europe/Istanbul","Europe/Jersey","Europe/Kaliningrad","Europe/Kiev","Europe/Kirov","Europe/Lisbon","Europe/Ljubljana","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Mariehamn","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Oslo","Europe/Paris","Europe/Podgorica","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/San_Marino","Europe/Sarajevo","Europe/Saratov","Europe/Simferopol","Europe/Skopje","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Ulyanovsk","Europe/Uzhgorod","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zagreb","Europe/Zaporozhye","Europe/Zurich","Indian/Antananarivo","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Comoro","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Mayotte","Indian/Reunion","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Midway","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Saipan","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Wake","Pacific/Wallis"]},function(e,t,i){e.exports={template:i(384),data:function(){return{submitted:!1,loading:!1,success:null,username:null,password:null,email:null,firstName:null,lastName:null,bio:null}},computed:{submitDisabled:function(){return!!this.loading||!(this.username&&this.password&&this.email&&this.firstName&&this.lastName)}},methods:{submit:function(){this.loading=!0,this.submitted=!0,this.$http.post(this.$parent.url("user"),{username:this.username,password:this.password,email:this.email,first_name:this.firstName,last_name:this.lastName,bio:this.bio}).success(function(e){this.loading=!1,this.success=e.success,this.success&&setTimeout(function(){this.$dispatch("user.complete",e.id)}.bind(this),1e3),this.login(e.id)})},login:function(e){this.loggingIn=!0,this.$http.post(this.$parent.url("login"),{id:e}).success(function(e){this.loggedIn=!0,e.success&&setTimeout(function(){this.$dispatch("user.complete")}.bind(this),1e3)})}}}},function(e,t){e.exports="<div class=\"card install-user\"> <div class=head> <h1>{{ translate('cp.create_a_user') }}</h1> </div> <hr> <template v-if=!success> <div class=\"alert alert-danger\" v-if=\"submitted && !loading && !success\"> <p>{{ error }}</p> </div> <div class=form-group> <label>{{ translate('cp.name') }}</label> <div class=row> <div class=col-md-6> <small class=help-block>{{ translate('cp.first_name') }}</small> <input type=text class=form-control v-model=firstName /> </div> <div class=col-md-6> <small class=help-block>{{ translate('cp.last_name') }}</small> <input type=text class=form-control v-model=lastName /> </div> </div> </div> <div class=form-group> <label>{{ translate('cp.username') }}</label> <input type=text class=form-control v-model=username /> </div> <div class=form-group> <label>{{ translate('cp.email') }}</label> <input type=email class=form-control v-model=email /> </div> <div class=form-group> <label>{{ translate_choice('cp.passwords', 1) }}</label> <input type=password class=form-control v-model=password /> </div> <div class=form-group> <label>{{ translate('cp.bio') }}</label> <small class=help-block>{{ translate('cp.user_bio_instructions') }}</small> <textarea class=form-control v-model=bio></textarea> </div> <button class=\"btn btn-primary\" @click=submit :disabled=submitDisabled>{{ translate('create_user') }}</button> </template> <template v-if=success> <p>{{ translate('cp.user_account_created') }}</p> </template> </div> "},function(e,t,i){e.exports={template:i(386),props:["userId"],data:function(){return{loggedIn:!1}},ready:function(){this.$http.post(this.$parent.url("login"),{id:this.userId}).success(function(e){e.success&&(this.loggedIn=!0,setTimeout(function(){this.$dispatch("login.complete")}.bind(this),1e3))})}}},function(e,t){e.exports="<div class=card> <div class=head> <h1>{{ translate('cp.login') }}</h1> </div> <hr> <div v-if=!loggedIn class=\"loading loading-basic\"> <span class=\"icon icon-circular-graph animation-spin\"></span> {{ translate('cp.logging_in') }} </div> <p v-if=loggedIn>{{ translate('cp.logged_in_taking_you_to_cp') }}</p> </div> "},function(e,t,i){(function(t,i){e.exports={props:{versionTo:{type:String,default:null},versionFrom:{type:String,default:null}},data:function(){return{started:!1,backingUp:!1,backedUp:!1,backupFailed:!1,backupMessage:null,downloading:!1,downloaded:!1,downloadFailed:!1,downloadMessage:null,installing:!1,unzipping:!1,unzipped:!1,unzippingFailed:!1,installingDependencies:!1,installedDependencies:!1,installingDependenciesFailed:!1,swapping:!1,swapped:!1,swappingFailed:!1,updated:!1,cleaningUp:!1,cleanedUp:!1,cleanupFailed:!1,errors:[]}},computed:{readyToInstall:function(){return this.backedUp&&this.downloaded},hasErrors:function(){return this.errors.length>0}},watch:{updated:function(e){e&&this.$els.audio.play()}},methods:{start:function(){this.started=!0,this.backup(),this.download()},backup:function(){this.backingUp=!0,this.$http.post(cp_url("system/updater/backup")).success(function(e){this.backingUp=!1,this.backedUp=!0,this.backupMessage=e.message,this.install()}).error(function(e){this.backingUp=!1,this.backupFailed=!0,this.womp(e)})},download:function(){this.downloading=!0,this.$http.post(cp_url("system/updater/download"),{version:this.versionTo}).success(function(e){this.downloading=!1,this.downloaded=!0,this.downloadMessage=e.message,this.install()}).error(function(e){this.downloading=!1,this.downloadFailed=!0,this.womp(e)})},install:function(){this.readyToInstall&&(this.installing=!0,this.unzip())},unzip:function(){this.unzipping=!0,this.$http.post(cp_url("system/updater/unzip"),{version:this.versionTo}).success(function(){this.unzipping=!1,this.unzipped=!0,this.composer()}).error(function(e){this.unzipping=!1,this.unzipped=!1,this.unzippingFailed=!0,this.womp(e)})},composer:function(){this.installingDependencies=!0,this.$http.post(cp_url("system/updater/composer")).success(function(){this.installingDependencies=!1,this.installedDependencies=!0,this.swap()}).error(function(e){this.installingDependencies=!1,this.installingDependenciesFailed=!1,this.womp(e)})},swap:function(){this.swapping=!0,this.$http.post(cp_url("system/updater/swap")).success(function(){this.swapping=!1,this.swapped=!0,this.cleanUp()}).error(function(e){this.swapping=!1,this.swappingFailed=!0,this.womp(e)})},cleanUp:function(){this.updated=!0,this.cleaningUp=!0,this.$root.version=this.version,t(".nav-main .update").hide(),this.$http.post(cp_url("system/updater/clean"),{version:this.versionTo,oldVersion:this.versionFrom}).success(function(){this.cleaningUp=!1,this.cleanedUp=!0}).error(function(e){this.cleaningUp=!1,this.cleanUpFailed=!0,this.womp(e)})},womp:function(e){var t=this;i.each(e.errors,function(e){t.errors.push(e)})}}}}).call(t,i(2),i(1))},function(e,t,i){(function(t){e.exports={props:["importer"],data:function(){return{exporting:!1,exported:!1,exportFailed:!1,exportError:null,importing:!1,imported:!1,summary:null,showAllPages:!1,showCollections:[],showTaxonomies:[],showGlobals:[]}},computed:{totalPages:function(){return Object.keys(this.summary.pages).length}},ready:function(){this.summary=Statamic.ImportSummary},methods:{import:function(){this.importing=!0,this.$http.post(cp_url("import/import"),{summary:this.summary}).success(function(e){this.importing=!1,this.imported=!0,console.log(e)})},hasDuplicates:function(e){return!!this.duplicateCount(e)},duplicateCount:function(e){var i=0;return t.each(e,function(e){e.exists&&i++}),i},uncheckDuplicates:function(e){t.each(e,function(e){e.exists&&(e._checked=!1)})},size:function(e){return t.size(e)},showCollection:function(e){this.showCollections.push(e),t.uniq(this.showCollections)},hideCollection:function(e){this.showCollections=t.reject(this.showCollections,function(t){return t===e})},shouldShowCollection:function(e){return t.contains(this.showCollections,e)},showTaxonomy:function(e){this.showTaxonomies.push(e),t.uniq(this.showTaxonomies)},hideTaxonomy:function(e){this.showTaxonomies=t.reject(this.showTaxonomies,function(t){return t===e})},shouldShowTaxonomy:function(e){return t.contains(this.showTaxonomies,e)},showGlobal:function(e){this.showGlobals.push(e),t.uniq(this.showGlobals)},hideGlobal:function(e){this.showGlobals=t.reject(this.showGlobals,function(t){return t===e})},shouldShowGlobal:function(e){return t.contains(this.showGlobals,e)}}}}).call(t,i(1))},function(e,t){e.exports={mixins:[Dossier],props:["get","delete","keyword","canManage","canDelete"],data:function(){return{sort:"title",sortOrder:"asc",ajax:{get:this.get,delete:this.delete},tableOptions:{sort:this.sort,sortOrder:"asc",partials:{}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>";this.canDelete&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("taxonomies/get")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-documents"></span>\n                            {{ item.taxonomies }}\n                        </div>\n                        <a :href="item.terms_url">{{ item.title }}</a>\n\n                        <a href="{{ item.create_url }}" v-if="can(\'taxonomies:\'+item.id+\':create\')"\n                           class="btn btn-icon btn-primary pull-right"><span class="icon icon-plus"></span>\n                        </a>'}}}},ready:function(){this.can("super")&&this.addActionPartial()},methods:{addActionPartial:function(){this.tableOptions.partials.actions="\n                <li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>\n            "}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("globals/get")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'<a :href="item.edit_url">{{ item.title }}</a>'}}}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("users/get"),delete:cp_url("users/delete")},tableOptions:{sort:"name",sortOrder:"asc",partials:{cell:"\n                        <span :class=\"{ 'has-status-icon': $index === 0 }\">\n                            <span v-if=\"$index === 0\" class=\"status status-{{ (item.status === 'active') ? 'live' : 'hidden' }}\"\n                                :title=\"(item.status === 'active') ? translate('cp.status_active') : translate('cp.status_pending')\"\n                            ></span>\n                            <a v-if=\"column.link\" :href=\"item.edit_url\" class=\"has-status-icon\">\n                                {{{ formatValue(item[column.value]) }}}\n                            </a>\n                            <template v-else>\n                                {{{ formatValue(item[column.value]) }}}\n                            </template>\n                        </span>"}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("users:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("users:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("users/groups/get"),delete:cp_url("users/groups/delete")},tableOptions:{sort:"title",sortOrder:"asc",partials:{cell:'\n                        <a v-if="$index === 0" :href="item.edit_url">\n                            {{ item[column.value] }}\n                        </a>\n                        <template v-else>\n                            {{ item[column.value] }}\n                        </template>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("users:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("users:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("users/roles/get"),delete:cp_url("users/roles/delete")},tableOptions:{sort:"title",sortOrder:"asc",partials:{cell:'\n                        <a v-if="$index === 0" :href="item.edit_url">\n                            {{ item[column.value] }}\n                        </a>\n                        <template v-else>\n                            {{ item[column.value] }}\n                        </template>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("users:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("users:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("fieldsets-json"),delete:cp_url("fieldsets/delete")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <a v-if="$index === 0" :href="item.edit_url" class="has-status-icon">\n                            <span class="status status-{{ (item.hidden) ? \'hidden\' : \'live\' }}"\n                                  v-tip :tip-text="(item.hidden) ? translate(\'cp.hidden\') : translate(\'cp.published\')"\n                            ></span>\n                            {{ item[column.value] }}\n                        </a>\n                        <template v-else>\n                            {{ item[column.value] }}\n                        </template>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("fieldsets:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("fieldsets:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],props:["get"],data:function(){return{sort:"datestamp",sortOrder:"desc",ajax:{get:this.get},tableOptions:{checkboxes:!1,sort:"datestamp",sortOrder:"desc",partials:{cell:'\n                        <a v-if="$index === 0" :href="item.edit_url">\n                            {{ item[column.value] }}\n                        </a>\n                        <template v-else>\n                            {{{ item[column.value] }}}\n                        </template>'}}}},ready:function(){this.can("super")&&this.addActionPartial()},methods:{addActionPartial:function(){this.tableOptions.partials.actions="\n                <li><a :href=\"item.delete_url\">{{ translate('cp.delete') }}</a></li>\n            "}}}},function(e,t,i){(function(t){var i={name:"permission",template:'\n        <div>\n            <input type="checkbox" :id="name" name="permissions[]" v-model="selectedPermissions" :value="name" :disabled="disabled" />\n            <label :for="name">{{ label }}</label>\n\n            <ul v-if="children" :class="{ \'disabled\': !selected }">\n                <li v-for="(key, value) in children">\n                    <permission :key="key"\n                                :value="value"\n                                :selected-permissions="selectedPermissions"\n                                :disabled="!selected"\n                    ></permission>\n                </li>\n            </ul>\n        </div>\n    ',props:["key","value","selectedPermissions","disabled"],computed:{name:function(){return this.hasChildren?this.key:this.value},label:function(){var e=this.name,t=e.match(/^.*\:(.*)\:.*$/);return t&&(e=t[0].replace(":"+t[1]+":",":*:")),translate("permissions."+e)},hasChildren:function(){return"string"!=typeof this.value},children:function(){return this.hasChildren?this.value:null},selected:function(){return t.contains(this.selectedPermissions,this.name)}},watch:{disabled:function(e){if(e){var i=t.indexOf(this.selectedPermissions,this.name);-1!==i&&this.selectedPermissions.splice(i,1)}}}};e.exports={components:{Permission:i},props:["permissions","selected","titles"],computed:{superSelected:function(){return-1!==t.indexOf(this.selected,"super")}},methods:{startsWith:function(e,t){return!e.indexOf(t)},title:function(e){var t=e.split(":");return this.titles[t[0]][t[1]]},label:function(e){return this.startsWith(e,"collections")?translate_choice("cp.collections",1)+": "+this.title(e):this.startsWith(e,"taxonomies")?translate_choice("cp.taxonomies",1)+": "+this.title(e):this.startsWith(e,"globals")?translate_choice("cp.globals",1)+": "+this.title(e):this.startsWith(e,"assets")?translate_choice("cp.asset_containers",2)+": "+this.title(e):translate("permissions.group_"+e)}}}}).call(t,i(1))},function(e,t){e.exports={props:{showEmailLogin:{default:!1}}}},function(e,t,i){var s,n,a={};s=i(400),n=i(401),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["username"],data:function(){return{show:!0,errors:[],password:null}},ready:function(){this.$http.get(cp_url("auth/token")).success(function(t){e.http.headers.common["X-CSRF-TOKEN"]=t}),this.$els.password.focus()},methods:{submit:function(){var e=this;this.$http.post(cp_url("auth/login"),{username:this.username,password:this.password}).success(function(t){e.errors=[],e.$notify.success(translate("cp.logged_in")),e.show=!1,e.$emit("closed")}).error(function(t){e.errors=t})}}}}.call(t,i(3))},function(e,t){e.exports=" <div> <modal :show=show class=modal-login> <template slot=header> {{ translate('cp.login_to_continue') }} </template> <template slot=body> <div class=form-group> <label :class=\"{ 'text-red': errors.password.length }\">{{ translate('cp.password_for', { username: this.username }) }} <i class=required>*</i></label> <input type=password name=password class=form-control v-model=password v-el:password @keydown.enter.prevent=submit /> <small class=\"block text-red mt-1\" v-if=errors.username.length>{{ errors.username[0] }}</small> <small class=\"block text-red mt-1\" v-if=errors.password.length>{{ errors.password[0] }}</small> </div> </template> <template slot=footer> <button @click.prevent=submit class=\"btn btn-primary\">{{ translate('cp.submit') }}</button> </template> </modal> </div> "},function(e,t,i){var s,n,a={};s=i(403),n=i(466),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{name:String,type:{type:String,default:function(){return"svg"}}},computed:{html:function(){return"div"===this.type?"<div style=\"background-image: url('"+resource_url("svg/"+this.name+".svg")+"')\"></div>":i(404)("./"+this.name+".svg")}}}},function(e,t,i){var s={"./array.svg":405,"./assets.svg":406,"./bard.svg":407,"./checkboxes.svg":408,"./collection.svg":409,"./collections.svg":410,"./date.svg":411,"./entries.svg":412,"./fieldset.svg":413,"./file-archive.svg":414,"./file-audio.svg":415,"./file-doc.svg":416,"./file-excel.svg":417,"./file-generic.svg":418,"./file-json.svg":419,"./file-layered.svg":420,"./file-pdf.svg":421,"./file-presentation.svg":422,"./file-video.svg":423,"./file-xml.svg":424,"./folder-search-empty.svg":425,"./folder.svg":426,"./form.svg":427,"./generic.svg":428,"./grid.svg":429,"./hidden.svg":430,"./integer.svg":431,"./list.svg":432,"./markdown.svg":433,"./pages.svg":434,"./partial.svg":435,"./picture.svg":436,"./radio.svg":437,"./redactor.svg":438,"./replicator.svg":439,"./revealer.svg":440,"./section.svg":441,"./select.svg":442,"./slug.svg":443,"./statamic-logo.svg":444,"./statamic-mark.svg":445,"./suggest.svg":446,"./table.svg":447,"./tabs.svg":448,"./tags.svg":449,"./taxonomy.svg":450,"./template.svg":451,"./text.svg":452,"./textarea.svg":453,"./theme.svg":454,"./time.svg":455,"./title.svg":456,"./toggle.svg":457,"./user-groups.svg":458,"./user-roles.svg":459,"./user_groups.svg":460,"./user_roles.svg":461,"./users.svg":462,"./video.svg":463,"./visit.svg":464,"./yaml.svg":465};function n(e){return i(a(e))}function a(e){var t=s[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}n.keys=function(){return Object.keys(s)},n.resolve=a,e.exports=n,n.id=404},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M15,12.5H7c-0.3,0-0.5,0.2-0.5,0.5v2c0,0.3,0.2,0.5,0.5,0.5h8c0.3,0,0.5-0.2,0.5-0.5v-2\n        C15.5,12.7,15.3,12.5,15,12.5z"/> <path class=st0 d="M15,7.5H7C6.7,7.5,6.5,7.7,6.5,8v2c0,0.3,0.2,0.5,0.5,0.5h8c0.3,0,0.5-0.2,0.5-0.5V8C15.5,7.7,15.3,7.5,15,7.5\n        z"/> <path class=st0 d=M9,0.5H1C0.7,0.5,0.5,0.7,0.5,1v2c0,0.3,0.2,0.5,0.5,0.5h8c0.3,0,0.5-0.2,0.5-0.5V1C9.5,0.7,9.3,0.5,9,0.5z /> <path class=st0 d=M4.5,3.5v1c0,0.6,0.4,1,1,1h3c0.6,0,1,0.4,1,1v1 /> <line class=st0 x1=11.5 y1=10.5 x2=11.5 y2=12.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d="M10,11.5H1c-0.3,0-0.5-0.2-0.5-0.5V1c0-0.3,0.2-0.5,0.5-0.5h9c0.3,0,0.5,0.2,0.5,0.5v10\n    C10.5,11.3,10.3,11.5,10,11.5z"/> <line class=st0 x1=10.5 y1=8.5 x2=0.5 y2=8.5 /> <path class=st0 d=M12.5,4.2L15.2,5c0.3,0.1,0.4,0.4,0.3,0.6l-3.2,9.5c-0.1,0.3-0.4,0.4-0.6,0.3l-7.2-2.4 /> <path class=st0 d=M3.5,8.5l2.8-4C6.6,4,7.4,4,7.8,4.5l2.7,3 /> <circle class=st0 cx=3.4 cy=3.4 r=1.1 /> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=16px viewBox="0 0 15 16" style="enable-background:new 0 0 15 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <rect x=0.5 y=0.5 class=st0 width=2 height=15 /> <path class=st0 d="M2.5,1c3.4,1.3,7,1.3,10.7,0.4c0.3-0.1,0.6,0,0.9,0.2s0.4,0.5,0.4,0.8C14,8.3,10.8,12.8,4.9,15.3\n        c-0.2,0.1-0.5,0.2-0.8,0.2H2.5"/> <path class=st0 d="M2.5,3.5c2.4,1.1,5,1.3,7.8,0.6c0.4-0.1,0.7,0,1,0.3c0.3,0.3,0.3,0.7,0.2,1c-1.2,3.3-3.4,5.7-6.5,7.4\n        C4.7,12.9,4.3,13,4,13H2.5"/> <line class=st0 x1=4.5 y1=4.2 x2=4.5 y2=12.9 /> <line class=st0 x1=6.5 y1=4.5 x2=6.5 y2=11.8 /> <line class=st0 x1=8.5 y1=4.4 x2=8.5 y2=10.1 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M4.5,6l2.2,3.1c0.2,0.3,0.5,0.4,0.8,0.4c0.3,0,0.6-0.1,0.8-0.4l7.2-8.6 /> <path class=st0 d=M14.5,7v6.5c0,1.1-0.9,2-2,2h-10c-1.1,0-2-0.9-2-2v-10c0-1.1,0.9-2,2-2H11 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=14px height=16px viewBox="0 0 14 16" style="enable-background:new 0 0 14 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M10,15.5h3c0.3,0,0.5-0.2,0.5-0.5v-3.3c0-0.1-0.1-0.3-0.1-0.4l-0.7-0.7c-0.1-0.1-0.2-0.1-0.4-0.1H10\n        c-0.3,0-0.5,0.2-0.5,0.5v4C9.5,15.3,9.7,15.5,10,15.5z"/> <path class=st0 d="M10,6.5h3c0.3,0,0.5-0.2,0.5-0.5V2.7c0-0.1-0.1-0.3-0.1-0.4l-0.7-0.7c-0.1-0.1-0.2-0.1-0.4-0.1H10\n        C9.7,1.5,9.5,1.7,9.5,2v4C9.5,6.3,9.7,6.5,10,6.5z"/> <line class=st0 x1=0.5 y1=0.5 x2=0.5 y2=1.5 /> <line class=st0 x1=0.5 y1=3.5 x2=0.5 y2=5.5 /> <line class=st0 x1=0.5 y1=7.5 x2=0.5 y2=9.5 /> <path class=st0 d=M0.5,11.5v1c0,0.6,0.4,1,1,1h1 /> <line class=st0 x1=4.5 y1=13.5 x2=6.5 y2=13.5 /> <line class=st0 x1=8.5 y1=13.5 x2=9.5 y2=13.5 /> <line class=st0 x1=0.5 y1=4.5 x2=2.5 y2=4.5 /> <line class=st0 x1=4.5 y1=4.5 x2=6.5 y2=4.5 /> <line class=st0 x1=8.5 y1=4.5 x2=9.5 y2=4.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M15.5,9.2c0-0.4-0.3-0.7-0.7-0.7H1.2c-0.4,0-0.7,0.3-0.7,0.7v5.7c0,0.4,0.3,0.7,0.7,0.7h13.7\n        c0.4,0,0.7-0.3,0.7-0.7V9.2z"/> <path class=st0 d=M1.5,8.5V4.7C1.5,4.3,1.8,4,2.2,4h5.6C8,4,8.2,4.1,8.3,4.3l0.8,1.2h4.3c0.4,0,0.7,0.3,0.7,0.7v2.4 /> <line class=st0 x1=6 y1=10.5 x2=10 y2=10.5 /> <path class=st0 d=M13.2,3.5V2.7c0-0.4-0.3-0.7-0.7-0.7H9.1L8.3,0.8C8.2,0.6,8,0.5,7.8,0.5H3c-0.4,0-0.7,0.3-0.7,0.7v0.7 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <path class=st0 d=M15.5,14.5c0,0.6-0.4,1-1,1h-13c-0.6,0-1-0.4-1-1v-11c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1V14.5z /> <line class=st0 x1=0.5 y1=6.5 x2=15.5 y2=6.5 /> <line class=st0 x1=4.5 y1=4 x2=4.5 y2=0.5 /> <line class=st0 x1=11.5 y1=4 x2=11.5 y2=0.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg class=stroke-current width=16px height=16px viewBox="0 0 16 16" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <g stroke=none stroke-width=1 fill=none fill-rule=evenodd stroke-linecap=round stroke-linejoin=round> <path d="M15.5004,12.5003 C15.5004,13.0523 15.0524,13.5003 14.5004,13.5003 L3.5004,13.5003 C2.9474,13.5003 2.5004,13.0523 2.5004,12.5003 L2.5004,1.5003 C2.5004,0.9473 2.9474,0.5003 3.5004,0.5003 L14.5004,0.5003 C15.0524,0.5003 15.5004,0.9473 15.5004,1.5003 L15.5004,12.5003 Z" stroke=currentColor></path> <path d="M13.5004,15.5003 L1.5004,15.5003 C0.9474,15.5003 0.5004,15.0523 0.5004,14.5003 L0.5004,2.5003" stroke=currentColor></path> <path d="M5.5004,4.5003 L12.5004,4.5003" stroke=currentColor></path> <path d="M5.5004,6.5003 L12.5004,6.5003" stroke=currentColor></path> <path d="M5.5004,8.5003 L10.5004,8.5003" stroke=currentColor></path> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d=M6,15.5H1.5c-0.6,0-1-0.4-1-1V10c0-0.6,0.4-1,1-1H6c0.6,0,1,0.4,1,1v4.5C7,15.1,6.6,15.5,6,15.5z /> <line class=st0 x1=0.5 y1=13 x2=7 y2=13 /> <path class=st0 d=M6,7H1.5c-0.6,0-1-0.4-1-1V1.5c0-0.6,0.4-1,1-1H6c0.6,0,1,0.4,1,1V6C7,6.6,6.6,7,6,7z /> <line class=st0 x1=0.5 y1=4.5 x2=7 y2=4.5 /> <path class=st0 d=M14.5,7H10C9.4,7,9,6.6,9,6V1.5c0-0.6,0.4-1,1-1h4.5c0.6,0,1,0.4,1,1V6C15.5,6.6,15.1,7,14.5,7z /> <line class=st0 x1=9 y1=4.5 x2=15.5 y2=4.5 /> <path class=st0 d=M14.5,15.5H10c-0.6,0-1-0.4-1-1V10c0-0.6,0.4-1,1-1h4.5c0.6,0,1,0.4,1,1v4.5C15.5,15.1,15.1,15.5,14.5,15.5z /> <line class=st0 x1=9 y1=13 x2=15.5 y2=13 /> </svg> '},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>2 - ZIP File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-1089.000000, -719.000000)"> <g id=ZIP-File transform="translate(1089.000000, 719.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-12 fill=#E9E9E0 fill-rule=evenodd></path> <polyline id=Fill-13 fill=#D9D7CA fill-rule=evenodd points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <polygon id=Fill-271 fill=#C8BDB8 fill-rule=evenodd points="20 42 22 42 22 55.94 20 55.94"></polygon> <polyline id=Fill-272 fill=#C8BDB8 fill-rule=evenodd points="24 23 24 21 22 21 22 19 20 19 20 21 18 21 18 23 20 23 20 25 18 25 18 27 20 27 20 29 18 29 18 31 20 31 20 34 22 34 22 31 24 31 24 29 22 29 22 27 24 27 24 25 22 25 22 23 24 23"></polyline> <polygon id=Fill-304 fill=#CBB292 fill-rule=evenodd points="17 34 25 34 25 42 17 42"></polygon> <polygon id=Stroke-305 stroke=#5E5F62 stroke-width=2 points="17 34 25 34 25 42 17 42"></polygon> <polygon id=Stroke-306 stroke=#5E5F62 stroke-width=2 points="25 37 17 37"></polygon> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>67 -Music File- (Flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-846.000000, -1073.000000)"> <g id=67--Music-File--(Flat) transform="translate(846.000000, 1073.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-294 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-295 fill=#EFEADD></path> <path d="M18,41.014 L18,41.014 C15.791,41.014 14,39.223 14,37.014 C14,34.805 15.791,33.014 18,33.014 L22,33.014 L22,37.014 C22,39.223 20.209,41.014 18,41.014" id=Fill-517 fill=#F38774></path> <path d="M21,34.014 L20.998,34.014 C20.446,34.013 19.999,33.565 20,33.012 L20.031,14.012 C20.032,13.595 20.291,13.223 20.682,13.077 C21.073,12.932 21.513,13.043 21.786,13.359 L25.94,18.143 C27.906,20.389 28.542,23.548 27.597,26.384 L26.984,28.317 C26.818,28.842 26.26,29.137 25.729,28.967 C25.202,28.8 24.911,28.239 25.078,27.711 L25.695,25.765 C26.422,23.586 25.936,21.174 24.433,19.456 L22.027,16.686 L22,33.016 C21.999,33.568 21.552,34.014 21,34.014" id=Fill-518 fill=#F38774></path> <path d="M36,49.014 L26,49.014 C25.447,49.014 25,48.567 25,48.014 C25,47.461 25.447,47.014 26,47.014 L36,47.014 C36.553,47.014 37,47.461 37,48.014 C37,48.567 36.553,49.014 36,49.014" id=Fill-520 fill=#D4D0BA></path> <path d="M31,53.014 L26,53.014 C25.447,53.014 25,52.567 25,52.014 C25,51.461 25.447,51.014 26,51.014 L31,51.014 C31.553,51.014 32,51.461 32,52.014 C32,52.567 31.553,53.014 31,53.014" id=Fill-521 fill=#D4D0BA></path> <path d="M36,53.014 L35,53.014 C34.447,53.014 34,52.567 34,52.014 C34,51.461 34.447,51.014 35,51.014 L36,51.014 C36.553,51.014 37,51.461 37,52.014 C37,52.567 36.553,53.014 36,53.014" id=Fill-522 fill=#D4D0BA></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-486.000000, -953.000000)"> <g id=54--DOCX-File--(document,-paper,-write,-note,-flat) transform="translate(486.000000, 953.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-266 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-267 fill=#EFEADD></path> <path d="M8.7208,24.014 L9.9998,20.176 L11.2788,24.014 L8.7208,24.014 Z M14.9488,28.698 L10.9488,16.698 C10.8128,16.289 10.4308,16.014 9.9998,16.014 C9.5698,16.014 9.1878,16.289 9.0518,16.698 L5.0518,28.698 C4.8768,29.222 5.1598,29.788 5.6838,29.962 C6.2108,30.137 6.7738,29.854 6.9488,29.33 L8.0538,26.014 L11.9458,26.014 L13.0518,29.33 C13.1908,29.749 13.5808,30.014 13.9998,30.014 C14.1048,30.014 14.2118,29.997 14.3168,29.962 C14.8408,29.788 15.1238,29.222 14.9488,28.698 L14.9488,28.698 Z" id=Fill-417 fill=#71C385></path> <path d="M36,18.014 L18,18.014 C17.448,18.014 17,17.567 17,17.014 C17,16.461 17.448,16.014 18,16.014 L36,16.014 C36.552,16.014 37,16.461 37,17.014 C37,17.567 36.552,18.014 36,18.014" id=Fill-418 fill=#D4D0BA></path> <path d="M36,24.014 L18,24.014 C17.448,24.014 17,23.567 17,23.014 C17,22.461 17.448,22.014 18,22.014 L36,22.014 C36.552,22.014 37,22.461 37,23.014 C37,23.567 36.552,24.014 36,24.014" id=Fill-419 fill=#D4D0BA></path> <path d="M36,30.014 L18,30.014 C17.448,30.014 17,29.567 17,29.014 C17,28.461 17.448,28.014 18,28.014 L36,28.014 C36.552,28.014 37,28.461 37,29.014 C37,29.567 36.552,30.014 36,30.014" id=Fill-420 fill=#D4D0BA></path> <path d="M36,36.014 L6,36.014 C5.448,36.014 5,35.567 5,35.014 C5,34.461 5.448,34.014 6,34.014 L36,34.014 C36.552,34.014 37,34.461 37,35.014 C37,35.567 36.552,36.014 36,36.014" id=Fill-421 fill=#D4D0BA></path> <path d="M36,42.014 L6,42.014 C5.448,42.014 5,41.567 5,41.014 C5,40.461 5.448,40.014 6,40.014 L36,40.014 C36.552,40.014 37,40.461 37,41.014 C37,41.567 36.552,42.014 36,42.014" id=Fill-422 fill=#D4D0BA></path> <path d="M36,48.014 L6,48.014 C5.448,48.014 5,47.567 5,47.014 C5,46.461 5.448,46.014 6,46.014 L36,46.014 C36.552,46.014 37,46.461 37,47.014 C37,47.567 36.552,48.014 36,48.014" id=Fill-423 fill=#D4D0BA></path> </g> </g> </g> </svg> '},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>19 - XLS File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-249.000000, -599.000000)"> <g id=XLS-File transform="translate(249.000000, 599.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-72 fill=#E9E9E0></path> <polyline id=Fill-73 fill=#D9D7CA points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <path d="M41.537,56 L1.463,56 C0.655,56 0,55.345 0,54.537 L0,39 L43,39 L43,54.537 C43,55.345 42.345,56 41.537,56" id=Fill-159 fill=#91CDA0></path> <polyline id=Fill-160 fill=#FFFFFF points="13.879 48.106 16.436 53 14.535 53 12.936 49.199 12.799 49.199 11.076 53 9.176 53 11.732 48.106 9.012 42.924 10.885 42.924 12.662 47.025 12.799 47.025 14.727 42.924 16.6 42.924 13.879 48.106"></polyline> <polyline id=Fill-161 fill=#FFFFFF points="20.537 42.924 20.537 51.756 25.172 51.756 25.172 53 18.869 53 18.869 42.924 20.537 42.924"></polyline> <path d="M32.541,50.238 C32.541,50.603 32.466,50.956 32.315,51.298 C32.165,51.64 31.953,51.94 31.68,52.2 C31.406,52.46 31.069,52.667 30.668,52.822 C30.267,52.977 29.811,53.055 29.301,53.055 C29.082,53.055 28.856,53.043 28.624,53.021 C28.392,52.998 28.157,52.959 27.92,52.904 C27.683,52.85 27.457,52.774 27.243,52.679 C27.029,52.583 26.844,52.467 26.69,52.33 L26.977,51.154 C27.104,51.227 27.266,51.298 27.462,51.366 C27.658,51.435 27.86,51.498 28.07,51.558 C28.28,51.617 28.489,51.665 28.699,51.701 C28.909,51.737 29.105,51.756 29.287,51.756 C29.843,51.756 30.269,51.626 30.565,51.366 C30.861,51.106 31.01,50.722 31.01,50.211 C31.01,49.901 30.905,49.637 30.695,49.418 C30.485,49.199 30.224,49.001 29.909,48.823 C29.595,48.646 29.255,48.468 28.891,48.29 C28.526,48.112 28.184,47.902 27.865,47.661 C27.546,47.42 27.282,47.135 27.072,46.807 C26.862,46.479 26.758,46.068 26.758,45.576 C26.758,45.13 26.84,44.733 27.004,44.387 C27.168,44.04 27.389,43.746 27.667,43.505 C27.945,43.264 28.269,43.079 28.638,42.951 C29.007,42.823 29.397,42.76 29.807,42.76 C30.226,42.76 30.649,42.799 31.078,42.876 C31.506,42.953 31.853,43.079 32.117,43.252 C32.063,43.37 31.999,43.5 31.926,43.642 C31.853,43.783 31.784,43.915 31.721,44.038 C31.657,44.161 31.602,44.264 31.557,44.346 C31.511,44.428 31.483,44.474 31.475,44.482 C31.42,44.455 31.358,44.419 31.29,44.373 C31.222,44.327 31.124,44.282 30.996,44.236 C30.868,44.19 30.7,44.159 30.49,44.141 C30.28,44.122 30.012,44.127 29.684,44.154 C29.501,44.173 29.328,44.225 29.164,44.312 C29,44.398 28.854,44.505 28.727,44.633 C28.599,44.761 28.499,44.904 28.426,45.063 C28.353,45.223 28.316,45.376 28.316,45.521 C28.316,45.886 28.421,46.18 28.631,46.403 C28.84,46.627 29.1,46.822 29.41,46.991 C29.72,47.16 30.057,47.324 30.422,47.483 C30.786,47.643 31.126,47.837 31.44,48.065 C31.755,48.292 32.017,48.577 32.227,48.919 C32.436,49.261 32.541,49.7 32.541,50.238" id=Fill-162 fill=#FFFFFF></path> <path d="M17,16 L17,12 L5,12 L5,34 L38,34 L38,16 L17,16 L17,16 Z M7,14 L15,14 L15,16 L7,16 L7,14 Z M7,18 L15,18 L15,20 L7,20 L7,18 Z M7,22 L15,22 L15,24 L7,24 L7,22 Z M7,26 L15,26 L15,28 L7,28 L7,26 Z M7,30 L15,30 L15,32 L7,32 L7,30 Z M17,30 L36,30 L36,32 L17,32 L17,30 Z M17,26 L36,26 L36,28 L17,28 L17,26 Z M17,22 L36,22 L36,24 L17,24 L17,22 Z M17,18 L36,18 L36,20 L17,20 L17,18 Z" id=Fill-163 fill=#C8BDB8></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>51 -File- (Flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-126.000000, -953.000000)"> <g id=51--File--(Flat) transform="translate(126.000000, 953.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-260 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-261 fill=#EFEADD></path> <path d="M24,13.014 L6,13.014 C5.448,13.014 5,12.567 5,12.014 C5,11.461 5.448,11.014 6,11.014 L24,11.014 C24.552,11.014 25,11.461 25,12.014 C25,12.567 24.552,13.014 24,13.014" id=Fill-393 fill=#D4D0BA></path> <path d="M36,19.014 L6,19.014 C5.448,19.014 5,18.567 5,18.014 C5,17.461 5.448,17.014 6,17.014 L36,17.014 C36.552,17.014 37,17.461 37,18.014 C37,18.567 36.552,19.014 36,19.014" id=Fill-394 fill=#D4D0BA></path> <path d="M36,25.014 L6,25.014 C5.448,25.014 5,24.567 5,24.014 C5,23.461 5.448,23.014 6,23.014 L36,23.014 C36.552,23.014 37,23.461 37,24.014 C37,24.567 36.552,25.014 36,25.014" id=Fill-395 fill=#D4D0BA></path> <path d="M36,31.014 L6,31.014 C5.448,31.014 5,30.567 5,30.014 C5,29.461 5.448,29.014 6,29.014 L36,29.014 C36.552,29.014 37,29.461 37,30.014 C37,30.567 36.552,31.014 36,31.014" id=Fill-396 fill=#D4D0BA></path> <path d="M36,37.014 L6,37.014 C5.448,37.014 5,36.567 5,36.014 C5,35.461 5.448,35.014 6,35.014 L36,35.014 C36.552,35.014 37,35.461 37,36.014 C37,36.567 36.552,37.014 36,37.014" id=Fill-397 fill=#D4D0BA></path> <path d="M36,43.014 L6,43.014 C5.448,43.014 5,42.567 5,42.014 C5,41.461 5.448,41.014 6,41.014 L36,41.014 C36.552,41.014 37,41.461 37,42.014 C37,42.567 36.552,43.014 36,43.014" id=Fill-398 fill=#D4D0BA></path> <path d="M36,49.014 L6,49.014 C5.448,49.014 5,48.567 5,48.014 C5,47.461 5.448,47.014 6,47.014 L36,47.014 C36.552,47.014 37,47.461 37,48.014 C37,48.567 36.552,49.014 36,49.014" id=Fill-399 fill=#D4D0BA></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>25 - JSON File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-729.000000, -479.000000)"> <g id=JSON-File transform="translate(729.000000, 479.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-22 fill=#E9E9E0></path> <polyline id=Fill-23 fill=#D9D7CA points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <path d="M41.537,56 L1.463,56 C0.655,56 0,55.345 0,54.537 L0,39 L43,39 L43,54.537 C43,55.345 42.345,56 41.537,56" id=Fill-109 fill=#9777A8></path> <path d="M10.522,42.719 L10.522,50.566 C10.522,51.04 10.435,51.44 10.262,51.763 C10.089,52.086 9.856,52.346 9.565,52.542 C9.273,52.738 8.938,52.875 8.56,52.952 C8.182,53.029 7.792,53.068 7.391,53.068 C7.19,53.068 6.955,53.048 6.687,53.007 C6.418,52.966 6.14,52.902 5.853,52.815 C5.565,52.728 5.29,52.631 5.025,52.522 C4.761,52.412 4.538,52.289 4.356,52.152 L5.053,51.045 C5.144,51.108 5.273,51.175 5.442,51.243 C5.611,51.311 5.796,51.375 5.996,51.435 C6.196,51.494 6.406,51.546 6.625,51.592 C6.844,51.638 7.049,51.66 7.24,51.66 C7.724,51.66 8.108,51.566 8.396,51.38 C8.683,51.193 8.835,50.876 8.854,50.43 L8.854,42.719 L10.522,42.719" id=Fill-110 fill=#FFFFFF></path> <path d="M18.684,50.238 C18.684,50.603 18.608,50.956 18.458,51.298 C18.308,51.64 18.096,51.94 17.822,52.2 C17.549,52.46 17.212,52.667 16.81,52.822 C16.409,52.978 15.954,53.055 15.443,53.055 C15.225,53.055 14.999,53.043 14.767,53.021 C14.534,52.998 14.3,52.959 14.063,52.904 C13.825,52.85 13.6,52.774 13.386,52.679 C13.172,52.583 12.987,52.467 12.832,52.33 L13.119,51.154 C13.247,51.228 13.408,51.298 13.605,51.366 C13.801,51.435 14.003,51.498 14.213,51.558 C14.423,51.617 14.632,51.665 14.842,51.701 C15.052,51.737 15.247,51.756 15.43,51.756 C15.985,51.756 16.412,51.626 16.708,51.366 C17.004,51.106 17.152,50.722 17.152,50.211 C17.152,49.901 17.048,49.637 16.838,49.418 C16.628,49.199 16.366,49.001 16.052,48.823 C15.737,48.646 15.398,48.468 15.033,48.29 C14.669,48.112 14.327,47.902 14.008,47.661 C13.689,47.42 13.425,47.135 13.215,46.807 C13.005,46.479 12.9,46.068 12.9,45.576 C12.9,45.13 12.982,44.733 13.147,44.387 C13.311,44.04 13.531,43.746 13.81,43.505 C14.088,43.264 14.411,43.079 14.78,42.951 C15.149,42.823 15.539,42.76 15.949,42.76 C16.368,42.76 16.792,42.799 17.221,42.876 C17.649,42.953 17.995,43.079 18.26,43.252 C18.205,43.37 18.142,43.5 18.068,43.642 C17.995,43.783 17.927,43.915 17.863,44.038 C17.8,44.161 17.745,44.264 17.699,44.346 C17.653,44.428 17.626,44.474 17.617,44.482 C17.563,44.455 17.501,44.419 17.433,44.373 C17.364,44.327 17.267,44.282 17.139,44.236 C17.011,44.19 16.843,44.159 16.633,44.141 C16.423,44.122 16.154,44.127 15.826,44.154 C15.644,44.173 15.471,44.225 15.307,44.311 C15.143,44.398 14.997,44.505 14.869,44.633 C14.741,44.761 14.642,44.904 14.568,45.064 C14.495,45.223 14.459,45.376 14.459,45.522 C14.459,45.886 14.564,46.18 14.773,46.403 C14.983,46.627 15.243,46.822 15.553,46.991 C15.862,47.16 16.2,47.324 16.565,47.483 C16.929,47.643 17.269,47.837 17.583,48.065 C17.898,48.292 18.159,48.577 18.369,48.919 C18.579,49.261 18.684,49.7 18.684,50.238" id=Fill-111 fill=#FFFFFF></path> <path d="M28.582,47.914 C28.582,48.762 28.475,49.509 28.261,50.156 C28.047,50.804 27.75,51.341 27.372,51.77 C26.994,52.198 26.552,52.522 26.046,52.74 C25.54,52.959 24.986,53.068 24.385,53.068 C23.783,53.068 23.23,52.959 22.724,52.74 C22.218,52.522 21.775,52.198 21.398,51.77 C21.02,51.341 20.723,50.804 20.509,50.156 C20.295,49.509 20.188,48.762 20.188,47.914 C20.188,47.066 20.295,46.321 20.509,45.679 C20.723,45.036 21.02,44.501 21.398,44.072 C21.775,43.644 22.218,43.318 22.724,43.095 C23.23,42.871 23.783,42.76 24.385,42.76 C24.986,42.76 25.54,42.871 26.046,43.095 C26.552,43.318 26.994,43.644 27.372,44.072 C27.75,44.501 28.047,45.036 28.261,45.679 C28.475,46.321 28.582,47.066 28.582,47.914 L28.582,47.914 Z M24.344,51.729 C24.681,51.729 25.002,51.662 25.308,51.53 C25.613,51.398 25.887,51.182 26.128,50.881 C26.369,50.58 26.559,50.185 26.695,49.698 C26.832,49.211 26.905,48.616 26.914,47.914 C26.905,47.23 26.834,46.649 26.702,46.171 C26.57,45.692 26.388,45.298 26.155,44.988 C25.923,44.679 25.658,44.455 25.362,44.318 C25.066,44.182 24.754,44.113 24.426,44.113 C24.089,44.113 23.768,44.177 23.462,44.305 C23.156,44.433 22.883,44.648 22.642,44.954 C22.4,45.26 22.211,45.653 22.074,46.137 C21.938,46.62 21.864,47.212 21.856,47.914 C21.864,48.598 21.936,49.181 22.067,49.664 C22.199,50.147 22.382,50.541 22.614,50.847 C22.847,51.152 23.111,51.375 23.407,51.517 C23.703,51.658 24.016,51.729 24.344,51.729 L24.344,51.729 Z" id=Fill-112 fill=#FFFFFF></path> <polyline id=Fill-113 fill=#FFFFFF points="38.18 42.924 38.18 53 36.512 53 32.561 46.055 32.561 53 30.893 53 30.893 42.924 32.561 42.924 36.512 49.869 36.512 42.924 38.18 42.924"></polyline> <path d="M13,19 L13,15 C13,14.449 13.448,14 14,14 C14.553,14 15,13.552 15,13 C15,12.448 14.553,12 14,12 C12.346,12 11,13.346 11,15 L11,19 C11,20.103 10.103,21 9,21 C8.447,21 8,21.448 8,22 C8,22.552 8.447,23 9,23 C10.103,23 11,23.897 11,25 L11,29 C11,30.654 12.346,32 14,32 C14.553,32 15,31.552 15,31 C15,30.448 14.553,30 14,30 C13.448,30 13,29.551 13,29 L13,25 C13,23.8 12.458,22.734 11.618,22 C12.458,21.266 13,20.2 13,19" id=Fill-114 fill=#9777A8></path> <path d="M21,17 C20.172,17 19.5,17.672 19.5,18.5 C19.5,19.328 20.172,20 21,20 C21.828,20 22.5,19.328 22.5,18.5 C22.5,17.672 21.828,17 21,17" id=Fill-115 fill=#9777A8></path> <path d="M33,21 C31.898,21 31,20.103 31,19 L31,15 C31,13.346 29.654,12 28,12 C27.447,12 27,12.448 27,13 C27,13.552 27.447,14 28,14 C28.552,14 29,14.449 29,15 L29,19 C29,20.2 29.542,21.266 30.382,22 C29.542,22.734 29,23.8 29,25 L29,29 C29,29.551 28.552,30 28,30 C27.447,30 27,30.448 27,31 C27,31.552 27.447,32 28,32 C29.654,32 31,30.654 31,29 L31,25 C31,23.897 31.898,23 33,23 C33.553,23 34,22.552 34,22 C34,21.448 33.553,21 33,21" id=Fill-116 fill=#9777A8></path> <path d="M21,24 C20.447,24 20,24.448 20,25 L20,28 C20,28.552 20.447,29 21,29 C21.553,29 22,28.552 22,28 L22,25 C22,24.448 21.553,24 21,24" id=Fill-117 fill=#9777A8></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>68 -PSD File- (document, paper, write, note, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-966.000000, -1073.000000)"> <g id=68--PSD-File--(document,-paper,-write,-note,-flat) transform="translate(966.000000, 1073.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-296 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-297 fill=#EFEADD></path> <path d="M36,49.014 L26,49.014 C25.447,49.014 25,48.567 25,48.014 C25,47.461 25.447,47.014 26,47.014 L36,47.014 C36.553,47.014 37,47.461 37,48.014 C37,48.567 36.553,49.014 36,49.014" id=Fill-523 fill=#D4D0BA></path> <path d="M31,53.014 L26,53.014 C25.447,53.014 25,52.567 25,52.014 C25,51.461 25.447,51.014 26,51.014 L31,51.014 C31.553,51.014 32,51.461 32,52.014 C32,52.567 31.553,53.014 31,53.014" id=Fill-524 fill=#D4D0BA></path> <path d="M36,53.014 L35,53.014 C34.447,53.014 34,52.567 34,52.014 C34,51.461 34.447,51.014 35,51.014 L36,51.014 C36.553,51.014 37,51.461 37,52.014 C37,52.567 36.553,53.014 36,53.014" id=Fill-525 fill=#D4D0BA></path> <polygon id=Fill-526 fill=#26B999 points="26 30.014 6 30.014 16 18.014 36 18.014"></polygon> <polygon id=Fill-527 fill=#6BDDC0 points="26 30.014 11 30.014 6 36.014 26 36.014 36 24.014 31 24.014"></polygon> <polygon id=Fill-528 fill=#26B999 points="26 36.014 11 36.014 6 42.014 26 42.014 36 30.014 31 30.014"></polygon> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>28 - PDF File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-369.000000, -479.000000)"> <g id=PDF-File transform="translate(369.000000, 479.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-100 fill=#E9E9E0></path> <polyline id=Fill-101 fill=#D9D7CA points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <path d="M13.014,33.324 L13.014,33.324 C12.666,33.324 12.332,33.211 12.047,32.998 C11.006,32.216 10.866,31.347 10.932,30.755 C11.114,29.128 13.127,27.423 16.917,25.687 C18.421,22.391 19.852,18.33 20.705,14.937 C19.707,12.764 18.738,9.947 19.444,8.293 C19.692,7.715 20.002,7.27 20.578,7.078 C20.807,7.002 21.382,6.906 21.594,6.906 C22.098,6.906 22.541,7.555 22.855,7.955 C23.15,8.332 23.819,9.129 22.482,14.758 C23.83,17.541 25.739,20.377 27.57,22.319 C28.881,22.082 30.009,21.961 30.928,21.961 C32.494,21.961 33.443,22.327 33.83,23.078 C34.15,23.7 34.018,24.427 33.439,25.238 C32.882,26.017 32.115,26.429 31.219,26.429 C30.003,26.429 28.587,25.661 27.008,24.144 C24.17,24.737 20.857,25.795 18.179,26.966 C17.343,28.74 16.542,30.169 15.796,31.217 C14.773,32.654 13.889,33.324 13.014,33.324 L13.014,33.324 Z M15.676,28.198 C13.538,29.399 12.667,30.386 12.605,30.942 C12.595,31.034 12.568,31.276 13.036,31.634 C13.185,31.587 14.055,31.19 15.676,28.198 L15.676,28.198 Z M29.313,23.756 C30.128,24.383 30.327,24.7 30.86,24.7 C31.094,24.7 31.762,24.69 32.07,24.259 C32.219,24.05 32.277,23.916 32.299,23.845 C32.177,23.779 32.014,23.648 31.124,23.648 C30.62,23.648 29.985,23.669 29.313,23.756 L29.313,23.756 Z M21.843,17.174 C21.127,19.648 20.183,22.319 19.169,24.738 C21.259,23.927 23.531,23.219 25.665,22.718 C24.315,21.15 22.966,19.192 21.843,17.174 L21.843,17.174 Z M21.236,8.712 C21.138,8.745 19.906,10.469 21.332,11.928 C22.281,9.813 21.279,8.698 21.236,8.712 L21.236,8.712 Z" id=Fill-102 fill=#CC4B4C></path> <path d="M41.537,56 L1.463,56 C0.655,56 0,55.345 0,54.537 L0,39 L43,39 L43,54.537 C43,55.345 42.345,56 41.537,56" id=Fill-286 fill=#CC4B4C></path> <path d="M10.885,53 L9.244,53 L9.244,42.924 L12.143,42.924 C12.571,42.924 12.995,42.992 13.414,43.129 C13.833,43.266 14.209,43.471 14.542,43.744 C14.875,44.018 15.144,44.348 15.349,44.735 C15.554,45.123 15.656,45.558 15.656,46.041 C15.656,46.552 15.569,47.014 15.397,47.429 C15.223,47.844 14.981,48.192 14.672,48.475 C14.362,48.757 13.988,48.976 13.551,49.131 C13.113,49.286 12.63,49.363 12.102,49.363 L10.885,49.363 L10.885,53 L10.885,53 Z M10.885,44.168 L10.885,48.16 L12.389,48.16 C12.589,48.16 12.787,48.126 12.983,48.058 C13.179,47.989 13.359,47.878 13.523,47.723 C13.688,47.567 13.819,47.352 13.92,47.073 C14.02,46.795 14.07,46.451 14.07,46.041 C14.07,45.877 14.047,45.688 14.002,45.474 C13.956,45.26 13.863,45.055 13.722,44.858 C13.58,44.662 13.382,44.498 13.127,44.366 C12.872,44.234 12.534,44.168 12.115,44.168 L10.885,44.168 L10.885,44.168 Z" id=Fill-287 fill=#FFFFFF></path> <path d="M25.719,47.682 C25.719,48.511 25.63,49.22 25.452,49.808 C25.274,50.396 25.049,50.888 24.775,51.284 C24.502,51.681 24.194,51.993 23.853,52.221 C23.511,52.448 23.18,52.619 22.861,52.733 C22.542,52.848 22.251,52.92 21.986,52.952 C21.722,52.984 21.526,53 21.398,53 L17.584,53 L17.584,42.924 L20.619,42.924 C21.467,42.924 22.212,43.059 22.855,43.327 C23.497,43.596 24.03,43.954 24.454,44.4 C24.878,44.847 25.194,45.355 25.404,45.925 C25.614,46.494 25.719,47.08 25.719,47.682 L25.719,47.682 Z M20.852,51.797 C21.963,51.797 22.766,51.441 23.258,50.73 C23.75,50.02 23.996,48.989 23.996,47.641 C23.996,47.222 23.946,46.807 23.846,46.397 C23.745,45.986 23.552,45.615 23.265,45.282 C22.978,44.949 22.588,44.681 22.096,44.476 C21.604,44.271 20.965,44.168 20.182,44.168 L19.225,44.168 L19.225,51.797 L20.852,51.797 L20.852,51.797 Z" id=Fill-288 fill=#FFFFFF></path> <polyline id=Fill-289 fill=#FFFFFF points="29.766 44.168 29.766 47.34 33.977 47.34 33.977 48.461 29.766 48.461 29.766 53 28.098 53 28.098 42.924 34.4 42.924 34.4 44.168 29.766 44.168"></polyline> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>59 -PPTX File- (document, paper, write, note, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-1086.000000, -953.000000)"> <g id=59--PPTX-File--(document,-paper,-write,-note,-flat) transform="translate(1086.000000, 953.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-276 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-277 fill=#EFEADD></path> <path d="M22,13.014 L22,25.014 L34,25.014 C34,18.387 28.627,13.014 22,13.014" id=Fill-462 fill=#F38774></path> <path d="M18,29.014 L18,17.014 C13.974,17.014 10.42,19.003 8.244,22.045 L18,29.014 Z" id=Fill-463 fill=#F0C41A></path> <path d="M8.2682,22.0134 C6.8442,23.9834 6.0002,26.3974 6.0002,29.0144 C6.0002,35.6414 11.3722,41.0144 18.0002,41.0144 C24.6272,41.0144 30.0002,35.6414 30.0002,29.0144 L18.0002,29.0144 L8.2432,22.0454" id=Fill-464 fill=#26B999></path> <path d="M36,49.014 L26,49.014 C25.447,49.014 25,48.567 25,48.014 C25,47.461 25.447,47.014 26,47.014 L36,47.014 C36.553,47.014 37,47.461 37,48.014 C37,48.567 36.553,49.014 36,49.014" id=Fill-532 fill=#D4D0BA></path> <path d="M31,53.014 L26,53.014 C25.447,53.014 25,52.567 25,52.014 C25,51.461 25.447,51.014 26,51.014 L31,51.014 C31.553,51.014 32,51.461 32,52.014 C32,52.567 31.553,53.014 31,53.014" id=Fill-533 fill=#D4D0BA></path> <path d="M36,53.014 L35,53.014 C34.447,53.014 34,52.567 34,52.014 C34,51.461 34.447,51.014 35,51.014 L36,51.014 C36.553,51.014 37,51.461 37,52.014 C37,52.567 36.553,53.014 36,53.014" id=Fill-534 fill=#D4D0BA></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>66 -Video File- (Flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-726.000000, -1073.000000)"> <g id=66--Video-File--(Flat) transform="translate(726.000000, 1073.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-292 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-293 fill=#EFEADD></path> <path d="M24,37.014 L8,37.014 C6.895,37.014 6,36.119 6,35.014 L6,23.014 C6,21.909 6.895,21.014 8,21.014 L24,21.014 C25.105,21.014 26,21.909 26,23.014 L26,35.014 C26,36.119 25.105,37.014 24,37.014" id=Fill-513 fill=#546080></path> <path d="M33.4253,35.2416 L26.0003,33.0136 L26.0003,25.0136 L33.4253,22.7866 C34.7083,22.4016 36.0003,23.3626 36.0003,24.7016 L36.0003,33.3256 C36.0003,34.6656 34.7083,35.6266 33.4253,35.2416" id=Fill-514 fill=#374564></path> <path d="M36,49.014 L26,49.014 C25.447,49.014 25,48.567 25,48.014 C25,47.461 25.447,47.014 26,47.014 L36,47.014 C36.553,47.014 37,47.461 37,48.014 C37,48.567 36.553,49.014 36,49.014" id=Fill-515 fill=#D4D0BA></path> <path d="M31,53.014 L26,53.014 C25.447,53.014 25,52.567 25,52.014 C25,51.461 25.447,51.014 26,51.014 L31,51.014 C31.553,51.014 32,51.461 32,52.014 C32,52.567 31.553,53.014 31,53.014" id=Fill-516 fill=#D4D0BA></path> <path d="M36,53.014 L35,53.014 C34.447,53.014 34,52.567 34,52.014 C34,51.461 34.447,51.014 35,51.014 L36,51.014 C36.553,51.014 37,51.461 37,52.014 C37,52.567 36.553,53.014 36,53.014" id=Fill-519 fill=#D4D0BA></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>24 - XML File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-849.000000, -479.000000)"> <g id=XML-File transform="translate(849.000000, 479.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-24 fill=#E9E9E0></path> <polyline id=Fill-25 fill=#D9D7CA points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <path d="M41.537,56 L1.463,56 C0.655,56 0,55.345 0,54.537 L0,39 L43,39 L43,54.537 C43,55.345 42.345,56 41.537,56" id=Fill-118 fill=#F29C1F></path> <polyline id=Fill-119 fill=#FFFFFF points="12.879 48.105 15.436 53 13.535 53 11.936 49.199 11.799 49.199 10.076 53 8.176 53 10.732 48.105 8.012 42.924 9.885 42.924 11.662 47.025 11.799 47.025 13.727 42.924 15.6 42.924 12.879 48.105"></polyline> <polyline id=Fill-120 fill=#FFFFFF points="25.498 42.924 27.166 42.924 27.166 53 25.498 53 25.498 46.068 23.242 51.674 21.793 51.674 19.523 46.068 19.523 53 17.856 53 17.856 42.924 19.523 42.924 22.518 49.815 25.498 42.924"></polyline> <polyline id=Fill-121 fill=#FFFFFF points="31.363 42.924 31.363 51.756 35.998 51.756 35.998 53 29.695 53 29.695 42.924 31.363 42.924"></polyline> <path d="M9,24 C8.744,24 8.488,23.902 8.293,23.707 C7.902,23.316 7.902,22.684 8.293,22.293 L14.293,16.293 C14.684,15.902 15.316,15.902 15.707,16.293 C16.098,16.684 16.098,17.316 15.707,17.707 L9.707,23.707 C9.512,23.902 9.256,24 9,24" id=Fill-122 fill=#F29C1F></path> <path d="M15,30 C14.744,30 14.488,29.902 14.293,29.707 L8.293,23.707 C7.902,23.316 7.902,22.684 8.293,22.293 C8.684,21.902 9.316,21.902 9.707,22.293 L15.707,28.293 C16.098,28.684 16.098,29.316 15.707,29.707 C15.512,29.902 15.256,30 15,30" id=Fill-123 fill=#F29C1F></path> <path d="M27,30 C26.744,30 26.488,29.902 26.293,29.707 C25.902,29.316 25.902,28.684 26.293,28.293 L32.293,22.293 C32.684,21.902 33.316,21.902 33.707,22.293 C34.098,22.684 34.098,23.316 33.707,23.707 L27.707,29.707 C27.512,29.902 27.256,30 27,30" id=Fill-124 fill=#F29C1F></path> <path d="M33,24 C32.744,24 32.488,23.902 32.293,23.707 L26.293,17.707 C25.902,17.316 25.902,16.684 26.293,16.293 C26.684,15.902 27.316,15.902 27.707,16.293 L33.707,22.293 C34.098,22.684 34.098,23.316 33.707,23.707 C33.512,23.902 33.256,24 33,24" id=Fill-125 fill=#F29C1F></path> <path d="M18,32 C17.89,32 17.777,31.982 17.667,31.943 C17.147,31.759 16.873,31.188 17.057,30.667 L23.057,13.667 C23.241,13.146 23.81,12.872 24.333,13.057 C24.854,13.241 25.127,13.812 24.943,14.333 L18.943,31.333 C18.798,31.744 18.412,32 18,32" id=Fill-126 fill=#F29C1F></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8"?><svg width=64 height=64 version=1.1 viewBox="0 0 64 64" xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><g transform=scale(2.66667)><path fill=none stroke=currentColor stroke-linejoin=round stroke-width=1 d="M20.3284,14.6716c1.5621,1.5621 1.5621,4.09476 0,5.65685c-1.5621,1.5621 -4.09476,1.5621 -5.65685,0c-1.5621,-1.5621 -1.5621,-4.09476 -1.77636e-15,-5.65685c1.5621,-1.5621 4.09476,-1.5621 5.65685,-1.77636e-15"></path><path fill=none stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=1 d=M20.33,20.33l3.17,3.17></path><path fill=none stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=1 d="M18.5,4.5v-2h-13v-2h-5v15.5c0,0.829 0.67,1.5 1.5,1.5c0.828,0 1.5,-0.671 1.5,-1.5v-11.5h17v5"></path><path fill=none stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=1 d=M2,17.5h7.5></path><path fill=none d=M0,0h24v24h-24Z></path></g></svg> '},function(e,t){e.exports='<svg width=58px height=51px viewBox="0 0 58 51" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:sketch=http://www.bohemiancoding.com/sketch/ns> <g stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-721.000000, -4081.000000)"> <g transform="translate(721.000000, 4081.000000)"> <path d="M55.981,51 L2.019,51 C0.904,51 0,50.096 0,48.981 L0,17 L58,17 L58,48.981 C58,50.096 57.096,51 55.981,51" id=Fill-1413 fill=#F0CE49 sketch:type=MSShapeGroup></path> <path d="M26.019,8 L26.019,2.019 C26.019,0.904 25.115,0 24,0 L2.019,0 C0.904,0 0,0.904 0,2.019 L0,17 L58,17 L58,10.019 C58,8.904 57.096,8 55.981,8 L26.019,8" id=Fill-1414 fill=#ECBA16 sketch:type=MSShapeGroup></path> </g> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d=M13.5,4.5v-1c0-0.6-0.4-1-1-1H9.8 /> <path class=st0 d=M4.2,2.5H1.5c-0.6,0-1,0.4-1,1v11c0,0.6,0.4,1,1,1H4 /> <path class=st0 d="M9.6,3.2C9.5,3.4,9.4,3.5,9.1,3.5H4.9c-0.2,0-0.4-0.1-0.5-0.3l-0.7-2C3.7,1,3.7,0.8,3.8,0.7\n    C3.9,0.6,4,0.5,4.2,0.5h5.6c0.2,0,0.3,0.1,0.4,0.2c0.1,0.1,0.1,0.3,0.1,0.5L9.6,3.2z"/> <path class=st0 d=M4.5,13.5H3c-0.3,0-0.5-0.2-0.5-0.5V4.5 /> <line class=st0 x1=10.5 y1=5 x2=10.5 y2=6.5 /> <line class=st0 x1=4.5 y1=6.5 x2=7.5 y2=6.5 /> <line class=st0 x1=4.5 y1=9.5 x2=5.5 y2=9.5 /> <path class=st0 d=M8.7,15.1l-2.5,0.4L6.6,13l6.4-6.4c0.6-0.6,1.5-0.6,2.1,0c0.6,0.6,0.6,1.5,0,2.1L8.7,15.1z /> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d="M1.1,8.7C0.8,8.8,0.5,9.2,0.5,9.6v3.8c0,0.4,0.3,0.8,0.6,0.9l3,1.1c0.2,0.1,0.5,0.1,0.7,0l3-1.1\n    c0.4-0.1,0.6-0.5,0.6-0.9V9.6c0-0.4-0.3-0.8-0.6-0.9l-3-1.1c-0.2-0.1-0.5-0.1-0.7,0L1.1,8.7z"/> <polyline class=st0 points="0.7,9.1 4.5,10.5 8.3,9.1 "/> <line class=st0 x1=4.5 y1=10.5 x2=4.5 y2=15.5 /> <path class=st0 d=M15.3,2.6c-1,0.3-5.8,1.9-5.8,1.9L3.7,2.6 /> <line class=st0 x1=9.5 y1=4.5 x2=9.5 y2=7 /> <path class=st0 d="M3.5,5.5V3.2c0-0.4,0.3-0.8,0.7-0.9l5-1.7c0.2-0.1,0.4-0.1,0.6,0l5,1.7c0.4,0.1,0.7,0.5,0.7,0.9v5.7\n    c0,0.4-0.3,0.8-0.7,0.9l-4.3,1.4"/> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <line class=st0 x1=6.5 y1=13.5 x2=9.5 y2=13.5 /> <line class=st0 x1=8 y1=12 x2=8 y2=15 /> <path class=st0 d=M5,15.5H1.5c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v13c0,0.6-0.4,1-1,1H11 /> <line class=st0 x1=0.5 y1=4.5 x2=15.5 y2=4.5 /> <g> <path d=M13,5.8c-0.4,0-0.8,0.3-0.8,0.8c0,0.4,0.3,0.8,0.8,0.8s0.8-0.3,0.8-0.8C13.8,6.1,13.4,5.8,13,5.8L13,5.8z /> </g> <line class=st0 x1=0.5 y1=8.5 x2=15.5 y2=8.5 /> <line class=st0 x1=11 y1=12.5 x2=15.5 y2=12.5 /> <line class=st0 x1=0.5 y1=12.5 x2=5 y2=12.5 /> <g> <path d=M13,9.7c-0.4,0-0.8,0.3-0.8,0.8c0,0.4,0.3,0.8,0.8,0.8s0.8-0.3,0.8-0.8C13.8,10.1,13.4,9.7,13,9.7L13,9.7z /> </g> <g> <path d=M13,1.7c-0.4,0-0.8,0.3-0.8,0.8c0,0.4,0.3,0.8,0.8,0.8s0.8-0.3,0.8-0.8C13.8,2.1,13.4,1.7,13,1.7L13,1.7z /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=13px viewBox="0 0 16 13" style="enable-background:new 0 0 16 13" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <line class=st0 x1=1.9 y1=12.5 x2=14.4 y2=0.5 /> <path class=st0 d=M6,11.2c0.7,0.2,1.3,0.3,2,0.3c2.7,0,5.5-1.9,7.2-3.8c0.4-0.4,0.4-1.1,0-1.5c-0.6-0.6-1.3-1.3-2-1.8 /> <path class=st0 d=M9.6,2.7C9.1,2.6,8.5,2.5,8,2.5c-2.7,0-5.5,1.8-7.2,3.8c-0.4,0.4-0.4,1.1,0,1.5c0.5,0.5,1.1,1.1,1.7,1.6 /> <path class=st0 d=M5.5,7c0-1.4,1.1-2.5,2.5-2.5 /> <path class=st0 d=M10.5,7L10.5,7c0,1.4-1.1,2.5-2.5,2.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=12px height=16px viewBox="0 0 12 16" style="enable-background:new 0 0 12 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <line class=st0 x1=3.5 y1=15.5 x2=3.5 y2=0.5 /> <polyline class=st0 points="0.5,12.5 3.5,15.5 6.5,12.5 \t\t"/> </g> <g> <path class=st0 d=M10.5,6.5V1c0-0.2-0.1-0.4-0.3-0.4c-0.2-0.1-0.4-0.1-0.5,0L8.5,1.5 /> <line class=st0 x1=9.5 y1=6.5 x2=11.5 y2=6.5 /> </g> <circle class=st0 cx=10 cy=11 r=1.5 /> <path class=st0 d=M9.5,15.5c1.1,0,2-0.9,2-2V11 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <circle class=st0 cx=2 cy=2 r=1.5 /> <circle class=st0 cx=2 cy=8 r=1.5 /> <circle class=st0 cx=2 cy=14 r=1.5 /> <line class=st0 x1=5.5 y1=2.5 x2=15.5 y2=2.5 /> <line class=st0 x1=5.5 y1=8.5 x2=15.5 y2=8.5 /> <line class=st0 x1=5.5 y1=14.5 x2=15.5 y2=14.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,15.5h-13c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v13C15.5,15.1,15.1,15.5,14.5,15.5z /> <g> <polyline class=st0 points="7.5,12 7.5,7 6,9.5 4.5,7 4.5,12 \t\t"/> </g> <g> <path class=st0 d=M9.5,12c1.1,0,2-0.9,2-2V9c0-1.1-0.9-2-2-2V12z /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M4.5,10.5h-3c-0.6,0-1,0.4-1,1v3c0,0.6,0.4,1,1,1h3c0.6,0,1-0.4,1-1v-3C5.5,10.9,5.1,10.5,4.5,10.5z /> <path class=st0 d=M9.5,0.5h-3c-0.6,0-1,0.4-1,1v3c0,0.6,0.4,1,1,1h3c0.6,0,1-0.4,1-1v-3C10.5,0.9,10.1,0.5,9.5,0.5z /> <path class=st0 d=M14.5,10.5h-3c-0.6,0-1,0.4-1,1v3c0,0.6,0.4,1,1,1h3c0.6,0,1-0.4,1-1v-3C15.5,10.9,15.1,10.5,14.5,10.5z /> <path class=st0 d=M3,10.5v-1c0-0.6,0.4-1,1-1h8c0.6,0,1,0.4,1,1v1 /> <line class=st0 x1=8 y1=5.5 x2=8 y2=8.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=14.5px viewBox="0 0 16 14.5" style="enable-background:new 0 0 16 14.5" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d="M7.5,3l7.3,0c0.4,0,0.7,0.3,0.7,0.6v9.7c0,0.4-0.3,0.6-0.7,0.6H1.2c-0.4,0-0.7-0.3-0.7-0.6V3.6\n    C0.5,3.3,0.8,3,1.2,3l2.3,0"/> <line class=st0 x1=8 y1=7.5 x2=13.5 y2=7.5 /> <line class=st0 x1=4.5 y1=10.5 x2=13.5 y2=10.5 /> <path class=st0 d=M2.5,3V2c0-0.8,0.7-1.5,1.5-1.5h0c0.8,0,1.5,0.7,1.5,1.5v4.5c0,0.6-0.4,1-1,1h0c-0.6,0-1-0.4-1-1V5 /> </svg> '},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=50px height=52px viewBox="0 0 50 52" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:sketch=http://www.bohemiancoding.com/sketch/ns> <title>276 - Picture (Flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd sketch:type=MSPage> <g id=Icons sketch:type=MSArtboardGroup transform="translate(-605.000000, -1563.000000)"> <g id=276---Picture-(Flat) sketch:type=MSLayerGroup transform="translate(606.000000, 1564.000000)"> <path d="M0,0 L48,0 L48,50 L0,50 L0,0 Z" id=Fill-681 fill=#424A60 sketch:type=MSShapeGroup></path> <path d="M0,0 L48,0 L48,50 L0,50 L0,0 Z" id=Stroke-682 stroke=#E8EDEE stroke-width=2 sketch:type=MSShapeGroup></path> <path d="M16.569,12.569 C16.569,15.092 14.523,17.138 12,17.138 C9.477,17.138 7.431,15.092 7.431,12.569 C7.431,10.046 9.477,8 12,8 C14.523,8 16.569,10.046 16.569,12.569" id=Fill-1868 fill=#F0CE49 sketch:type=MSShapeGroup></path> <path d="M0,40 L48,40 L48,50 L0,50 L0,40 Z" id=Fill-1869 fill=#E8EDEE sketch:type=MSShapeGroup></path> <path d="M47,31.111 L46,30 L34,19 L23.5,30.5 L33,40 L47,40 L47,31.111" id=Fill-2555 fill=#199172 sketch:type=MSShapeGroup></path> <path d="M28.983,35.983 L18.017,25.017 L1,40 L33,40 L28.983,35.983" id=Fill-2562 fill=#25AE88 sketch:type=MSShapeGroup></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M4,8.8l1.6,2.3c0.1,0.2,0.3,0.3,0.6,0.3c0.2,0,0.4-0.1,0.6-0.3L12,4.6 /> <circle class=st0 cx=8 cy=8 r=7.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=16px viewBox="0 0 15 16" style="enable-background:new 0 0 15 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M14.5,14.5c0,0.6-0.4,1-1,1h-12c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h10c0.3,0,0.5,0.1,0.7,0.3l2,1.9\n        c0.2,0.2,0.3,0.4,0.3,0.7V14.5z"/> <line class=st0 x1=5.5 y1=7.5 x2=5.5 y2=3.5 /> <polyline class=st0 points="3.5,4.5 3.5,3.5 7.5,3.5 7.5,4.5 \t"/> <line class=st0 x1=10 y1=6.5 x2=11.5 y2=6.5 /> <line class=st0 x1=10 y1=3.5 x2=11.5 y2=3.5 /> <line class=st0 x1=3.5 y1=9.5 x2=11.5 y2=9.5 /> <line class=st0 x1=3.5 y1=12.5 x2=11.5 y2=12.5 /> <line class=st0 x1=4.5 y1=7.5 x2=6.5 y2=7.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,3.5h-13c-0.6,0-1-0.4-1-1v-1c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v1C15.5,3.1,15.1,3.5,14.5,3.5z /> <path class=st0 d=M14.5,9.5h-13c-0.6,0-1-0.4-1-1v-1c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v1C15.5,9.1,15.1,9.5,14.5,9.5z /> <path class=st0 d=M14.5,15.5h-13c-0.6,0-1-0.4-1-1v-1c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v1C15.5,15.1,15.1,15.5,14.5,15.5z /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M3,8c0,0,2-3,5-3s5,3,5,3s-2,3-5,3S3,8,3,8z /> <path class=st0 d="M8,9.2L8,9.2C7.3,9.2,6.8,8.7,6.8,8v0c0-0.7,0.6-1.2,1.2-1.2h0c0.7,0,1.2,0.6,1.2,1.2v0C9.2,8.7,8.7,9.2,8,9.2\n        z"/> <g> <path class=st0 d=M0.5,3V1.5c0-0.6,0.4-1,1-1H3 /> <path class=st0 d=M15.5,3V1.5c0-0.6-0.4-1-1-1H13 /> <path class=st0 d=M0.5,13v1.5c0,0.6,0.4,1,1,1H3 /> <path class=st0 d=M15.5,13v1.5c0,0.6-0.4,1-1,1H13 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=16px viewBox="0 0 15 16" style="enable-background:new 0 0 15 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M3,3.5H1C0.7,3.5,0.5,3.3,0.5,3V1c0-0.3,0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5v2C3.5,3.3,3.3,3.5,3,3.5z /> <path class=st0 d="M3,15.5H1c-0.3,0-0.5-0.2-0.5-0.5v-2c0-0.3,0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5v2\n        C3.5,15.3,3.3,15.5,3,15.5z"/> <path class=st0 d="M14,3.5h-2c-0.3,0-0.5-0.2-0.5-0.5V1c0-0.3,0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5v2\n        C14.5,3.3,14.3,3.5,14,3.5z"/> <path class=st0 d="M14,15.5h-2c-0.3,0-0.5-0.2-0.5-0.5v-2c0-0.3,0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5v2\n        C14.5,15.3,14.3,15.5,14,15.5z"/> <line class=st0 x1=3.5 y1=1.5 x2=11.5 y2=1.5 /> <line class=st0 x1=13.5 y1=3.5 x2=13.5 y2=12.5 /> <line class=st0 x1=11.5 y1=14.5 x2=3.5 y2=14.5 /> <line class=st0 x1=1.5 y1=12.5 x2=1.5 y2=3.5 /> <g> <path class=st0 d=M4.5,6c0-0.8,0.7-1.5,1.5-1.5h3c0.8,0,1.5,0.7,1.5,1.5 /> <line class=st0 x1=7.5 y1=4.5 x2=7.5 y2=11.5 /> <line class=st0 x1=5.5 y1=11.5 x2=9.5 y2=11.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <polyline class=st0 points="7,13 8,13.5 9,13 \t"/> <g> <path class=st0 d=M14.5,11h-13c-0.6,0-1-0.4-1-1V1.5c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1V10C15.5,10.6,15.1,11,14.5,11z /> <path class=st0 d=M12.5,11h-9v2.5c0,1.1,0.9,2,2,2h5c1.1,0,2-0.9,2-2V11z /> <line class=st0 x1=0.5 y1=4 x2=15.5 y2=4 /> <line class=st0 x1=0.5 y1=7.5 x2=15.5 y2=7.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M15.5,13.5c0,1.1-0.9,2-2,2 /> <path class=st0 d=M13.5,2.5c1.1,0,2,0.9,2,2 /> <path class=st0 d=M4.5,15.5c-1.1,0-2-0.9-2-2 /> <line class=st0 x1=2.5 y1=8.5 x2=2.5 y2=10.5 /> <line class=st0 x1=15.5 y1=7.5 x2=15.5 y2=10.5 /> <line class=st0 x1=10.5 y1=15.5 x2=7.5 y2=15.5 /> <line class=st0 x1=10.5 y1=2.5 x2=8.5 y2=2.5 /> </g> <g> <polygon class=st0 points="0.5,0.5 2.6,6.2 3.7,3.7 6.2,2.6 \t"/> </g> <path class=st0 d=M11.5,5.5C11.5,5.5,12,5,13,5 /> <path class=st0 d=M11.5,5.5C11.5,5.5,11,5,10,5 /> <path class=st0 d=M11.5,13c0,0,0.5,0.5,1.5,0.5 /> <path class=st0 d=M11.5,13c0,0-0.5,0.5-1.5,0.5 /> <line class=st0 x1=11.5 y1=13 x2=11.5 y2=5.5 /> </svg> '},function(e,t){e.exports='<svg class=statamic-logo width=90 height=20 xmlns=http://www.w3.org/2000/svg xmlns=http://www.w3.org/1999/xlink viewBox="0 0 438.5 84.9"> <g> <path fill=#3C4858 d="M2.7,69.2c0.9-1.1,1.8-1.6,3-1.6c1.2,0,2.5,0.5,3.7,1.4c3.9,2.6,8.4,4.1,13.7,4.1c4.1,0,7.3-1.7,7.3-5.2\n            c0-9-29.9-4.1-29.9-24.2c0-10.8,8.9-16.9,20.3-16.9c8.1,0,14,2.3,18.5,5.2c1.1,0.7,1.8,2.2,1.8,3.7c0,0.9-0.2,1.7-0.7,2.5l-1.4,2\n            c-1,1.4-2.1,2-3.4,2c-1,0-2-0.4-3.1-0.9c-3.3-1.7-6.8-2.6-10.9-2.6c-4.3,0-6.9,2.3-6.9,4.8c0,9.2,29.9,4.2,29.9,23.7\n            c0,10.9-8.9,17.7-22.4,17.7c-8.6,0-14.9-2.6-20.7-7.6c-1-0.9-1.4-2-1.4-3.1c0-0.9,0.2-1.8,0.9-2.6L2.7,69.2z"/> <path fill=#3C4858 d="M88.3,75c0.4,0.6,0.6,1.4,0.6,2.1c0,1.6-0.7,3.2-2.1,3.9c-4.2,2.5-8.4,3.7-13.9,3.7\n            c-12.5,0-17.2-8.1-17.2-22.3V17.3c0-2.5,2.1-4.6,4.6-4.6h5c2.5,0,4.6,2.1,4.6,4.6v10.8h13.3c2.5,0,4.6,2.1,4.6,4.6v4.2\n            c0,2.5-2.1,4.6-4.6,4.6H69.9v20.2c0,6,2,10,6.6,10c1.5,0,2.8-0.2,3.9-0.6s2-0.6,2.8-0.6c1.6,0,2.8,0.7,3.8,2.5L88.3,75z"/> <path fill=#3C4858 d="M96.9,67.3c0-12.2,9-18,20.2-18c4.9,0,9.8,1.6,12.5,3.6c0-0.6,0-1.1,0-1.7c0-8.1-2.6-12.5-10.3-12.5\n            c-4.2,0-6.9,0.6-9.5,1.5c-0.7,0.2-1.5,0.4-2.2,0.4c-1.8,0-3.3-0.9-4.2-2.6l-0.7-1.5c-0.2-0.6-0.5-1.2-0.5-2c0-1.6,1.1-3.2,2.6-3.9\n            c4.8-2.2,10.3-3.7,16-3.7c16.4,0,22.1,8.4,22.1,23V79c0,2.5-2.1,4.6-4.6,4.6h-3.2c-2.5,0-4.6-2.1-4.6-4.6v-1.8\n            c-3,4.2-8.9,7.1-16.4,7.1C104.2,84.3,96.9,78,96.9,67.3z M129.6,61.6c-2.5-1.8-5.7-2.7-9.7-2.7c-4.7,0-8.9,2.2-8.9,6.9\n            c0,4.2,3.4,6.5,7.9,6.5c5.9,0,9-2.6,10.7-5V61.6z"/> <path fill=#3C4858 d="M188.8,75c0.4,0.6,0.6,1.4,0.6,2.1c0,1.6-0.7,3.2-2.1,3.9c-4.2,2.5-8.4,3.7-13.9,3.7\n            c-12.5,0-17.2-8.1-17.2-22.3V17.3c0-2.5,2.1-4.6,4.6-4.6h5c2.5,0,4.6,2.1,4.6,4.6v10.8h13.3c2.5,0,4.6,2.1,4.6,4.6v4.2\n            c0,2.5-2.1,4.6-4.6,4.6h-13.3v20.2c0,6,2,10,6.6,10c1.5,0,2.8-0.2,3.9-0.6s2-0.6,2.8-0.6c1.6,0,2.8,0.7,3.8,2.5L188.8,75z"/> <path fill=#3C4858 d="M197.4,67.3c0-12.2,9-18,20.2-18c4.9,0,9.8,1.6,12.5,3.6c0-0.6,0-1.1,0-1.7c0-8.1-2.6-12.5-10.3-12.5\n            c-4.2,0-6.9,0.6-9.5,1.5c-0.7,0.2-1.5,0.4-2.2,0.4c-1.8,0-3.3-0.9-4.2-2.6l-0.7-1.5c-0.2-0.6-0.5-1.2-0.5-2c0-1.6,1.1-3.2,2.6-3.9\n            c4.8-2.2,10.3-3.7,16-3.7c16.4,0,22.1,8.4,22.1,23V79c0,2.5-2.1,4.6-4.6,4.6h-3.2c-2.5,0-4.6-2.1-4.6-4.6v-1.8\n            c-3,4.2-8.9,7.1-16.4,7.1C204.7,84.3,197.4,78,197.4,67.3z M230.1,61.6c-2.5-1.8-5.7-2.7-9.7-2.7c-4.7,0-8.9,2.2-8.9,6.9\n            c0,4.2,3.4,6.5,7.9,6.5c5.9,0,9-2.6,10.7-5V61.6z"/> <path fill=#3C4858 d="M272.1,34.3c3.9-4.4,10.5-7.1,17.3-7.1c8.5,0,14.1,3.8,16.1,8.9c3.9-5.2,10.1-8.9,18.7-8.9\n            c10.1,0,17.7,5,17.7,20.2V79c0,2.5-2.1,4.6-4.6,4.6h-5c-2.5,0-4.6-2.1-4.6-4.6V51c0-6.9-2.8-10.6-9.5-10.6c-5.3,0-9.5,2.6-11.4,6.4\n            c0,0.9,0.1,2.8,0.1,4.1v28c0,2.5-2.1,4.6-4.6,4.6h-5c-2.5,0-4.6-2.1-4.6-4.6V50.1c0-5.8-3.2-9.6-9.2-9.6c-5,0-9.1,2.2-11.6,5.9V79\n            c0,2.5-2.1,4.6-4.6,4.6h-5c-2.5,0-4.6-2.1-4.6-4.6V32.7c0-2.5,2.1-4.6,4.6-4.6h5c2.5,0,4.6,2.1,4.6,4.6V34.3z"/> <path fill=#3C4858 d="M373.9,8.2c0,5.7-4.1,8.9-8.1,8.9c-4.8,0-8.9-3.2-8.9-8.9c0-5,4.1-8.2,8.9-8.2C369.8,0,373.9,3.2,373.9,8.2z\n             M368,28.2c2.5,0,4.6,2.1,4.6,4.6V79c0,2.5-2.1,4.6-4.6,4.6h-5c-2.5,0-4.6-2.1-4.6-4.6V32.7c0-2.5,2.1-4.6,4.6-4.6H368z"/> <path fill=#3C4858 d="M427.3,42.3c-3.3-1.6-6.2-2.2-9.8-2.2c-7.9,0-15.4,6-15.4,15.7c0,9.8,7.6,15.9,16,15.9c4.4,0,7.5-1.1,10.7-3.2\n            c1-0.6,2-1,3-1c1.5,0,2.8,0.6,3.8,1.8l2.1,2.6c0.6,0.6,0.9,1.6,0.9,2.5c0,1.5-0.6,3.1-1.7,3.9c-6.6,5.3-12.5,6.5-19.4,6.5\n            c-18.3,0-30.4-11.6-30.4-29c0-16.1,11.8-29,28.7-29c7.4,0,12.8,1.2,18.2,4.2c1.4,0.7,2.2,2.5,2.2,4.1c0,0.7-0.1,1.4-0.5,2l-1.8,3.2\n            c-1,1.6-2.5,2.6-4.2,2.6C428.9,42.8,428.1,42.7,427.3,42.3z"/> </g> </svg> '},function(e,t){e.exports='<svg version=1.0 xmlns=http://www.w3.org/2000/svg xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=95.9px height=76.4px viewBox="0 0 95.9 76.4" style="enable-background:new 0 0 95.9 76.4" xml:space=preserve> <g> <path fill=3C4858 d="M26.5,73.1c0,2.1-1.7,3.3-3.9,3.3h-2.5c-7.7,0-12-3.4-12-12.1V50.1c0-5.3-2.5-7.6-5.2-8.4\r\n        C0.8,41.1,0,40,0,38.2c0-1.9,0.7-2.9,2.9-3.6c2.6-1,5.2-3.6,5.2-9.4V12.7C8.1,4.5,11.1,0,20.5,0h2.3c2.2,0,3.7,1.3,3.7,3.2\r\n        c0,2.2-1.4,3.5-3.6,3.5h-0.7c-5.1,0-6.9,2.2-6.9,8.4v12.8c0,5.8-2.7,9.7-6.7,10.2c3.8,0.4,6.7,3.3,6.7,10.2v13\r\n        c0,5.9,2.2,8.3,7.2,8.3C25.1,69.7,26.5,70.9,26.5,73.1z"/> <path fill=3C4858 d="M33.7,48c0.6-0.8,1.3-1.2,2.2-1.2c0.9,0,1.8,0.4,2.7,1c2.9,1.9,6.1,3,10,3c3,0,5.3-1.3,5.3-3.8\r\n        c0-6.6-21.8-3-21.8-17.7C32,21.4,38.5,17,46.8,17c5.9,0,10.2,1.7,13.5,3.8c0.8,0.5,1.3,1.6,1.3,2.7c0,0.6-0.2,1.3-0.5,1.8l-1,1.4\r\n        c-0.7,1-1.5,1.4-2.5,1.4c-0.7,0-1.4-0.3-2.2-0.6c-2.4-1.3-4.9-1.9-8-1.9c-3.1,0-5,1.7-5,3.5c0,6.7,21.8,3.1,21.8,17.3\r\n        c0,8-6.5,12.9-16.4,12.9c-6.3,0-10.9-1.9-15.1-5.6c-0.7-0.6-1-1.4-1-2.2c0-0.6,0.2-1.3,0.6-1.9L33.7,48z"/> <path fill=3C4858 d="M69.4,73.1c0-2.2,1.4-3.4,4-3.4c4.9,0,7.2-2.3,7.2-8.3v-13c0-6.9,3-9.8,6.7-10.2c-4-0.5-6.7-4.4-6.7-10.2V15.1\r\n        c0-6.1-1.8-8.4-6.9-8.4H73c-2.2,0-3.6-1.3-3.6-3.5c0-2,1.5-3.2,3.7-3.2h2.3c9.3,0,12.4,4.5,12.4,12.7v12.5c0,5.8,2.6,8.4,5.2,9.4\r\n        c2.2,0.7,2.9,1.7,2.9,3.6c0,1.8-0.8,2.9-2.9,3.5c-2.7,0.8-5.2,3.1-5.2,8.4v14.1c0,8.7-4.3,12.1-12,12.1h-2.5\r\n        C71.1,76.4,69.4,75.1,69.4,73.1z"/> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=15px viewBox="0 0 16 15" style="enable-background:new 0 0 16 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <circle class=st0 cx=12.6 cy=2.6 r=2.1 /> <line class=st0 x1=14.1 y1=4.1 x2=15.5 y2=5.5 /> </g> <path class=st0 d=M8.5,4.5h-7c-0.6,0-1-0.4-1-1v-1c0-0.6,0.4-1,1-1h7 /> <g> <path d=M1.8,6.5C1.3,6.5,1,6.8,1,7.2S1.3,8,1.8,8s0.8-0.3,0.8-0.8S2.2,6.5,1.8,6.5L1.8,6.5z /> </g> <g> <line class=st0 x1=4 y1=7.5 x2=12 y2=7.5 /> </g> <g> <path d=M1.8,10C1.3,10,1,10.3,1,10.8s0.3,0.8,0.8,0.8s0.8-0.3,0.8-0.8S2.2,10,1.8,10L1.8,10z /> </g> <g> <line class=st0 x1=4 y1=11 x2=12 y2=11 /> </g> <g> <path d=M1.8,13.5c-0.4,0-0.8,0.3-0.8,0.8S1.3,15,1.8,15s0.8-0.3,0.8-0.8S2.2,13.5,1.8,13.5L1.8,13.5z /> </g> <g> <line class=st0 x1=4 y1=14.5 x2=12 y2=14.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=15px viewBox="0 0 15 15" style="enable-background:new 0 0 15 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M13.5,14.5h-12c-0.6,0-1-0.4-1-1v-12c0-0.6,0.4-1,1-1h12c0.6,0,1,0.4,1,1v12C14.5,14.1,14.1,14.5,13.5,14.5z /> <line class=st0 x1=0.5 y1=4.5 x2=14.5 y2=4.5 /> <line class=st0 x1=7.5 y1=14.5 x2=7.5 y2=4.5 /> <line class=st0 x1=0.5 y1=9.5 x2=14.5 y2=9.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=15px viewBox="0 0 15 15" style="enable-background:new 0 0 15 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M2.3,4.6L1.9,7.2c0,0.3,0.1,0.5,0.3,0.7l6.3,6.3c0.4,0.4,1,0.4,1.4,0l4.2-4.2c0.4-0.4,0.4-1,0-1.4L7.8,2.1\n        C7.6,1.9,7.3,1.8,7.1,1.8L4.5,2.2"/> <circle class=st0 cx=5.1 cy=5.1 r=1 /> <line class=st0 x1=4.4 y1=4.4 x2=0.5 y2=0.5 /> </g> <line class=st0 x1=7.1 y1=7.1 x2=8.6 y2=5.7 /> <line class=st0 x1=8.6 y1=8.6 x2=10 y2=7.1 /> <line class=st0 x1=10 y1=10 x2=11.4 y2=8.6 /> <line class=st0 x1=5.7 y1=8.6 x2=8.6 y2=11.4 /> </svg> \0 '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=15px viewBox="0 0 15 15" style="enable-background:new 0 0 15 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M2.3,4.6L1.9,7.2c0,0.3,0.1,0.5,0.3,0.7l6.3,6.3c0.4,0.4,1,0.4,1.4,0l4.2-4.2c0.4-0.4,0.4-1,0-1.4L7.8,2.1\n        C7.6,1.9,7.3,1.8,7.1,1.8L4.5,2.2"/> <circle class=st0 cx=5.1 cy=5.1 r=1 /> <line class=st0 x1=4.4 y1=4.4 x2=0.5 y2=0.5 /> </g> <line class=st0 x1=7.1 y1=7.1 x2=8.6 y2=5.7 /> <line class=st0 x1=8.6 y1=8.6 x2=10 y2=7.1 /> <line class=st0 x1=10 y1=10 x2=11.4 y2=8.6 /> <line class=st0 x1=5.7 y1=8.6 x2=8.6 y2=11.4 /> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=14px height=16px viewBox="0 0 14 16" style="enable-background:new 0 0 14 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M11.5,0.5h-9C2.2,0.5,2,0.7,2,1v2c0,0.3,0.2,0.5,0.5,0.5h9C11.8,3.5,12,3.3,12,3V1C12,0.7,11.8,0.5,11.5,0.5z /> <line class=st0 x1=7 y1=3.5 x2=7 y2=12.5 /> <path class=st0 d=M2,12.5v-3c0-0.6,0.4-1,1-1h8c0.6,0,1,0.4,1,1v3 /> <circle class=st0 cx=2 cy=14 r=1.5 /> <circle class=st0 cx=7 cy=14 r=1.5 /> <circle class=st0 cx=12 cy=14 r=1.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=14px viewBox="0 0 15 14" style="enable-background:new 0 0 15 14" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <path class=st0 d=M13.5,0.5h-12c-0.6,0-1,0.4-1,1v11c0,0.6,0.4,1,1,1h12c0.6,0,1-0.4,1-1v-11C14.5,0.9,14.1,0.5,13.5,0.5z /> <line class=st0 x1=0.5 y1=3.5 x2=14.5 y2=3.5 /> </g> <g> <path class=st0 d=M6,9.5H3C2.7,9.5,2.5,9.3,2.5,9V6c0-0.3,0.2-0.5,0.5-0.5h3c0.3,0,0.5,0.2,0.5,0.5v3C6.5,9.3,6.3,9.5,6,9.5z /> <line class=st0 x1=2.5 y1=11.5 x2=6.5 y2=11.5 /> <path class=st0 d="M12,11.5H9c-0.3,0-0.5-0.2-0.5-0.5V6c0-0.3,0.2-0.5,0.5-0.5h3c0.3,0,0.5,0.2,0.5,0.5v5\n            C12.5,11.3,12.3,11.5,12,11.5z"/> <line class=st0 x1=8.5 y1=8.5 x2=12.5 y2=8.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px class=stroke-current viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,11.5h-13c-0.6,0-1-0.4-1-1v-5c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v5C15.5,11.1,15.1,11.5,14.5,11.5z /> <g> <line class=st0 x1=11.5 y1=12.5 x2=11.5 y2=3.5 /> <path class=st0 d=M8.5,15.5c1.7,0,3-1.3,3-3c0,1.7,1.3,3,3,3 /> <path class=st0 d=M8.5,0.5c1.7,0,3,1.3,3,3c0-1.7,1.3-3,3-3 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,15.5h-13c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v13C15.5,15.1,15.1,15.5,14.5,15.5z /> <line class=st0 x1=6.5 y1=3.5 x2=12.5 y2=3.5 /> <line class=st0 x1=3.5 y1=9.5 x2=12.5 y2=9.5 /> <line class=st0 x1=3.5 y1=6.5 x2=12.5 y2=6.5 /> <line class=st0 x1=3.5 y1=12.5 x2=8.5 y2=12.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <line class=st0 x1=5.5 y1=15.5 x2=10.5 y2=15.5 /> <line class=st0 x1=8 y1=13.5 x2=8 y2=15.5 /> <line class=st0 x1=0.5 y1=11 x2=15.5 y2=11 /> <path class=st0 d=M14.5,2c0.6,0,1,0.4,1,1v9.5c0,0.6-0.4,1-1,1h-13c-0.6,0-1-0.4-1-1V3c0-0.6,0.4-1,1-1 /> <path class=st0 d=M3.5,9V1.5c0-0.6,0.4-1,1-1h7c0.6,0,1,0.4,1,1V9 /> <rect x=5.5 y=4.5 class=st0 width=2 height=2 /> <line class=st0 x1=3.5 y1=2.5 x2=12.5 y2=2.5 /> <line class=st0 x1=9.5 y1=4.5 x2=10.5 y2=4.5 /> <line class=st0 x1=9.5 y1=6 x2=10.5 y2=6 /> <line class=st0 x1=5.5 y1=8.5 x2=10.5 y2=8.5 /> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=15px viewBox="0 0 15 15" style="enable-background:new 0 0 15 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <circle class=st0 cx=7.5 cy=7.5 r=7 /> <circle class=st0 cx=7.5 cy=7.5 r=1 /> <line class=st0 x1=7.5 y1=6.5 x2=7.5 y2=3 /> <line class=st0 x1=8.2 y1=8.2 x2=10 y2=10 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=11px viewBox="0 0 16 11" style="enable-background:new 0 0 16 11" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <path class=st0 d=M0.5,2c0-0.8,0.7-1.5,1.5-1.5h5 /> <line class=st0 x1=4.5 y1=0.5 x2=4.5 y2=10.5 /> <line class=st0 x1=2.5 y1=10.5 x2=6.5 y2=10.5 /> </g> <g> <path class=st0 d=M9,0.5h5c0.8,0,1.5,0.7,1.5,1.5 /> <line class=st0 x1=11.5 y1=0.5 x2=11.5 y2=10.5 /> <line class=st0 x1=9.5 y1=10.5 x2=13.5 y2=10.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill-rule:evenodd;clip-rule:evenodd;fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M12.2,7H3.8C2,7,0.5,5.5,0.5,3.8l0,0C0.5,2,2,0.5,3.8,0.5h8.5c1.8,0,3.2,1.5,3.2,3.2l0,0C15.5,5.5,14,7,12.2,7\n        z"/> <path class=st0 d="M12.2,15.5H3.8c-1.8,0-3.2-1.5-3.2-3.2l0,0C0.5,10.5,2,9,3.8,9h8.5c1.8,0,3.2,1.5,3.2,3.2l0,0\n        C15.5,14,14,15.5,12.2,15.5z"/> <circle class=st0 cx=3.8 cy=3.8 r=1.2 /> <circle class=st0 cx=12.2 cy=12.2 r=1.2 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=8 cy=11.2 r=1.8 /> <path class=st0 d=M10.8,15.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2 /> </g> <g> <circle class=st0 cx=3.3 cy=2.2 r=1.8 /> <path class=st0 d=M6.1,6.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2H6.1z /> </g> <g> <circle class=st0 cx=12.7 cy=2.2 r=1.8 /> <path class=st0 d=M15.5,6.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2H15.5z /> </g> <path class=st0 d=M2.5,8.5V11c0,0.8,0.7,1.5,1.5,1.5h0.5 /> <path class=st0 d=M13.5,8.5V11c0,0.8-0.7,1.5-1.5,1.5h-0.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=3.5 cy=2.5 r=2 /> <path class=st0 d=M5,15.5l0.5-5h1v-2c0-1.7-1.3-3-3-3c-1.7,0-3,1.3-3,3v2h1l0.5,5H5z /> </g> <g> <path class=st0 d="M13,3.5h2c0.3,0,0.5-0.2,0.5-0.5V1c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,3.3,12.7,3.5,13,3.5z"/> <path class=st0 d="M13,9.5h2c0.3,0,0.5-0.2,0.5-0.5V7c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,9.3,12.7,9.5,13,9.5z"/> <path class=st0 d="M13,15.5h2c0.3,0,0.5-0.2,0.5-0.5v-2c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,15.3,12.7,15.5,13,15.5z"/> <line class=st0 x1=12.5 y1=7.5 x2=8.5 y2=7.5 /> <path class=st0 d=M12.5,1.5h-1c-0.6,0-1,0.4-1,1v10c0,0.6,0.4,1,1,1h1 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=8 cy=11.2 r=1.8 /> <path class=st0 d=M10.8,15.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2 /> </g> <g> <circle class=st0 cx=3.3 cy=2.2 r=1.8 /> <path class=st0 d=M6.1,6.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2H6.1z /> </g> <g> <circle class=st0 cx=12.7 cy=2.2 r=1.8 /> <path class=st0 d=M15.5,6.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2H15.5z /> </g> <path class=st0 d=M2.5,8.5V11c0,0.8,0.7,1.5,1.5,1.5h0.5 /> <path class=st0 d=M13.5,8.5V11c0,0.8-0.7,1.5-1.5,1.5h-0.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=3.5 cy=2.5 r=2 /> <path class=st0 d=M5,15.5l0.5-5h1v-2c0-1.7-1.3-3-3-3c-1.7,0-3,1.3-3,3v2h1l0.5,5H5z /> </g> <g> <path class=st0 d="M13,3.5h2c0.3,0,0.5-0.2,0.5-0.5V1c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,3.3,12.7,3.5,13,3.5z"/> <path class=st0 d="M13,9.5h2c0.3,0,0.5-0.2,0.5-0.5V7c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,9.3,12.7,9.5,13,9.5z"/> <path class=st0 d="M13,15.5h2c0.3,0,0.5-0.2,0.5-0.5v-2c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,15.3,12.7,15.5,13,15.5z"/> <line class=st0 x1=12.5 y1=7.5 x2=8.5 y2=7.5 /> <path class=st0 d=M12.5,1.5h-1c-0.6,0-1,0.4-1,1v10c0,0.6,0.4,1,1,1h1 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=5.5 cy=7.2 r=1.8 /> <path class=st0 d=M2.5,12.5c0-1.7,1.3-3,3-3c1.7,0,3,1.3,3,3H2.5z /> </g> <line class=st0 x1=9.5 y1=7.5 x2=12.5 y2=7.5 /> <line class=st0 x1=9.5 y1=9.5 x2=13.5 y2=9.5 /> <path class=st0 d="M14.5,3.5h-13c-0.6,0-1,0.4-1,1v10c0,0.6,0.4,1,1,1h2c0-0.6,0.4-1,1-1c0.6,0,1,0.4,1,1h5c0-0.6,0.4-1,1-1\n        c0.6,0,1,0.4,1,1h2c0.6,0,1-0.4,1-1v-10C15.5,3.9,15.1,3.5,14.5,3.5z"/> <path class=st0 d=M15.5,1.5c0-0.6-0.4-1-1-1h-13c-0.6,0-1,0.4-1,1 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=13px viewBox="0 0 16 13" style="enable-background:new 0 0 16 13" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M6.9,4.6c-0.2-0.1-0.4-0.1-0.6,0C6.1,4.7,6,4.9,6,5.1v2.8c0,0.2,0.1,0.4,0.3,0.5c0.2,0.1,0.4,0.1,0.6,0\n        l2.7-1.3C9.8,7.1,10,6.8,10,6.5S9.8,5.9,9.6,5.8L6.9,4.6z"/> <path class=st0 d="M12.2,12.5H3.8c-0.4,0-0.8-0.3-0.8-0.8V1.3c0-0.4,0.3-0.8,0.8-0.8h8.4c0.4,0,0.8,0.3,0.8,0.8v10.4\n        C13,12.2,12.7,12.5,12.2,12.5z"/> <path class=st0 d=M1.3,2C0.9,2,0.5,2.4,0.5,2.8v7.4c0,0.4,0.4,0.8,0.8,0.8 /> <path class=st0 d=M14.7,2c0.4,0,0.8,0.4,0.8,0.8v7.4c0,0.4-0.4,0.8-0.8,0.8 /> </g> </svg> '},function(e,t){e.exports='<svg class=stroke-current width=16px height=12px viewBox="0 0 16 12" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <g stroke=none stroke-width=1 fill=none fill-rule=evenodd stroke-linecap=round stroke-linejoin=round> <path d="M15.4997,4.5 L7.9997,4.5 C6.6187,4.5 5.4997,5.619 5.4997,7" stroke=currentColor></path> <polyline stroke=currentColor points="13.4997 2.5 15.4997 4.5 13.4997 6.5"></polyline> <path d="M11.4997,1.5 C11.4997,0.947 11.0527,0.5 10.4997,0.5 L1.4997,0.5 C0.9477,0.5 0.4997,0.947 0.4997,1.5 L0.4997,10.5 C0.4997,11.053 0.9477,11.5 1.4997,11.5 L10.4997,11.5 C11.0527,11.5 11.4997,11.053 11.4997,10.5 L11.4997,7.5" stroke=currentColor></path> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,15.5h-13c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v13C15.5,15.1,15.1,15.5,14.5,15.5z /> <g> <g> <path class=st0 d=M4.5,7v1.5c0,0.6,0.4,1,1,1s1-0.4,1-1V7 /> <line class=st0 x1=5.5 y1=9.5 x2=5.5 y2=12 /> </g> <g> <polyline class=st0 points="11.5,12 11.5,7 10,9.5 8.5,7 8.5,12"/> </g> </g> </g> </svg> '},function(e,t){e.exports=" <div :class=\"[ 'svg-icon', { 'using-div': type === 'div', 'using-svg': type === 'svg' } ]\" v-html=html></div> "},function(e,t,i){var s,n,a={};s=i(468),n=i(469),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{extension:String,type:{type:String,default:function(){return"svg"}}},computed:{name:function(){switch(this.extension){case"folder":return"folder";case"7z":case"pkg":case"rar":case"tar":case"tar.zg":case"z":case"zip":return"file-archive";case"aac":case"aif":case"cda":case"flac":case"m4a":case"mp3":case"mp4a":case"mpa":case"ogg":case"mid":case"midi":case"wav":case"wma":return"file-audio";case"doc":case"docx":return"file-doc";case"xls":case"xlsx":return"file-excel";case"json":return"file-json";case"ai":case"eps":case"indb":case"psd":case"sketch":return"file-layered";case"pdf":return"file-pdf";case"key":case"odp":case"pps":case"ppt":case"pptx":return"file-presentation";case"3g2":case"3gp":case"avi":case"flv":case"h264":case"m4v":case"mvk":case"mp4":case"mpg":case"mpeg":case"mov":case"rm":case"swf":case"vob":case"wmv":return"file-video";case"xml":return"file-xml";case"bmp":case"gif":case"ico":case"jpg":case"jpeg":case"png":case"tiff":return"picture";default:return"file-generic"}}}}},function(e,t){e.exports=" <svg-icon class=file-icon :type=type :name=name></svg-icon> "},function(e,t,i){(function(t,s){i(17),e.exports={template:i(471),props:{endpoint:String,type:{type:String,default:""},no_results_heading:{type:String,default:"This group has no items."},no_results_subheading:{type:String,default:!1},no_results_button:{type:String,default:"New Item"},new_url:{type:String,default:""},deleteMultiConfirmation:{type:String,default:"You are about to delete multiple entries."},mode:{type:String,default:"normal"}},components:{"field-status":i(472),"field-default":i(473)},data:function(){return{loading:!0,list:{rows:[],actions:{}},reordering:!1,search:null}},computed:{hasActions:function(){return this.list.actions.length},checkedEntries:function(){return this.list.rows.filter(function(e){return e.checked}).map(function(e){return e.uuid})},allEntriesChecked:function(){return this.list.rows.length===this.checkedEntries.length}},methods:{deleteItem:function(e,t,i,s){s.preventDefault(),self=this,swal({title:"Are you sure?",text:"You are about to delete this entry.",type:"warning",showCancelButton:!0,confirmButtonText:"Yes I'm sure.",closeOnConfirm:!1},function(){self.$http.delete(i,{uuid:e.uuid},function(e,i,s){swal("Deleted!","Your entry has been deleted.","success"),self.list.rows.$remove(t)})})},deleteMultiple:function(){var e=this;e.$event.preventDefault(),swal({title:"Are you sure?",text:e.deleteMultiConfirmation,type:"warning",showCancelButton:!0,confirmButtonText:"Yes I'm sure.",closeOnConfirm:!1},function(){e.$http.post(e.list.actions.delete.endpoint,{uuids:e.checkedEntries},function(t,i,s){swal("Deleted!","Your entries have been deleted.","success"),e.list.rows=e.list.rows.filter(function(e){return!1===e.checked})})})},checkAllEntries:function(){var e=!this.allEntriesChecked;t.each(this.list.rows,function(t){t.checked=e})},reset:function(){this.search=""},toggleReorder:function(e){e.preventDefault(),self=this,this.reordering=!this.reordering,s(".sortable tbody").sortable({axis:"y",revert:175,placeholder:"placeholder",forcePlaceholderSize:!0,start:function(e,t){t.item.data("start",t.item.index())},update:function(e,t){var i=t.item.data("start"),s=t.item.index();self.list.rows.splice(s,0,self.list.rows.splice(i,1)[0])}}).disableSelection()},saveOrder:function(e,t){t.preventDefault(),self=this;var i=s.map(this.list.rows,function(e,t){return e.uuid});this.$http.post(e,{uuids:i},function(e,t,i){console.log("Entries Reordered"),self.reordering=!1})},resolveComponent:function(e){return"field-"+e in this.$options.components?"field-"+e:"field-default"}},ready:function(){this.$http.get(this.endpoint,function(e,t,i){this.list=e,this.loading=!1})}}}).call(t,i(1),i(2))},function(e,t){e.exports='<div> <div v-if=loading class=loading> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if="!loading && list.rows && !list.rows.length"> <div class=no-results> <span class="icon icon-documents"></span> <h2>{{ no_results_heading }}</h2> <h3 v-if=no_results_subheading>{{ no_results_subheading }}</h3> <a href="{{ new_url }}" class="btn btn-default btn-lg">{{ no_results_button }}</a> </div> </div> <div v-if="!loading && list.rows && list.rows.length" class=actions> <div class=actions-controls v-if=hasActions> <input type=checkbox id=checkbox-all :checked=allEntriesChecked v-on:click=checkAllEntries> <label for=checkbox-all></label> <template v-if=list.actions.delete> <a :href=list.actions.delete.endpoint class=btn v-on:click=deleteMultiple> {{ translate(\'cp.delete\') }} </a> </template> <template v-if=list.actions.reorder> <a href="" v-on:click=toggleReorder($event) class=btn v-show="! reordering">{{ translate(\'cp.reorder\') }}</a> <a href="" v-on:click="saveOrder(list.actions.reorder.endpoint, $event)" class=btn v-show=reordering>{{ translate(\'cp.save_order\') }}</a> </template> </div> <input type=text :placeholder="\'Search \' + type" v-on:keydown.esc=reset v-model=search name=query class="search pull-right"> </div> <table v-if="!loading && list.rows && list.rows.length" class="sortable control"> <thead> <tr> <th class=checkbox-col v-if="hasActions || reordering"></th> <th v-if=hasStatus>{{ translate_choice(\'cp.statuses\', 1) }}</th> <th v-for="key in list.columns" :class="\'column-\' + key"> {{ key }} </th> <th class=column-actions>{{ translate_choice(\'cp.actions\', 2) }}</th> </tr> </thead> <tbody> <tr v-for="entry in list.rows | filterBy search" style=background:#fff> <td class=checkbox-col v-if="hasActions || reordering"> <div v-show="! reordering"> <input type=checkbox :id="\'checkbox-\' + $index" v-model=entry.checked> <label :for="\'checkbox-\' + $index"></label> </div> <div class=drag-handle v-show=reordering> <i class="fa fa-bars"></i> </div> </td> <td v-for="key in list.columns" :class="\'column-\' + key"> <component :is=resolveComponent(key) :entry=entry :type=key :primary=list.primary> </component> </td> <td class=column-actions> <div class=btn-group> <button type=button class="btn-more dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <li v-if=list.actions> <a href=""> {{ translate(\'cp.view\') }} </a> </li> <li v-if=list.actions.delete class=warning> <a href="" v-on:click="deleteItem(entry, $index, list.actions.delete.endpoint, $event)"> {{ list.actions.delete.label }} </a> </li> </ul> </div> </td> </tr> </tbody> </table> </div> '},function(e,t){e.exports={props:["entry","key","type","primary","is"],computed:{statusClass:function(){return"status status-"+(this.entry.published?"live":"hidden")}},template:'<span :class="statusClass"></span>'}},function(e,t){e.exports={props:["entry","type","primary"],template:'<a :href="entry.publish_url" v-if="primary === type">{{ entry[type] }}</a><template v-if="primary !== type">{{ entry[type] }}</template>'}},function(e,t,i){i(17),e.exports={props:{type:{type:String,default:null},title:{type:String,default:null},timer:{type:String,default:null},text:{type:String,default:null},button:{type:Boolean,default:!0}},ready:function(){swal.setDefaults({confirmButtonColor:"#748885"}),"confirm"===this.type?swal({title:this.title,text:this.text,type:"warning",showCancelButton:!0,confirmButtonText:"Yes. Do it.",closeOnConfirm:!1}):swal({title:this.title,text:this.text,timer:this.timer,type:this.type,showConfirmButton:this.button})}}},function(e,t,i){(function(t,s){e.exports={template:i(476),props:["data","config","name","fields","fieldtypes","root"],data:function(){return{selectedField:null}},computed:{hasFields:function(){return this.fields&&this.fields.length},selectedFieldConfig:function(){if(null===this.selectedField)return[];var e=this.fields[this.selectedField].type;return t.findWhere(this.fieldtypes,{name:e}).config}},methods:{addField:function(e){var i=(this.fields.length||0)+1,n=t.findWhere(this.fieldtypes,{name:e}),a=s.extend({},n);a.type=a.name,a.name="field_"+i,a.id="field_"+i,a.display="Field "+i,a.instructions=null,a.isNew=!0,delete a.config,delete a.label,delete a.canBeValidated,delete a.canBeLocalized,delete a.canHaveDefault,"title"===a.type?(a.display=translate("cp.title"),a.name="title",this.fields.unshift(a),this.selectedField=0):(this.fields.push(a),this.selectedField=i-1),this.$emit("field-added",a)},selectField:function(e){this.selectedField=e,this.tab="edit"},deleteField:function(e){this.selectedField=null,this.$emit("field-deleted",this.fields[e].id),this.fields.splice(e,1)},sortFields:function(e,t){this.fields.splice(t,0,this.fields.splice(e,1)[0]),this.ensureTitleIsFirst()},ensureTitleIsFirst:function(){var e=t.indexOf(this.fields,t.findWhere(this.fields,{name:"title"}));-1!==e&&"title"!==this.fields[0].name&&this.sortFields(e,0)}},ready:function(){this.fields=this.fields||[],this.root=Boolean(this.root||!1),this.ensureTitleIsFirst()}}}).call(t,i(1),i(2))},function(e,t){e.exports="<div class=fields-builder> <fieldset-fields v-show=hasFields :fields.sync=fields :fieldtypes=fieldtypes :selected-field.sync=selectedField :fieldtype-config=selectedFieldConfig :on-select=selectField :on-delete=deleteField :on-sort=sortFields :root=root> </fieldset-fields> <fieldtype-selector :fieldtypes=fieldtypes @field-selected=addField> </fieldtype-selector> </div> "},function(e,t,i){var s,n,a={};s=i(478),n=i(509),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(164),n=i.n(s),a=i(6);i.n(a);t.default={components:{FieldsetField:n.a},props:{fields:{},section:{},parentKey:{},fieldtypes:{},classes:{},isAdding:{type:Boolean,default:!1},isQuickAdding:{type:Boolean,default:!1}},computed:{isRootLevel:function(){return this.$parent.$el.classList.contains("section-layout")},allowAddingTitleField:function(){return this.isRootLevel&&!e.pluck(this.fields,"name").includes("title")},allowAddingSlugField:function(){return this.isRootLevel&&!e.pluck(this.fields,"name").includes("slug")},allowAddingDateField:function(){return this.isRootLevel&&!e.pluck(this.fields,"name").includes("date")}},ready:function(){null==this.fields&&(this.fields=[]),this.sortable()},methods:{sortable:function(){var e=this;if(!this.isRootLevel){var t=this.$el;new a.Sortable(t,{draggable:".section-field--"+this.parentKey,handle:".field-drag-handle--"+this.parentKey,appendTo:t,mirror:{constrainDimensions:!0}}).on("sortable:stop",function(t){e.fields.splice(t.newIndex,0,e.fields.splice(t.oldIndex,1)[0])})}},add:function(t){var i=this,s=this.fields||[],n=s.length+1;t.isMeta||(t.name="field_"+n,t.id="field_"+n,t.display="Field "+n),s.push(t),this.fields=s,this.isSelecting=!1,this.$notify.success(translate("cp.field_added",{fieldtype:t.isMeta?t.display:e.find(this.fieldtypes,{name:t.type}).label})),this.$nextTick(function(){var e=i.$refs.fields[n-1];i.isQuickAdding?e.focus():e.edit()})},updateFieldWidths:function(){this.$refs.fields&&e.each(this.$refs.fields,function(e){return e.updateFieldWidths()})},remove:function(e){confirm(translate("cp.are_you_sure"))&&this.fields.splice(e,1)}}}}.call(t,i(1))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(480),n=i.n(s),a=i(491),o=i.n(a),r=i(167),l=i.n(r),c=i(502),d=i.n(c),u=n()({strategy:"scroll"});t.default={components:{FieldSettings:o.a,WidthSelector:l.a,ReplicatorSets:d.a},props:{field:{},fieldtypes:{},section:{},isFirstField:{},isLastField:{},parentKey:{default:""}},data:function(){return{handleModified:!1,isEditing:!1,isShowingGridFields:!1,isShowingSets:!1,isAddingGridField:!1,displayFieldWidth:"100%",nameFieldWidth:"100%",width:null,height:null}},computed:{display:function(){return this.field.display},name:function(){return this.field.name},icon:function(){if(this.isMeta){if("title"===this.field.name)return"text";if("slug"===this.field.name)return"location-pin";if("date"===this.field.name)return"calendar"}return e.find(this.fieldtypes,{name:this.field.type}).icon},fieldKey:function(){return""==this.parentKey?this.field.id:this.parentKey+"-"+this.field.id},fieldtype:function(){return e.findWhere(this.fieldtypes,{name:this.field.type})},fieldtypeConfig:function(){return this.fieldtype.config},fieldtypeLabel:function(){return this.fieldtype.label},otherSections:function(){var t=this;return e.filter(this.$parent.$parent.sections,function(e){return e.id!==t.section.id})},isRootLevel:function(){return this.$parent.isRootLevel},isGridField:function(){return"grid"===this.field.type},isReplicatorField:function(){return["replicator","bard"].includes(this.field.type)},classes:function(){return["section-field","section-field--"+this.parentKey,"w-full md:"+tailwind_width_class(this.field.width),{"is-editing":this.isEditing,"root-level-section-field":this.isRootLevel,"is-first-field":this.isFirstField,"is-last-field":this.isLastField,"is-tiny":this.isTiny}]},canBeLocalized:function(){return this.isRootLevel&&Object.keys(Statamic.locales).length>1&&this.fieldtype.canBeLocalized},isTiny:function(){return this.width<400}},watch:{display:function(e){var t=this;this.handleModified||(this.field.name=this.$slugify(e,"_")),this.$nextTick(function(){return t.updateFieldWidths()})},name:function(e){this.updateFieldWidths()},isShowingGridFields:function(e){var t=this;e&&this.$nextTick(function(){return t.$refs.fields.updateFieldWidths()})},isShowingSets:function(e){var t=this;e&&this.$nextTick(function(){return t.$refs.sets.updateFieldWidths()})}},ready:function(){var e=this;u.listenTo(this.$el,function(t){e.width=t.offsetWidth,e.height=t.offsetHeight}),this.handleModified=!this.field.isNew||this.field.isMeta,this.updateFieldWidths()},methods:{focus:function(){this.$els.display.select()},edit:function(){var e=this;this.isEditing=!0,this.$nextTick(function(){return e.$refs.settings.focus()})},addField:function(){this.isAddingGridField=!0,this.isShowingGridFields=!0},fieldSelectorClosed:function(){this.isAddingGridField=!1,0===this.field.fields.length&&(this.isShowingGridFields=!1)},updateFieldWidths:function(){this.displayFieldWidth=this.$els.fieldDisplaySizer.offsetWidth+"px",this.nameFieldWidth=this.$els.fieldNameSizer.offsetWidth+"px"},addReplicatorSet:function(){this.isShowingSets=!0,this.$refs.sets.add()}}}}.call(t,i(1))},function(e,t,i){"use strict";var s=i(165).forEach,n=i(481),a=i(482),o=i(483),r=i(484),l=i(485),c=i(166),d=i(486),u=i(488),p=i(489),f=i(490);function h(e){return Array.isArray(e)||void 0!==e.length}function m(e){if(Array.isArray(e))return e;var t=[];return s(e,function(e){t.push(e)}),t}function g(e){return e&&1===e.nodeType}function v(e,t,i){var s=e[t];return void 0!==s&&null!==s||void 0===i?s:i}e.exports=function(e){var t;if((e=e||{}).idHandler)t={get:function(t){return e.idHandler.get(t,!0)},set:e.idHandler.set};else{var i=o(),x=r({idGenerator:i,stateHandler:u});t=x}var y=e.reporter;y||(y=l(!1===y));var b=v(e,"batchProcessor",d({reporter:y})),w={};w.callOnAdd=!!v(e,"callOnAdd",!0),w.debug=!!v(e,"debug",!1);var k,_=a(t),S=n({stateHandler:u}),C=v(e,"strategy","object"),A={reporter:y,batchProcessor:b,stateHandler:u,idHandler:t};if("scroll"===C&&(c.isLegacyOpera()?(y.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy."),C="object"):c.isIE(9)&&(y.warn("Scroll strategy is not supported on IE9. Changing to object strategy."),C="object")),"scroll"===C)k=f(A);else{if("object"!==C)throw new Error("Invalid strategy name: "+C);k=p(A)}var M={};return{listenTo:function(e,i,n){function a(e){var t=_.get(e);s(t,function(t){t(e)})}function o(e,t,i){_.add(t,i),e&&i(t)}if(n||(n=i,i=e,e={}),!i)throw new Error("At least one element required.");if(!n)throw new Error("Listener required.");if(g(i))i=[i];else{if(!h(i))return y.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");i=m(i)}var r=0,l=v(e,"callOnAdd",w.callOnAdd),c=v(e,"onReady",function(){}),d=v(e,"debug",w.debug);s(i,function(e){u.getState(e)||(u.initState(e),t.set(e));var p=t.get(e);if(d&&y.log("Attaching listener to element",p,e),!S.isDetectable(e))return d&&y.log(p,"Not detectable."),S.isBusy(e)?(d&&y.log(p,"System busy making it detectable"),o(l,e,n),M[p]=M[p]||[],void M[p].push(function(){++r===i.length&&c()})):(d&&y.log(p,"Making detectable..."),S.markBusy(e,!0),k.makeDetectable({debug:d},e,function(e){if(d&&y.log(p,"onElementDetectable"),u.getState(e)){S.markAsDetectable(e),S.markBusy(e,!1),k.addListener(e,a),o(l,e,n);var t=u.getState(e);if(t&&t.startSize){var f=e.offsetWidth,h=e.offsetHeight;t.startSize.width===f&&t.startSize.height===h||a(e)}M[p]&&s(M[p],function(e){e()})}else d&&y.log(p,"Element uninstalled before being detectable.");delete M[p],++r===i.length&&c()}));d&&y.log(p,"Already detecable, adding listener."),o(l,e,n),r++}),r===i.length&&c()},removeListener:_.removeListener,removeAllListeners:_.removeAllListeners,uninstall:function(e){if(!e)return y.error("At least one element is required.");if(g(e))e=[e];else{if(!h(e))return y.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");e=m(e)}s(e,function(e){_.removeAllListeners(e),k.uninstall(e),u.cleanState(e)})}}}},function(e,t,i){"use strict";e.exports=function(e){var t=e.stateHandler.getState;return{isDetectable:function(e){var i=t(e);return i&&!!i.isDetectable},markAsDetectable:function(e){t(e).isDetectable=!0},isBusy:function(e){return!!t(e).busy},markBusy:function(e,i){t(e).busy=!!i}}}},function(e,t,i){"use strict";e.exports=function(e){var t={};function i(i){var s=e.get(i);return void 0===s?[]:t[s]||[]}return{get:i,add:function(i,s){var n=e.get(i);t[n]||(t[n]=[]),t[n].push(s)},removeListener:function(e,t){for(var s=i(e),n=0,a=s.length;n<a;++n)if(s[n]===t){s.splice(n,1);break}},removeAllListeners:function(e){var t=i(e);t&&(t.length=0)}}}},function(e,t,i){"use strict";e.exports=function(){var e=1;return{generate:function(){return e++}}}},function(e,t,i){"use strict";e.exports=function(e){var t=e.idGenerator,i=e.stateHandler.getState;return{get:function(e){var t=i(e);return t&&void 0!==t.id?t.id:null},set:function(e){var s=i(e);if(!s)throw new Error("setId required the element to have a resize detection state.");var n=t.generate();return s.id=n,n}}}},function(e,t,i){"use strict";e.exports=function(e){function t(){}var i={log:t,warn:t,error:t};if(!e&&window.console){var s=function(e,t){e[t]=function(){var e=console[t];if(e.apply)e.apply(console,arguments);else for(var i=0;i<arguments.length;i++)e(arguments[i])}};s(i,"log"),s(i,"warn"),s(i,"error")}return i}},function(e,t,i){"use strict";var s=i(487);function n(){var e={},t=0,i=0,s=0;return{add:function(n,a){a||(a=n,n=0),n>i?i=n:n<s&&(s=n),e[n]||(e[n]=[]),e[n].push(a),t++},process:function(){for(var t=s;t<=i;t++)for(var n=e[t],a=0;a<n.length;a++)(0,n[a])()},size:function(){return t}}}e.exports=function(e){var t=(e=e||{}).reporter,i=s.getOption(e,"async",!0),a=s.getOption(e,"auto",!0);a&&!i&&(t&&t.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true."),i=!0);var o,r=n(),l=!1;function c(){for(l=!0;r.size();){var e=r;r=n(),e.process()}l=!1}function d(){var e;e=c,o=setTimeout(e,0)}return{add:function(e,t){!l&&a&&i&&0===r.size()&&d(),r.add(e,t)},force:function(e){l||(void 0===e&&(e=i),o&&(clearTimeout(o),o=null),e?d():c())}}}},function(e,t,i){"use strict";(e.exports={}).getOption=function(e,t,i){var s=e[t];if((void 0===s||null===s)&&void 0!==i)return i;return s}},function(e,t,i){"use strict";var s="_erd";function n(e){return e[s]}e.exports={initState:function(e){return e[s]={},n(e)},getState:n,cleanState:function(e){delete e[s]}}},function(e,t,i){"use strict";var s=i(166);e.exports=function(e){var t=(e=e||{}).reporter,i=e.batchProcessor,n=e.stateHandler.getState;if(!t)throw new Error("Missing required dependency: reporter.");function a(e){return n(e).object}return{makeDetectable:function(e,a,o){o||(o=a,a=e,e=null),(e=e||{}).debug,s.isIE(8)?o(a):function(e,a){var o="display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; padding: 0; margin: 0; opacity: 0; z-index: -1000; pointer-events: none;",r=!1,l=window.getComputedStyle(e),c=e.offsetWidth,d=e.offsetHeight;function u(){function i(){if("static"===l.position){e.style.position="relative";var i=function(e,t,i,s){var n=i[s];"auto"!==n&&"0"!==function(e){return e.replace(/[^-\d\.]/g,"")}(n)&&(e.warn("An element that is positioned static has style."+s+"="+n+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+s+" will be set to 0. Element: ",t),t.style[s]=0)};i(t,e,l,"top"),i(t,e,l,"right"),i(t,e,l,"bottom"),i(t,e,l,"left")}}""!==l.position&&(i(),r=!0);var c=document.createElement("object");c.style.cssText=o,c.tabIndex=-1,c.type="text/html",c.onload=function(){r||i(),function e(t,i){t.contentDocument?i(t.contentDocument):setTimeout(function(){e(t,i)},100)}(this,function(t){a(e)})},s.isIE()||(c.data="about:blank"),e.appendChild(c),n(e).object=c,s.isIE()&&(c.data="about:blank")}n(e).startSize={width:c,height:d},i?i.add(u):u()}(a,o)},addListener:function(e,t){if(!a(e))throw new Error("Element is not detectable by this strategy.");function i(){t(e)}s.isIE(8)?(n(e).object={proxy:i},e.attachEvent("onresize",i)):a(e).contentDocument.defaultView.addEventListener("resize",i)},uninstall:function(e){s.isIE(8)?e.detachEvent("onresize",n(e).object.proxy):e.removeChild(a(e)),delete n(e).object}}}},function(e,t,i){"use strict";var s=i(165).forEach;e.exports=function(e){var t=(e=e||{}).reporter,i=e.batchProcessor,n=e.stateHandler.getState,a=(e.stateHandler.hasState,e.idHandler);if(!i)throw new Error("Missing required dependency: batchProcessor");if(!t)throw new Error("Missing required dependency: reporter.");var o=function(){var e=document.createElement("div");e.style.cssText="position: absolute; width: 1000px; height: 1000px; visibility: hidden; margin: 0; padding: 0;";var t=document.createElement("div");t.style.cssText="position: absolute; width: 500px; height: 500px; overflow: scroll; visibility: none; top: -1500px; left: -1500px; visibility: hidden; margin: 0; padding: 0;",t.appendChild(e),document.body.insertBefore(t,document.body.firstChild);var i=500-t.clientWidth,s=500-t.clientHeight;return document.body.removeChild(t),{width:i,height:s}}(),r="erd_scroll_detection_container";function l(e,i,s){if(e.addEventListener)e.addEventListener(i,s);else{if(!e.attachEvent)return t.error("[scroll] Don't know how to add event listeners.");e.attachEvent("on"+i,s)}}function c(e,i,s){if(e.removeEventListener)e.removeEventListener(i,s);else{if(!e.detachEvent)return t.error("[scroll] Don't know how to remove event listeners.");e.detachEvent("on"+i,s)}}function d(e){return n(e).container.childNodes[0].childNodes[0].childNodes[0]}function u(e){return n(e).container.childNodes[0].childNodes[0].childNodes[1]}return function(e,t){if(!document.getElementById(e)){var i=t+"_animation",s=t+"_animation_active",n="/* Created by the element-resize-detector library. */\n";n+="."+t+" > div::-webkit-scrollbar { display: none; }\n\n",n+="."+s+" { -webkit-animation-duration: 0.1s; animation-duration: 0.1s; -webkit-animation-name: "+i+"; animation-name: "+i+"; }\n",n+="@-webkit-keyframes "+i+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n",function(t,i){i=i||function(e){document.head.appendChild(e)};var s=document.createElement("style");s.innerHTML=t,s.id=e,i(s)}(n+="@keyframes "+i+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }")}}("erd_scroll_detection_scrollbar_style",r),{makeDetectable:function(e,c,p){function f(){if(e.debug){var i=Array.prototype.slice.call(arguments);if(i.unshift(a.get(c),"Scroll: "),t.log.apply)t.log.apply(null,i);else for(var s=0;s<i.length;s++)t.log(i[s])}}function h(e){var t=n(e).container.childNodes[0],i=window.getComputedStyle(t);return!i.width||-1===i.width.indexOf("px")}function m(){var e=window.getComputedStyle(c),t={};return t.position=e.position,t.width=c.offsetWidth,t.height=c.offsetHeight,t.top=e.top,t.right=e.right,t.bottom=e.bottom,t.left=e.left,t.widthCSS=e.width,t.heightCSS=e.height,t}function g(){if(f("storeStyle invoked."),n(c)){var e=m();n(c).style=e}else f("Aborting because element has been uninstalled")}function v(e,t,i){n(e).lastWidth=t,n(e).lastHeight=i}function x(){return 2*o.width+1}function y(){return 2*o.height+1}function b(e){return e+10+x()}function w(e){return e+10+y()}function k(e,t,i){var s=d(e),n=u(e),a=b(t),o=w(i),r=function(e){return 2*e+x()}(t),l=function(e){return 2*e+y()}(i);s.scrollLeft=a,s.scrollTop=o,n.scrollLeft=r,n.scrollTop=l}function _(){var e=n(c).container;if(!e){(e=document.createElement("div")).className=r,e.style.cssText="visibility: hidden; display: inline; width: 0px; height: 0px; z-index: -1; overflow: hidden; margin: 0; padding: 0;",n(c).container=e,function(e){e.className+=" "+r+"_animation_active"}(e),c.appendChild(e);var t=function(){n(c).onRendered&&n(c).onRendered()};l(e,"animationstart",t),n(c).onAnimationStart=t}return e}function S(){if(f("Injecting elements"),n(c)){!function(){var e=n(c).style;if("static"===e.position){c.style.position="relative";var i=function(e,t,i,s){var n=i[s];"auto"!==n&&"0"!==function(e){return e.replace(/[^-\d\.]/g,"")}(n)&&(e.warn("An element that is positioned static has style."+s+"="+n+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+s+" will be set to 0. Element: ",t),t.style[s]=0)};i(t,c,e,"top"),i(t,c,e,"right"),i(t,c,e,"bottom"),i(t,c,e,"left")}}();var e=n(c).container;e||(e=_());var i,s,a,d,u=o.width,p=o.height,h="position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; "+(s=-(1+p),a=-p,d=-u,i=(i=-(1+u))?i+"px":"0",s=s?s+"px":"0",a=a?a+"px":"0","left: "+i+"; top: "+s+"; right: "+(d=d?d+"px":"0")+"; bottom: "+a+";"),m=document.createElement("div"),g=document.createElement("div"),v=document.createElement("div"),x=document.createElement("div"),y=document.createElement("div"),b=document.createElement("div");m.dir="ltr",m.style.cssText="position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; width: 100%; height: 100%; left: 0px; top: 0px;",m.className=r,g.className=r,g.style.cssText=h,v.style.cssText="position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;",x.style.cssText="position: absolute; left: 0; top: 0;",y.style.cssText="position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;",b.style.cssText="position: absolute; width: 200%; height: 200%;",v.appendChild(x),y.appendChild(b),g.appendChild(v),g.appendChild(y),m.appendChild(g),e.appendChild(m),l(v,"scroll",w),l(y,"scroll",k),n(c).onExpandScroll=w,n(c).onShrinkScroll=k}else f("Aborting because element has been uninstalled");function w(){n(c).onExpand&&n(c).onExpand()}function k(){n(c).onShrink&&n(c).onShrink()}}function C(){function o(e,t,i){var s=function(e){return d(e).childNodes[0]}(e),n=b(t),a=w(i);s.style.width=n+"px",s.style.height=a+"px"}function r(s){var r=c.offsetWidth,d=c.offsetHeight;f("Storing current size",r,d),v(c,r,d),i.add(0,function(){if(n(c))if(l()){if(e.debug){var i=c.offsetWidth,s=c.offsetHeight;i===r&&s===d||t.warn(a.get(c),"Scroll: Size changed before updating detector elements.")}o(c,r,d)}else f("Aborting because element container has not been initialized");else f("Aborting because element has been uninstalled")}),i.add(1,function(){n(c)?l()?k(c,r,d):f("Aborting because element container has not been initialized"):f("Aborting because element has been uninstalled")}),s&&i.add(2,function(){n(c)?l()?s():f("Aborting because element container has not been initialized"):f("Aborting because element has been uninstalled")})}function l(){return!!n(c).container}function p(){f("notifyListenersIfNeeded invoked");var e=n(c);return void 0===n(c).lastNotifiedWidth&&e.lastWidth===e.startSize.width&&e.lastHeight===e.startSize.height?f("Not notifying: Size is the same as the start size, and there has been no notification yet."):e.lastWidth===e.lastNotifiedWidth&&e.lastHeight===e.lastNotifiedHeight?f("Not notifying: Size already notified"):(f("Current size not notified, notifying..."),e.lastNotifiedWidth=e.lastWidth,e.lastNotifiedHeight=e.lastHeight,void s(n(c).listeners,function(e){e(c)}))}function m(){if(f("Scroll detected."),h(c))f("Scroll event fired while unrendered. Ignoring...");else{var e=c.offsetWidth,t=c.offsetHeight;e!==n(c).lastWidth||t!==n(c).lastHeight?(f("Element size changed."),r(p)):f("Element size has not changed ("+e+"x"+t+").")}}if(f("registerListenersAndPositionElements invoked."),n(c)){n(c).onRendered=function(){if(f("startanimation triggered."),h(c))f("Ignoring since element is still unrendered...");else{f("Element rendered.");var e=d(c),t=u(c);0!==e.scrollLeft&&0!==e.scrollTop&&0!==t.scrollLeft&&0!==t.scrollTop||(f("Scrollbars out of sync. Updating detector elements..."),r(p))}},n(c).onExpand=m,n(c).onShrink=m;var g=n(c).style;o(c,g.width,g.height)}else f("Aborting because element has been uninstalled")}function A(){if(f("finalizeDomMutation invoked."),n(c)){var e=n(c).style;v(c,e.width,e.height),k(c,e.width,e.height)}else f("Aborting because element has been uninstalled")}function M(){p(c)}function F(){var e;f("Installing..."),n(c).listeners=[],e=m(),n(c).startSize={width:e.width,height:e.height},f("Element start size",n(c).startSize),i.add(0,g),i.add(1,S),i.add(2,C),i.add(3,A),i.add(4,M)}p||(p=c,c=e,e=null),e=e||{},f("Making detectable..."),function(e){return!function(e){return e===e.ownerDocument.body||e.ownerDocument.body.contains(e)}(e)||null===window.getComputedStyle(e)}(c)?(f("Element is detached"),_(),f("Waiting until element is attached..."),n(c).onRendered=function(){f("Element is now attached"),F()}):F()},addListener:function(e,t){if(!n(e).listeners.push)throw new Error("Cannot add listener to an element that is not detectable.");n(e).listeners.push(t)},uninstall:function(e){var t=n(e);t&&(t.onExpandScroll&&c(d(e),"scroll",t.onExpandScroll),t.onShrinkScroll&&c(u(e),"scroll",t.onShrinkScroll),t.onAnimationStart&&c(t.container,"animationstart",t.onAnimationStart),t.container&&e.removeChild(t.container))}}}},function(e,t,i){var s,n,a={};s=i(492),n=i(501),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(167),n=i.n(s);t.default={components:{fieldConditionsBuilder:i(495),WidthSelector:n.a},props:["field","fieldtypeConfig","fieldtypes","root"],data:function(){return{isNameModified:!0,activeTab:"basics"}},computed:{selectedWidth:function(){var t=this.field.width||100;return e.findWhere(this.widths,{value:t}).text},fieldtype:function(){return e.findWhere(this.fieldtypes,{name:this.field.type})},canBeLocalized:function(){return this.root&&Object.keys(Statamic.locales).length>1&&this.fieldtype.canBeLocalized},canBeValidated:function(){return this.fieldtype.canBeValidated},canHaveDefault:function(){return this.fieldtype.canHaveDefault},hasExtras:function(){return this.filteredFieldtypeConfig.length>0},filteredFieldtypeConfig:function(){return"grid"===this.field.type?e.filter(this.fieldtypeConfig,function(e){return"fields"!==e.name}):["replicator","bard"].includes(this.field.type)?e.filter(this.fieldtypeConfig,function(e){return"sets"!==e.name}):this.fieldtypeConfig}},ready:function(){this.root=Boolean(this.root||!1),this.field.isNew&&!this.field.isMeta&&(this.isNameModified=!1,delete this.field.isNew,this.$watch("field.display",function(e){this.isNameModified||(this.field.name=this.$slugify(e,"_"))}))},methods:{focus:function(){this.$els.display.select()},configFieldClasses:function(e){return["form-group p-2 m-0 "+e.type+"-fieldtype",tailwind_width_class(e.width)]}}}}.call(t,i(1))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["value"],data:function(){return{isHovering:!1,hoveringOver:null,widths:[25,33,50,66,75,100]}},computed:{selected:function(){return this.isHovering?this.hoveringOver:this.value}},ready:function(){this.value=this.value||100},methods:{classes:function(){}}}},function(e,t){e.exports=' <div class="field-width field-width-selector" @mouseenter="isHovering = true" @mouseleave="isHovering = false"> <div class=field-width-label>{{ selected }}%</div> <div v-for="width in widths" @mouseenter.stop="hoveringOver = width" @click="value = width" :class="[\n            \'field-width-notch\',\n            \'notch-\' + width,\n            { \'filled\': selected >= width, \'selected\': selected == width }\n        ]"> </div> </div> '},function(e,t,i){var s,n,a={};s=i(496),n=i(500),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{condition:i(497)},props:["data"],data:function(){return{conditions:[],conditionSelectFieldtypeConfig:{options:[{text:translate("cp.always_show"),value:null},{text:translate("cp.show_when"),value:"show"},{text:translate("cp.hide_when"),value:"hide"}]},styleRadioFieldtypeConfig:{inline:!0,options:[{text:translate("cp.standard"),value:"standard"},{text:translate("cp.custom"),value:"custom"}]}}},computed:{hasConditions:function(){return 0!==this.conditions.length},isStandard:function(){return"standard"===this.data.style},isCustom:function(){return"custom"===this.data.style}},ready:function(){this.data||(this.data={type:null,style:"standard",custom:null,conditions:[]}),this.conditions=this.data.conditions},methods:{add:function(){this.conditions.push({handle:null,operator:"and",values:[]})},delete:function(e){this.conditions.splice(e,1)}}}},function(e,t,i){var s,n,a={};s=i(498),n=i(499),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={props:["index","handle","operator","values"],data:function(){return{operatorSelectConfig:{options:[{text:"and",value:"and"},{text:"or",value:"or"}]}}},computed:{isFirst:function(){return 0===this.index}},ready:function(){this.selectizeHandles(),this.selectizeValues()},methods:{selectizeValues:function(){var t=this,s=e.map(this.values,function(e){return{value:e,text:e}});i(this.$els.values).selectize({items:this.values,options:s,create:!0,plugins:["remove_button"],onChange:function(e){t.values=e}})},selectizeHandles:function(){var e=this,t=this.getFields();if(!this.fieldsContainsPartial(t))return this.initSelectize(t);var i=cp_url("/fieldsets/"+get_from_segment(3)+"/get?partials=true");this.$http.get(i,function(i){t=i.fields.filter(function(e){return"partial"!==e.type}),e.initSelectize(t)})},initSelectize:function(e){i(this.$els.handle).selectize({maxItems:1,options:this.cleanFields(e),valueField:"name",labelField:"display",create:!0})},getFields:function(){return JSON.parse(JSON.stringify(this.$parent.$parent.$parent.$parent.$parent.fields))},fieldsContainsPartial:function(t){return void 0!==e.find(t,function(e){return"partial"===e.type})},cleanFields:function(t){var i=this;return t=t.map(function(e){return e.display=e.display||e.name,e}),this.handle&&!e.find(t,function(e){return i.handle===e.name})&&t.push({name:this.handle,display:this.handle}),t}}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <tr> <td v-if=!isFirst class=pl-0 width=30> <select-fieldtype :data.sync=operator :config=operatorSelectConfig> </select-fieldtype> </td> <td :colspan="isFirst ? 2 : null" class=pl-0 width=40%> <input type=text v-model=handle placeholder=Field v-el:handle/> </td> <td> <select multiple=multiple v-el:values></select> </td> <td class="row-controls text-center" width=32px> <a class="icon icon-cross delete mt-8" @click="$emit(\'deleted\')"></a> </td> </tr> '},function(e,t){e.exports=" <div> <select-fieldtype :data.sync=data.type :config=conditionSelectFieldtypeConfig> </select-fieldtype> <template v-if=data.type> <br> <br> <radio-fieldtype :data.sync=data.style :name=condition_style :config=styleRadioFieldtypeConfig></radio-fieldtype> <template v-if=isStandard> <small class=help-block>{{ translate('cp.display_standard_instructions') }}</small> <table v-if=hasConditions class=table> <tr is=condition v-for=\"(i, condition) in conditions\" :index=i :handle.sync=condition.handle :operator.sync=condition.operator :values.sync=condition.values @deleted=delete(i)></tr> </table> <button class=\"btn btn-default\" @click=add> {{ translate('cp.add_condition') }} </button> </template> <template v-if=isCustom> <small class=help-block>{{ translate('cp.display_custom_instructions') }}</small> <input type=text class=form-control v-model=data.custom /> </template> </template> </div> "},function(e,t){e.exports=" <div class=-mx-1> <div class=\"filter mx-1 mb-2\"> <a href=\"\" :class=\"{ 'active': activeTab === 'basics' }\" @click.prevent=\"activeTab = 'basics'\">{{ translate('cp.basics') }}</a> <a href=\"\" :class=\"{ 'active': activeTab === 'visibility' }\" @click.prevent=\"activeTab = 'visibility'\">{{ translate('cp.visibility') }}</a> <a href=\"\" :class=\"{ 'active': activeTab === 'extras' }\" @click.prevent=\"activeTab = 'extras'\" v-if=hasExtras>{{ translate('cp.extras') }}</a> </div> <div class=\"tab publish-fields\" v-show=\"activeTab === 'basics'\"> <div class=\"form-group p-2 m-0 w-1/2\"> <label>{{ translate('cp.display_name') }}</label> <small class=help-block>{{ translate('cp.display_name_instructions') }}</small> <input type=text class=form-control v-model=field.display v-el:display/> </div> <div class=\"form-group p-2 m-0 w-1/2\"> <label>{{ translate('cp.field_variable') }}</label> <small class=help-block>{{ translate('cp.field_variable_instructions') }}</small> <input type=text class=\"form-control mono\" v-model=field.name @keydown=\"isNameModified = true\" :disabled=field.isMeta :v-focus=true /> </div> <div class=\"form-group p-2 m-0\" v-if=canBeLocalized> <label class=block>{{ translate('cp.localizable') }}</label> <toggle-fieldtype :data.sync=field.localizable></toggle-fieldtype> </div> <div class=\"form-group p-2 m-0 markdown-fieldtype\"> <label>{{ translate('cp.instructions') }}</label> <small class=help-block>{{ translate('cp.field_instructions_instructions') }}</small> <markdown-fieldtype :data.sync=field.instructions></markdown-fieldtype> </div> <div class=\"form-group p-2 m-0\" v-if=canBeValidated> <label>{{ translate('cp.validation_rules') }}</label> <small class=help-block> {{ translate('cp.validation_instructions') }} <a href=https://laravel.com/docs/5.1/validation#available-validation-rules target=_blank>{{ translate('cp.validation_instructions_link_text') }}</a>. </small> <input type=text class=form-control v-model=field.validate /> </div> <div class=\"form-group p-2 m-0\" v-if=canHaveDefault> <label>{{ translate('cp.default_value') }}</label> <small class=help-block>{{ translate('cp.field_default_value_instructions') }}</small> <input type=text class=form-control v-model=field.default /> </div> </div> <div class=\"tab publish-fields\" v-show=\"activeTab === 'visibility'\"> <div class=\"form-group p-2 m-0\"> <label class=block>{{ translate('cp.width') }}</label> <width-selector :value.sync=field.width class=large></width-selector> </div> <div class=\"form-group p-2 m-0\" v-if=root> <label>{{ translate('cp.display_conditions') }}</label> <small class=help-block>{{ translate('cp.display_conditions_instructions') }}</small> <field-conditions-builder :data.sync=field.conditions></field-conditions-builder> </div> </div> <div class=\"tab publish-fields\" v-show=\"activeTab === 'extras'\" v-if=hasExtras> <div v-for=\"configField in filteredFieldtypeConfig\" :class=configFieldClasses(configField)> <label class=block>{{ configField.display || configField.name }}</label> <small class=help-block v-if=configField.instructions v-html=\"configField.instructions | markdown\"></small> <component :is=\"configField.type + '-fieldtype'\" :name=$key :data.sync=field[configField.name] :config=configField v-if=\"configField.name !== 'sets' && configField.name !== 'fields'\"> </component> <set-builder :sets.sync=field[configField.name] :fieldtypes=fieldtypes v-if=\"configField.name === 'sets'\"> </set-builder> </div> </div> </div> "},function(e,t,i){var s,n,a={};s=i(503),n=i(507),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(504),n=i.n(s),a=i(6);i.n(a);t.default={components:{ReplicatorSet:n.a},props:["fieldtypes","sets","section","parentKey"],ready:function(){this.sets=this.sets||[],this.makeSetsSortable()},methods:{updateFieldWidths:function(){var t=this;this.$nextTick(function(){e.each(t.$refs.sets,function(e){e.updateFieldWidths()})})},add:function(){var e=this,t=this.sets.length+1;this.sets.push({display:"Set "+t,name:"set_"+t,id:"set_"+t,instructions:null,fields:[],isNew:!0}),this.$notify.success(translate("cp.set_added")),this.$nextTick(function(){return e.$refs.sets[t-1].focus()})},remove:function(e){confirm(translate("cp.are_you_sure"))&&this.sets.splice(e,1)},makeSetsSortable:function(){var e=this,t=this.$els.sets;new a.Sortable(t,{draggable:".field-set--"+this.parentKey,handle:".set-drag-handle--"+this.parentKey,appendTo:t,mirror:{constrainDimensions:!0}}).on("sortable:stop",function(t){e.sets.splice(t.newIndex,0,e.sets.splice(t.oldIndex,1)[0])})}}}}.call(t,i(1))},function(e,t,i){var s,n,a={};s=i(505),n=i(506),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(6);i.n(s);t.default={props:["set","setIndex","fieldtypes","section","parentKey"],data:function(){return{isAddingField:!1,handleModified:!1,displayFieldWidth:"100%",nameFieldWidth:"100%"}},computed:{setKey:function(){return this.parentKey+"-"+this.set.id},display:function(){return this.set.display},name:function(){return this.set.name}},watch:{display:function(e){var t=this;this.handleModified||(this.set.name=this.$slugify(e,"_")),this.$nextTick(function(){return t.updateSetFieldWidths()})},name:function(e){this.updateSetFieldWidths()}},ready:function(){this.handleModified=!this.set.isNew,this.updateFieldWidths()},methods:{updateSetFieldWidths:function(){this.displayFieldWidth=this.$els.setDisplaySizer.offsetWidth+"px",this.nameFieldWidth=this.$els.setNameSizer.offsetWidth+"px"},updateFieldWidths:function(){this.updateSetFieldWidths(),this.$refs.fields.updateFieldWidths()},focus:function(){this.$els.display.select()},fieldSelectorClosed:function(){this.isAddingField=!1}}}},function(e,t){e.exports=' <div :class="[ \'field-set\', `field-set--${parentKey}` ]"> <div :class="[ \'set-drag-handle\', `set-drag-handle--${parentKey}` ]"></div> <span class=set-display-sizer v-el:set-display-sizer v-text="set.display || set.name"></span> <span class=set-name-sizer v-el:set-name-sizer v-text=set.name></span> <input type=text class="set-display mr-8" v-el:display v-model=set.display :placeholder="set.display || set.name" :style="{width: displayFieldWidth}"/> <input type=text class=set-name v-model=set.name :placeholder=set.name :style="{width: nameFieldWidth}" @input="handleModified = true"/> <input type=text class=set-instructions v-model=set.instructions :placeholder="`${translate(\'cp.instructions\')}...`"/> <fieldset-fields v-ref:fields :fields.sync=set.fields :section=section :parent-key=setKey :fieldtypes=fieldtypes :is-adding=isAddingField classes="field-fields set-fields" @selector-closed=fieldSelectorClosed></fieldset-fields> <div class="flex items-center mt-2"> <a class="btn btn-default btn-small" @click="isAddingField = true">{{ translate(\'cp.add_field\') }}</a> <a class="opacity-50 text-xxs hover:opacity-100 ml-1" @click="$emit(\'deleted\', setIndex)">{{ translate(\'cp.delete_set\') }}</a> </div> </div> '},function(e,t){e.exports=' <div class="field-nested field-sets" v-el:sets> <replicator-set v-for="(i, set) in sets" v-ref:sets :set=set :set-index=i :section=section :fieldtypes=fieldtypes :parent-key=parentKey @deleted=remove></replicator-set> </div> '},function(e,t){e.exports=' <div :class=classes> <div class=section-field-inner> <div class=section-field-main> <div :class="[\n                \'field-drag-handle\',\n                `field-drag-handle--${parentKey}`,\n                { \'root-level-drag-handle\': isRootLevel }\n            ]"></div> <div class=section-field-main-inner> <div class=field-info> <div class="flex items-center"> <div class="h-4 w-4"> <svg-icon class="h-4 w-4 opacity-50 self-center" :name=icon></svg-icon> </div> <div class=ml-2> <span class=field-display-sizer v-el:field-display-sizer v-text="field.display || field.name"></span> <span class=field-name-sizer v-el:field-name-sizer v-text=field.name></span> <input class=field-display v-el:display type=text v-model=field.display :placeholder="field.display || field.name" :style="{width: displayFieldWidth}"/> <input class=field-name v-el:name type=text v-model=field.name :style="{width: nameFieldWidth}" @input="handleModified = true" :disabled=field.isMeta /> <div class=field-type>{{ fieldtypeLabel }}</div> </div> </div> </div> <div class=field-controls> <width-selector :value.sync=field.width v-tip :tip-text="translate(\'cp.width\')"></width-selector> <template v-if=canBeLocalized> <a @click="field.localizable = !field.localizable" v-tip :tip-text="translate(\'cp.localizable\')"><span class="icon icon-globe field-localizable" :class="{ \'is-localizable\': field.localizable }"></span></a> </template> <a @click=edit v-tip :tip-text="translate(\'cp.edit\')"><span class="icon icon-pencil field-edit"></span></a> <a @click="$emit(\'removed\')" v-tip :tip-text="translate(\'cp.delete\')"><span class="field-delete icon icon-cross delete"></span></a> <template v-if=isGridField> <a @click=addField v-tip :tip-text="translate(\'cp.add_field\')"><span class="icon icon-plus field-add-grid-field"></span></a> <a @click="isShowingGridFields = !isShowingGridFields" v-tip :tip-text="translate(\'cp.toggle_fields\')" v-show=field.fields.length class=always-visible><span class="icon icon-chevron-{{ isShowingGridFields ? \'up\' : \'down\' }} field-expand"></span></a> </template> <template v-if=isReplicatorField> <a @click=addReplicatorSet v-tip :tip-text="translate(\'cp.add_set\')"><span class="icon icon-plus field-add-set"></span></a> <a @click="isShowingSets = !isShowingSets" v-tip :tip-text="translate(\'cp.toggle_sets\')" v-show=field.sets.length class=always-visible><span class="icon icon-chevron-{{ isShowingSets ? \'up\' : \'down\' }} field-expand"></span></a> </template> </div> </div> </div> <div class="field-nested field-fields" v-if=isGridField v-show=isShowingGridFields> <fieldset-fields v-ref:fields :fields.sync=field.fields :section=section :parent-key=fieldKey :fieldtypes=fieldtypes :is-adding=isAddingGridField @selector-closed=fieldSelectorClosed></fieldset-fields> <a class="btn btn-default btn-small mt-16" @click=addField>{{ translate(\'cp.add_field\') }}</a> </div> <replicator-sets v-if=isReplicatorField v-show=isShowingSets v-ref:sets :sets.sync=field.sets :section=section :fieldtypes=fieldtypes :parent-key=fieldKey></replicator-sets> </div> <modal :show.sync=isEditing class=modal-wide> <template slot=header> <div class="flex items-center"> <svg-icon class="h-6 w-6 mr-2 inline-block opacity-50" :name=icon></svg-icon> <span>{{ field.display || field.name }}</span> <span class="text-xs ml-2 font-bold uppercase opacity-25 pt-sm">{{ fieldtypeLabel }}</span> </div> </template> <template slot=body> <field-settings v-ref:settings :field.sync=field :fieldtype-config=fieldtypeConfig :fieldtypes=fieldtypes :root=isRootLevel> </field-settings> </template> </modal> </div> '},function(e,t){e.exports=' <div :class="[\n    \'section-fields\',\n    classes\n]"> <fieldset-field v-for="(i, f) in fields" v-ref:fields :field.sync=f :fieldtypes=fieldtypes :section=section :is-first-field="i === 0" :is-last-field="i === fields.length-1" :parent-key=parentKey @removed=remove(i)></fieldset-field> <fieldtype-selector :fieldtypes=fieldtypes :show=isAdding :allow-title=allowAddingTitleField :allow-slug=allowAddingSlugField :allow-date=allowAddingDateField @selected=add @closed="this.$emit(\'selector-closed\')"></fieldtype-selector> </div> '},function(e,t,i){var s,n,a={};s=i(511),n=i(512),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:{fieldtypes:{},onSelect:{},show:{},allowTitle:{default:!1},allowSlug:{default:!1},allowDate:{default:!1}},data:function(){return{isActive:!1,filterBy:"all",filters:["Text","Media","Pickable","Structured","Relationship","Special","System"],search:"",isSearchOpen:!1}},computed:{fieldtypeSelectionText:function(){return e.findWhere(this.fieldtypesSelectOptions,{value:this.fieldtypeSelection}).text},allFieldtypes:function(){var e=this.fieldtypes.map(function(e){return{text:e.label,value:e.name,categories:e.categories,icon:e.icon}});return this.allowDate&&e.unshift({text:translate("cp.publish_date"),value:"date",categories:["system"],isMeta:!0,icon:"date"}),this.allowSlug&&e.unshift({text:translate("cp.slug"),value:"slug",categories:["system"],isMeta:!0,icon:"slug"}),this.allowTitle&&e.unshift({text:translate("cp.title"),value:"title",categories:["system"],isMeta:!0,icon:"title"}),e},searchFilteredFieldtypes:function(){var e=this,t=this.allFieldtypes;return this.search&&(t=t.filter(function(t){return t.text.toLowerCase().includes(e.search.toLowerCase())})),t},fieldtypeOptions:function(){var e=this,t=this.searchFilteredFieldtypes;return"all"===this.filterBy?t:t.filter(function(t){return t.categories.includes(e.filterBy.toLowerCase())})},filteredFilters:function(){var e=this;return!this.search&&this.allowMeta?this.filters:this.filters.filter(function(t){return e.searchFilteredFieldtypes.filter(function(e){return e.categories.includes(t.toLowerCase())}).length})},allowMeta:function(){return this.allowTitle||this.allowSlug||this.allowDate},isSearching:function(){return this.search||this.isSearchOpen}},watch:{show:function(e){e&&this.$els.search.focus()}},methods:{select:function(e){if(["title","slug","date"].includes(e))return this.selectMeta(e);var t=this.createField(e);this.$emit("selected",t),this.close()},selectMeta:function(e){var t=e;["title","slug"].includes(e)&&(t="text");var i=this.createField(t);i=Object.assign({display:translate("cp."+e),name:e,type:t,isMeta:!0},i),this.$emit("selected",i),this.close()},createField:function(t){var i=e.findWhere(this.fieldtypes,{name:t}),s={type:i.name,instructions:null,localizable:!1,width:100,isNew:!0},n={};return e.each(i.config,function(e){n[e.name]=e.default||null}),Object.assign(n,s)},close:function(){this.search="",this.filterBy="all",this.$emit("closed")},openSearch:function(){this.isSearchOpen=!0,this.$els.search.focus()},cancelSearch:function(){this.isSearchOpen=!1,this.search=""}}}}.call(t,i(1))},function(e,t){e.exports=' <div> <modal :show=show @closed=close class=modal-wide> <template slot=header>{{ translate(\'cp.select_fieldtype\')}}</template> <template slot=body> <div class=filter> <a @click="filterBy = \'all\'" :class="{\'active\': filterBy == \'all\'}">{{ translate(\'cp.all\') }}</a> <a @click="filterBy = filter" v-for="filter in filteredFilters" :class="{\'active\': filterBy == filter}"> {{ translate(`cp.fieldtype_category_${filter.toLowerCase()}`) }} </a> <a @click.prevent=openSearch :class="[\'no-dot\', {\'active\': search}]"><span class="icon icon-magnifying-glass"></span></a> </div> <div class=fieldtype-selector> <div :class="[\'search\', { \'is-searching\': isSearching }]"> <input type=text v-model=search v-el:search @keydown.esc=cancelSearch :placeholder="`${translate(\'cp.search\')}...`"/> </div> <div class="flex flex-wrap -mx-1 fieldtype-list"> <div class="w-1/2 sm:w-1/3 md:w-1/4 p-1" v-for="option in fieldtypeOptions"> <a class="border flex items-center group w-full rounded shadow-sm py-1 px-2" @click=select(option.value)> <svg-icon class="h-4 w-4 opacity-50 group-hover:opacity-100" :name=option.icon></svg-icon> <span class="pl-2 text-grey-dark group-hover:text-grey-darkest">{{ option.text }}</span> </a> </div> </div> </div> </template> </modal> </div> '},function(e,t,i){var s,n,a={};s=i(514),n=i(515),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={props:{show:{type:Boolean,required:!0,default:!1},full:{type:Boolean,required:!1,default:!1},class:{required:!1,default:function(){return{}}},loading:Boolean,saving:Boolean},computed:{classes:function(){var t={"modal-full":this.full},s={};return"string"==typeof this.class?e.each(this.class.split(" "),function(e){s[e]=!0}):s=this.class,i.extend({},t,s)}},methods:{close:function(){this.show=!1}},watch:{show:function(e){this.$emit(!0===e?"opened":"closed"),this.$dispatch(!0===e?"modal.open":"modal.close")}},ready:function(){Mousetrap.bind("esc",function(e){this.close()}.bind(this),"keyup")},events:{"close-modal":function(){this.show=!1}}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <div class=modal :class=classes role=dialog tabindex=-1 v-if=show> <div class=modal-dialog> <div class=modal-content> <div class=saving v-if=saving> <div class=inner> <i class="icon icon-circular-graph animation-spin"></i> {{ translate(\'cp.saving\') }} </div> </div> <div class=modal-header> <slot name=close> <button type=button tabindex=-1 class=close aria-label=Close @click=close><span aria-hidden=true>&times;</span></button> </slot> <h1><slot name=header></slot></h1> </div> <div v-if=loading class=loading> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if="! loading" class=modal-body> <slot name=body></slot> </div> <div v-if="! loading" class=modal-footer> <slot name=footer> <button type=button class=btn @click=close>{{ translate(\'cp.close\') }}</button> </slot> </div> </div> </div> </div> '},function(e,t,i){var s,n,a={};s=i(517),n=i(521),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{page:i(518)},props:["total","current","segments"],computed:{hasPrevious:function(){return this.current>1},hasNext:function(){return this.current<this.total},segmented:function(){return void 0!==this.segments},hasSlider:function(){return Boolean(this.segments.slider.length)},showFirstEllipsis:function(){return this.hasSlider},showLastEllipsis:function(){return!!this.hasSlider||Boolean(this.segments.last.length)}},methods:{select:function(e){this.$emit("selected",e)},selectPreviousPage:function(){this.select(this.current-1)},selectNextPage:function(){this.select(this.current+1)}}}},function(e,t,i){var s,n,a={};s=i(519),n=i(520),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["number"],computed:{isCurrent:function(){return this.number===this.$parent.current}},methods:{select:function(){this.$parent.select(this.number)}}}},function(e,t){e.exports=' <li :class="{ \'active\': isCurrent }"> <a href="" @click.prevent=select> {{ number }} </a> </li> '},function(e,t){e.exports=' <ul class=pagination> <li v-if=hasPrevious> <a href="" @click.prevent=selectPreviousPage><span>&laquo;</span></a> </li> <template v-if=segmented> <li is=page v-for="item in segments.first" :number=item.page></li> <li v-if=showFirstEllipsis class=disabled><span>...</span></li> <li is=page v-for="item in segments.slider" :number=item.page></li> <li v-if=showLastEllipsis class=disabled><span>...</span></li> <li is=page v-for="item in segments.last" :number=item.page></li> </template> <li is=page v-if=!segmented v-for="n in total" :number=n+1></li> <li v-if=hasNext> <a href="" @click.prevent=selectNextPage><span>&raquo;</span></a> </li> </ul> '},function(e,t,i){var s,n,a={};s=i(523),n=i(524),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["keyword"],methods:{reset:function(){this.keyword=""}}}},function(e,t){e.exports=' <input type=search :placeholder="translate(\'cp.search\')" @keydown.esc.prevent=reset v-model=keyword class="filter-control search" debounce=500 /> '},function(e,t,i){var s,n,a={};s=i(526),n=i(527),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={computed:{sort:function(){return this.$parent.sort},sortOrder:function(){return this.$parent.sortOrder},sortLabel:function(){return e.find(this.$parent.columns,{field:this.sort}).header}},methods:{changeSortColumn:function(e){this.$parent.sortBy(e,this.sortOrder)},changeSortOrder:function(e){this.$parent.sortBy(this.sort,e)}}}}.call(t,i(1))},function(e,t){e.exports=' <div class=dossier-sort-options> <button class="btn btn-default" data-toggle=dropdown> <span class="icon icon-list"></span> {{ sortLabel }} </button> <ul class=dropdown-menu> <li v-for="column in $parent.columns"> <a href="" @click.prevent=changeSortColumn(column.field)> {{ column.header }} <span class="icon icon-check pull-right mr-0" v-if="sort === column.field"></span> </a> </li> <li class=divider></li> <li><a href="" @click.prevent="changeSortOrder(\'asc\')"> Ascending <span class="icon icon-check pull-right mr-0" v-if="sortOrder === \'asc\'"></span> </a></li> <li><a href="" @click.prevent="changeSortOrder(\'desc\')"> Descending <span class="icon icon-check pull-right mr-0" v-if="sortOrder === \'desc\'"></span> </a></li> </ul> </div> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(3),n=i.n(s),a=i(529),o=i.n(a),r=i(532),l=i.n(r),c=i(544),d=i.n(c),u=i(547),p=i.n(u),f=i(550),h=i.n(f),m=i(560),g=i.n(m),v=i(563),x=i.n(v),y=i(567),b=i.n(y),w=i(569),k=i.n(w),_=i(572),S=i.n(_),C=i(575),A=i.n(C),M=i(578),F=i.n(M),E=i(580),L=i.n(E),$=i(583),P=i.n($),j=i(586),T=i.n(j),O=i(589),D=i.n(O),B=i(592),z=i.n(B),I=i(602),q=i.n(I),N=i(604),R=i.n(N),V=i(607),W=i.n(V),H=i(610),U=i.n(H),G=i(613),K=i.n(G),Y=i(622),Z=i.n(Y),J=i(628),Q=i.n(J),X=i(631),ee=i.n(X),te=i(634),ie=i.n(te),se=i(636),ne=i.n(se),ae=i(639),oe=i.n(ae),re=i(642),le=i.n(re),ce=i(645),de=i.n(ce),ue=i(648),pe=i.n(ue),fe=i(651),he=i.n(fe),me=i(654),ge=i.n(me),ve=i(657),xe=i.n(ve),ye=i(660),be=i.n(ye),we=i(663),ke=i.n(we),_e=i(666),Se=i.n(_e),Ce=i(669),Ae=i.n(Ce),Me=i(672),Fe=i.n(Me),Ee=i(675),Le=i.n(Ee),$e=i(678),Pe=i.n($e),je=i(681),Te=i.n(je),Oe=i(685),De=i.n(Oe);n.a.component("array-fieldtype",o.a),n.a.component("assets-fieldtype",l.a),n.a.component("asset_container-fieldtype",p.a),n.a.component("asset_folder-fieldtype",d.a),n.a.component("bard-fieldtype",h.a),n.a.component("checkboxes-fieldtype",g.a),n.a.component("collection-fieldtype",x.a),n.a.component("collections-fieldtype",b.a),n.a.component("date-fieldtype",k.a),n.a.component("fieldset-fieldtype",A.a),n.a.component("form-fieldtype",F.a),n.a.component("grid-fieldtype",S.a),n.a.component("hidden-fieldtype",L.a),n.a.component("integer-fieldtype",P.a),n.a.component("list-fieldtype",T.a),n.a.component("locale_settings-fieldtype",D.a),n.a.component("markdown-fieldtype",z.a),n.a.component("pages-fieldtype",q.a),n.a.component("radio-fieldtype",R.a),n.a.component("redactor-fieldtype",W.a),n.a.component("redactor_settings-fieldtype",U.a),n.a.component("relate-fieldtype",K.a),n.a.component("replicator-fieldtype",Z.a),n.a.component("revealer-fieldtype",Q.a),n.a.component("routes-fieldtype",ee.a),n.a.component("section-fieldtype",ie.a),n.a.component("select-fieldtype",ne.a),n.a.component("status-fieldtype",oe.a),n.a.component("suggest-fieldtype",le.a),n.a.component("table-fieldtype",de.a),n.a.component("tags-fieldtype",pe.a),n.a.component("taxonomy-fieldtype",he.a),n.a.component("template-fieldtype",ge.a),n.a.component("text-fieldtype",xe.a),n.a.component("textarea-fieldtype",be.a),n.a.component("theme-fieldtype",ke.a),n.a.component("time-fieldtype",Se.a),n.a.component("toggle-fieldtype",Ae.a),n.a.component("users-fieldtype",De.a),n.a.component("user_groups-fieldtype",Le.a),n.a.component("user_roles-fieldtype",Pe.a),n.a.component("video-fieldtype",Te.a),n.a.component("yaml-fieldtype",Fe.a)},function(e,t,i){var s,n,a={};s=i(530),n=i(531),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],ready:function(){this.data=this.data||[],"keyed"===this.componentType&&(this.data=0===this.data.length?{}:this.data),"dynamic"===this.componentType&&this.initSortable()},computed:{componentType:function(){return this.config.keys?"keyed":"dynamic"},hasRows:function(){return this.data&&this.data.length>0},addRowButton:function(){return this.config.add_row||translate_choice("cp.add_row",1)},valueHeader:function(){return this.config.value_header||"Value"},textHeader:function(){return this.config.text_header||"Text"}},methods:{addRow:function(){this.data.push({value:"",text:""})},deleteRow:function(e){this.data.splice(e,1)},initSortable:function(){var t=this,i="";e(this.$els.tbody).sortable({axis:"y",revert:175,handle:".drag-handle",placeholder:"table-row-placeholder",forcePlaceholderSize:!0,start:function(e,t){i=t.item.index(),t.placeholder.height(t.item.height())},update:function(e,s){var n=s.item.index(),a=t.data.splice(i,1)[0];t.data.splice(n,0,a)}})}}}}.call(t,i(2))},function(e,t){e.exports=' <div class=array-fieldtype-container> <div class="grid-field array-keyed" v-if="componentType === \'keyed\'"> <table class="grid-table grid-mode-table headless"> <tbody> <tr v-if=data v-for="key in config.keys"> <th>{{ key.text }}</th> <td> <input type=text class=form-control v-model=data[key.value] /> </td> </tr> </tbody> </table> </div> <template v-if="componentType === \'dynamic\'"> <div class="grid-field array-dynamic"> <table class="grid-table grid-mode-table" v-if=hasRows> <thead> <tr> <th>{{ valueHeader }}</th> <th>{{ textHeader }}</th> <th class=row-controls></th> </tr> </thead> <tbody v-el:tbody> <tr v-for="(rowIndex, row) in data"> <td> <input type=text class=form-control v-model=row.value /> </td> <td> <input type=text class=form-control v-model=row.text /> </td> <td class=row-controls> <span class="icon icon-menu move drag-handle"></span> <span class="icon icon-cross delete" v-on:click=deleteRow(rowIndex)></span> </td> </tr> </tbody> </table> <button type=button class="btn btn-default" @click=addRow> {{ addRowButton }} <i class="icon icon-plus"></i> </button> </div> </template> </div> '},function(e,t,i){var s,n,a={};i(533),s=i(534),n=i(543),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){var n=i(28);t.default={components:{assetTile:i(535),assetRow:i(538),selector:i(10),uploader:i(13),uploads:i(34)},mixins:[Fieldtype,n.a],data:function(){return{assets:[],loading:!0,showSelector:!1,selectorViewMode:null,draggingFile:!1,uploads:[],innerDragging:!1,autoBindChangeWatcher:!1,displayMode:"grid"}},computed:{hasAssets:function(){return Boolean(this.assets.length)},container:function(){return this.config.container},folder:function(){return this.config.folder||"/"},containerSpecified:function(){return null!=this.config.container},restrictNavigation:function(){return this.config.restrict||!1},maxFiles:function(){return this.config.max_files?parseInt(this.config.max_files):0},maxFilesReached:function(){return 0!==this.maxFiles&&this.assets.length>=this.maxFiles},soloAsset:function(){return 1===this.maxFiles},selectedAssets:function(){var t=this;return e(this.data).map(function(i){return i.includes("::")?i:e(t.assets).findWhere({url:i}).id})},expanded:function(){return this.assets.length>0},uploadElement:function(){return this.$el},isInBardField:function(){for(var e=this;;){var t=e.$parent;if(!t)return!1;if("BardFieldtype"===t.constructor.name)return!0;e=t}}},events:{"close-selector":function(){this.closeSelector()}},methods:{loadAssets:function(e){var t=this;if(this.loading=!0,!e||!e.length)return this.loading=!1,void(this.assets=[]);this.$http.post(cp_url("assets/get"),{assets:e},function(e){t.assets=e,t.loading=!1,t.$nextTick(function(){var e=t.data;t.data=[],t.data=e,t.sortable(),t.bindChangeWatcher()})})},assetsSelected:function(e){this.loadAssets(e)},openSelector:function(){this.showSelector=!0,this.$root.hideOverflow=!0},closeSelector:function(){this.showSelector=!1,this.$root.hideOverflow=!1},assetRemoved:function(t){var i=e(this.assets).findIndex({id:t.id});this.assets.splice(i,1)},uploadComplete:function(e){this.assets.push(e)},uploadsUpdated:function(e){this.$set("uploads",e)},uploadFile:function(){this.$refs.uploader.browse()},sortable:function(){var e=this;1!==this.maxFiles&&s(this.$els.assets).sortable({items:"> :not(.ghost)",start:function(e,t){t.item.data("start",t.item.index())},update:function(t,i){var s=i.item.data("start"),n=i.item.index();e.assets.splice(n,0,e.assets.splice(s,1)[0])},placeholder:{element:function(e){return s("<div class='ui-sortable-placeholder asset-tile'><div class='faux-thumbnail'></div></div>")[0]},update:function(e,t){}}})},getReplicatorPreviewText:function(){return e.map(this.assets,function(e){return e.is_image?'<img src="'+e.thumbnail+'" width="20" height="20" title="'+e.basename+'" />':e.basename}).join(", ")}},watch:{assets:function(t){this.data=e.pluck(this.assets,"url")}},ready:function(){this.displayMode=this.isInsideGridField?"list":this.config.mode||"grid",this.selectorViewMode=Cookies.get("statamic.assets.listing_view_mode")||"grid",this.loadAssets(this.data)}}}.call(t,i(1),i(2))},function(e,t,i){var s,n,a={};s=i(536),n=i(537),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(168);t.default={mixins:[s.a],computed:{isInAssetBrowser:function(){for(var e=this;;){var t=e.$parent;if(!t)return!1;if("AssetBrowser"===t.constructor.name)return!0;e=t}},isInBardField:function(){return this.$parent.isInBardField}}}},function(e,t){e.exports=' <div class=asset-tile :class="{ \'is-image\': isImage && !canShowSvg, \'is-svg\': canShowSvg, \'is-file\': !isImage && !canShowSvg }" :title=asset.filename> <asset-editor v-if=editing :id=asset.id :allow-deleting=false @closed=closeEditor @saved=assetSaved> </asset-editor> <div class=asset-thumb-container> <div class=asset-thumb> <template v-if="isImage && isInBardField && !isInAssetBrowser"> <img :src=asset.url> </template> <template v-else> <a :href=toenail class=zoom v-if=isImage :title=label> <img :src=thumbnail /> </a> <template v-else> <div v-if=canShowSvg class=svg-img :style="\'background-image:url(\'+asset.url+\')\'"> </div> <file-icon v-else type=div :extension=asset.extension></file-icon> </template> </template> <div class=asset-controls> <button @click=edit class="btn btn-icon icon icon-pencil" :alt="translate(\'cp.edit\')"></button> <button @click=remove class="btn btn-icon icon icon-trash" :alt="translate(\'cp.remove\')"></button> </div> </div> </div> <div class=asset-meta> <div class=asset-filename :title=label>{{ label }}</div> <div class=asset-filesize v-if="! isInBardField">{{ asset.size }}</div> </div> </div> '},function(e,t,i){var s,n,a={};s=i(539),n=i(540),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(168);t.default={mixins:[s.a]}},function(e,t){e.exports=' <tr> <td> <div v-if=canShowSvg class="img svg-img" :style="\'background-image:url(\'+asset.url+\')\'"> </div> <template v-else> <a :href=toenail class=zoom v-if=isImage :title=label> <img :src=thumbnail /> </a> <div class=img v-else><file-icon type=div :extension=asset.extension></file-icon></div> </template> </td> <td> <span @dblclick=edit> <span v-if="asset.title !== asset.filename" :title=asset.basename>{{ asset.title || asset.filename }}</span> <span v-else>{{ asset.basename }}</span> </span> </td> <td class=pr-8 style="width: 32px"> <span class="remove-asset text-right" @click=remove></span> <asset-editor v-if=editing :id=asset.id :allow-deleting=false @closed=closeEditor @saved=assetSaved> </asset-editor> </td> </tr> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{container:String,folder:String,selected:Array,maxFiles:Number,restrictNavigation:{type:Boolean,default:function(){return!1}}},data:function(){return{browserSelections:this.selected}},methods:{select:function(){this.$emit("selected",this.browserSelections),this.close()},close:function(){this.$emit("closed"),this.$dispatch("modal.close")},selectionsUpdated:function(e){this.browserSelections=e}},ready:function(){this.$dispatch("modal.open")}}},function(e,t){e.exports=" <div class=asset-selector-modal> <div class=asset-selector> <asset-browser :selected-container=container :selected-path=folder :selected-assets=browserSelections :restrict-navigation=restrictNavigation :max-files=maxFiles @selections-updated=selectionsUpdated @asset-doubleclicked=select> <template slot=contextual-actions v-if=browserSelections.length> <button class=\"btn action mb-3\" @click=\"browserSelections = []\">{{ translate('cp.uncheck_all') }}</button> </template> </asset-browser> <div class=modal-footer> <div class=left v-if=browserSelections.length> {{ browserSelections.length }}<span v-if=maxFiles>/{{ maxFiles }}</span> {{ translate('cp.selected') }} </div> <button type=button class=btn @click=close> {{ translate('cp.cancel') }} </button> <button type=button class=\"btn btn-primary\" @click=select> {{ translate('cp.select') }} </button> </div> </div> </div> "},function(e,t){e.exports=' <div class=assets-fieldtype :class="{\n        \'max-files-reached\': maxFilesReached,\n        \'empty\': ! assets.length,\n        \'solo\': soloAsset,\n    }" @dragover=dragOver @dragleave=dragStop @drop=dragStop> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div class=drag-notification v-if="containerSpecified && draggingFile && !showSelector"> <i class="icon icon-download"></i> <h3>{{ translate(\'cp.drop_to_upload\') }}</h3> </div> <template v-if=!loading> <div class=manage-assets v-if=!maxFilesReached :class="{\'bard-drag-handle\': isInBardField}"> <div v-if=!containerSpecified> <i class="icon icon-warning"></i> {{ translate(\'cp.no_asset_container_specified\') }} </div> <template v-else> <button type=button class="btn btn-with-icon mr-8" @click=openSelector @keyup.space.enter=openSelector tabindex=0> <span class="icon icon-folder-images"></span> {{ translate(\'cp.browse_assets\') }} </button> <button type=button class="btn btn-with-icon" @click.prevent=uploadFile> <span class="icon icon-upload-to-cloud"></span> {{ translate(\'cp.upload\') }} </button> <p>{{ translate(\'cp.or_drag_and_drop_files\') }}</p> <button type=button class="delete-bard-set btn btn-icon pull-right" v-if=isInBardField @click.prevent="$dispatch(\'asset-field.delete-bard-set\')"> <span class="icon icon-trash"></span> </button> </template> </div> <uploader v-ref:uploader v-if="containerSpecified && !showSelector" :dom-element=uploadElement :container=container :path=folder @updated=uploadsUpdated @upload-complete=uploadComplete> </uploader> <uploads v-if=uploads.length :uploads=uploads> </uploads> <template v-if="expanded && ! soloAsset"> <div class=asset-grid-listing v-if="displayMode === \'grid\'" v-el:assets> <asset-tile v-for="asset in assets" :asset=asset @removed=assetRemoved> </asset-tile> </div> <div class=asset-table-listing v-if="displayMode === \'list\'"> <table> <tbody v-el:assets> <tr is=assetRow v-for="asset in assets" :asset=asset @removed=assetRemoved> </tr> </tbody> </table> </div> </template> <div class=asset-solo-container v-if="expanded && soloAsset" v-el:assets> <asset-tile v-for="asset in assets" :asset=asset @removed=assetRemoved> </asset-tile> </div> </template> <selector v-if=showSelector :container=container :folder=folder :restrict-navigation=restrictNavigation :selected=selectedAssets :view-mode=selectorViewMode :max-files=maxFiles @selected=assetsSelected @closed=closeSelector> </selector> </div> '},function(e,t,i){var s,n,a={};s=i(545),n=i(546),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],data:function(){return{loading:!0,options:{},container:null,autoBindChangeWatcher:!1}},computed:{selectConfig:function(){return{options:this.options}},allowBlank:function(){return!1}},methods:{bootstrapForContainerField:function(){var e=this;this.$parent.$watch("field",function(t){if(t.container===e.container)return!1;t.container?(e.loading=!0,e.container=t.container,e.getFolders()):(e.container=null,e.data=null)},{deep:!0}),this.$parent.field.container&&(this.container=this.$parent.field.container,this.getFolders())},getFolders:function(){this.$http.get(cp_url("assets/containers/"+this.container+"/folders"),function(t){var i=this.allowBlank?[{value:null,text:""}]:[];e.each(t,function(e){var t=e.path===e.title?e.path:e.path+" ("+e.title+")";i.push({value:e.path,text:t})}),this.options=i,this.loading=!1,this.data||(this.data=i[0].value),this.bindChangeWatcher()})}},ready:function(){this.config.container?(this.container=this.config.container,this.getFolders()):this.bootstrapForContainerField()}}}.call(t,i(1))},function(e,t){e.exports=' <div class=asset-folder-fieldtype-wrapper> <small class=help-block v-if=!container>{{ translate(\'cp.select_asset_container\') }}</small> <div v-if="container && loading" class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select-fieldtype v-if="container && !loading" :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> '},function(e,t,i){var s,n,a={};s=i(548),n=i(549),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],data:function(){return{loading:!0,options:{},autoBindChangeWatcher:!1}},computed:{selectConfig:function(){return{options:this.options}},allowBlank:function(){return this.config&&this.config.allow_blank}},ready:function(){this.$http.get(cp_url("assets/containers/get"),function(t){var i=this.allowBlank?[{value:null,text:""}]:[];e.each(t.items,function(e){i.push({value:e.id,text:e.title})}),this.options=i,this.loading=!1,this.data||(this.data=i[0].value),this.bindChangeWatcher()})}}}.call(t,i(1))},function(e,t){e.exports=' <div class=asset-container-fieldtype-wrapper> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select-fieldtype v-if=!loading :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> '},function(e,t,i){var s,n,a={};s=i(551),n=i(559),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(170),n=i(6),a=(i.n(n),"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e}),o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var i=[],s=!0,n=!1,a=void 0;try{for(var o,r=e[Symbol.iterator]();!(s=(o=r.next()).done)&&(i.push(o.value),!t||i.length!==t);s=!0);}catch(e){n=!0,a=e}finally{try{!s&&r.return&&r.return()}finally{if(n)throw a}}return i}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();function r(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}t.default={mixins:[s.a,Fieldtype],components:{BardSet:i(552),BardText:i(555)},computed:{textBlocks:function(){return this.$refs.set.filter(function(e){return"text"===e.data.type})},allowSource:function(){return!this.config.markdown&&(void 0===this.config.allow_source||this.config.allow_source)}},data:function(){return{isReady:!1,setBeingDragged:null,lastDraggedOverElement:null,hasSets:void 0!==this.config.sets,showSource:!1,fullScreenMode:!1,autoBindChangeWatcher:!1,changeWatcherWatchDeep:!1,previousScrollPosition:null}},ready:function(){var e=this;this.data||(this.data=[{type:"text",text:"<p><br></p>"}]),this.combineConsecutiveTextBlocks(),this.isReady=!0,this.$nextTick(function(){e.draggable(),e.accordionMode&&e.collapseAll(),e.bindChangeWatcher()})},watch:{data:function(e){var t=this;0===e.length&&(this.data=[{type:"text",text:"<p><br></p>"}],this.$nextTick(function(){return t.getBlock(0).focus()}))}},methods:{addTextBlock:function(e,t){var i=this;t=t||"<p><br></p>",e+=1,this.data.splice(e,0,{type:"text",text:t}),this.$nextTick(function(){var s=i.getBlock(e);t?s.focusAt(0):s.focus()})},addBlock:function(t,i){var s=this,n={type:t},a=this.setConfig(t);e.each(a.fields,function(e){n[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),void 0===i&&(i=this.data.length),this.data.splice(i,0,n),this.$nextTick(function(){return s.getBlock(i).focus()})},setSelected:function(t,i){var s=this,n={type:t},a=this.setConfig(t);e.each(a.fields,function(e){n[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),this.data.splice(i,1,n),this.$nextTick(function(){return s.getBlock(i).focus()})},setInserted:function(e,t,i,s){var n,a=[{type:"text",text:i},this.getBlankSet(e),{type:"text",text:s}].filter(function(e){return"text"!==e.type||""!==e.text});(n=this.data).splice.apply(n,[t,1].concat(r(a)))},getBlankSet:function(t){var i={type:t},s=this.setConfig(t);return e.each(s.fields,function(e){i[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),i},getBlock:function(e){return this.$refs.set[e]},canShowDividerAtStart:function(e){return 0===e},canShowDividerAtEnd:function(e){return e===this.data.length-1||"text"!==this.getBlock(e+1).data.type},draggable:function(){var e=this,t=new n.Draggable(this.$els.blocks,{draggable:".bard-block",handle:".bard-drag-handle",mirror:{xAxis:!1,constrainDimensions:!0},delay:200});t.on("drag:start",function(t,i){var s=document.documentElement;e.previousScrollPosition=(window.pageYOffset||s.scrollTop)-(s.clientTop||0),e.setBeingDragged=t.originalSource.__vue__.index,e.textBlocks.forEach(function(e){return e.addDropAreas()})}),t.on("drag:move",function(t){if(t.originalEvent){var i=t.originalEvent.target;(i.classList.contains("bard-drop-area-inner")||i.classList.contains("bard-divider"))&&(e.lastDraggedOverElement=i)}}),t.on("drag:stop",function(t){t.cancel(),e.lastDraggedOverElement?e.moveSetToNewLocation():e.removeDropAreas(),e.$nextTick(function(){window.scrollTo(0,e.previousScrollPosition),e.previousScrollPosition=null})})},moveSetToNewLocation:function(){var e=void 0;e=this.lastDraggedOverElement.classList.contains("bard-divider")?this.lastDraggedOverElement.parentNode.__vue__:this.lastDraggedOverElement.parentNode.parentNode.parentNode.__vue__,this.removeDropAreas(),e&&(this.moveSet(e),this.lastDraggedOverElement=null)},moveSet:function(e){if("text"===e.data.type)return this.moveSetIntoText(e);var t=this.setBeingDragged,i=e.index+(t>e.index?1:0);this.lastDraggedOverElement.classList.contains("bard-divider-start")&&(i=0),this.data.splice(i,0,this.data.splice(t,1)[0]),this.combineConsecutiveTextBlocks()},moveSetIntoText:function(e){var t;e.insertParagraph();var i=e.getBeforeAndAfterHtml(),s=o(i,2),n={type:"text",text:s[0]},a={type:"text",text:s[1]},l=this.data[this.setBeingDragged];this.data.splice(this.setBeingDragged,1);var c=[n,l,a].filter(function(e){return"text"!==e.type||""!==e.text}),d=this.getInsertIndex(this.setBeingDragged,e.index);(t=this.data).splice.apply(t,[d,1].concat(r(c))),this.setBeingDragged=null,this.combineConsecutiveTextBlocks()},removeDropAreas:function(){this.textBlocks.forEach(function(e){return e.removeDropAreas()})},getInsertIndex:function(e,t){return 0===e?0:e<t?t-1:t},combineConsecutiveTextBlocks:function(){var e=[],t=!1;this.data.forEach(function(i,s){return"text"!==i.type?(e.push(i),void(t=!1)):t?void(e[e.length-1].text+=i.text):(e.push(i),void(t=!0))}),this.data=e},toggleSource:function(){this.showSource=!this.showSource},toggleFullscreen:function(){this.fullScreenMode=!this.fullScreenMode,this.$root.hideOverflow=!this.$root.hideOverflow},deleteSet:function(e){var t=this,i=this.getBlock(e-1),s=i&&"text"===i.data.type?i.plainText().length:null;this.data.splice(e,1),this.combineConsecutiveTextBlocks(),i&&this.$nextTick(function(){return t.getBlock(e-1).focusAt(s)})},goToPreviousTextField:function(e){var t=this;if(0!==e)for(var i=function(){e--;var i=t.getBlock(e);if("text"===i.data.type)return setTimeout(function(){i.focusAt("end")},10),{v:void 0}};e>0;){var s=i();if("object"===(void 0===s?"undefined":a(s)))return s.v}},goToNextTextField:function(e){var t=this,i=this.$refs.set.length-1;if(e!==i)for(var s=function(){e++;var i=t.getBlock(e);if("text"===i.data.type)return setTimeout(function(){i.focusAt("start")},10),{v:void 0}};e<i;){var n=s();if("object"===(void 0===n?"undefined":a(n)))return n.v}},updateText:function(e,t){this.data[e].text=t},getReplicatorPreviewText:function(){return e.map(this.$refs.set,function(e){return"text"===e.data.type?e.plainText():e.getCollapsedPreview()}).join(", ")}}}}.call(t,i(1))},function(e,t,i){var s,n,a={};s=i(553),n=i(554),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(171);t.default={mixins:[s.a],methods:{focusAt:function(e){this.focus()}},computed:{goingSolo:function(){var t=e.first(this.config.fields).type;return 1===this.config.fields.length&&e.contains(["assets"],t)}},events:{"asset-field.delete-bard-set":function(){this.$emit("deleted",this.index)}}}}.call(t,i(1))},function(e,t){e.exports=' <div class="bard-block bard-set" :class="{\'bard-set-solo\': goingSolo}"> <slot name=divider-start></slot> <div class=list-group> <div class="list-group-item group-header pl-3 bard-drag-handle" :class="{\'collapsed\': isHidden}" @dblclick=toggle v-if="! goingSolo"> <div class=flexy> <div class=fill> <div class="flexy baseline"> <label @click=toggle class=clickable>{{ display }}</label> <div v-if=isHidden> <small class="replicator-set-summary fill" v-html=collapsedPreview></small> </div> </div> <small class=help-block v-if="instructions && !isHidden" v-html="instructions | markdown"></small> </div> <div class="btn-group icon-group action-more"> <button type=button class="btn-more dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <slot name=expand-collapse></slot> <li class=warning><a @click=delete>{{ translate(\'cp.delete_set\') }}</a></li> </ul> </div> </div> </div> <div v-show="!isHidden || goingSolo" :class="{\'list-group-item p-0\': ! goingSolo}" v-if=config.fields.length> <div class="publish-fields p-1"> <div v-for="field in config.fields" :class=fieldClasses(field)> <div :class="{\'bard-drag-handle\': goingSolo}"> <label v-if=hasMultipleFields class=block :class="{\'bold\': field.bold}"> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | capitalize }}</template> <i class=required v-if=field.required>*</i> </label> <small class=help-block v-if=field.instructions v-html="field.instructions | markdown"></small> </div> <component :is=componentName(field.type) :name="parentName + \'.\' + index + \'.\' + field.name" :data.sync=data[field.name] :config=field> </component> </div> </div> </div> </div> <slot name=divider-end></slot> </div> '},function(e,t,i){var s,n,a={};s=i(556),n=i(558),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){var n=i(18),a=i.n(n),o=i(557),r=i(172),l=i.n(r),c=i(173),d=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var i=[],s=!0,n=!1,a=void 0;try{for(var o,r=e[Symbol.iterator]();!(s=(o=r.next()).done)&&(i.push(o.value),!t||i.length!==t);s=!0);}catch(e){n=!0,a=e}finally{try{!s&&r.return&&r.return()}finally{if(n)throw a}}return i}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.default={name:"BardText",components:{selector:i(10)},mixins:[c.a],props:["data","index","showSource"],data:function(){return{editor:null,isShowingOptions:!1,optionsTopPosition:0,focusedElement:null,dropped:{sibling:null,position:null},text:this.data.text||""}},computed:{field:function(){return this.$els.input},sourceField:function(){return this.$els.source},isBlank:function(){return""===this.text||"<p><br></p>"===this.text},optionStyles:function(){return{top:this.optionsTopPosition+"px"}},hasSets:function(){return this.$parent.hasSets}},watch:{showSource:function(e){var t=this;e?this.$nextTick(function(){a.a.update(t.sourceField)}):this.updateEditorHtml(this.text)},text:function(e){this.$emit("text-updated",this.index,e),this.$dispatch("changesMade",!0)},"data.text":function(e,t){var i=this;e!==this.text&&(this.text=e,this.$nextTick(function(){return i.updateEditorHtml(e)}))}},ready:function(){a()(this.sourceField),this.initMedium()},methods:{getFieldtypeConfig:function(){return this.$parent.config},plainText:function(){return this.editor.elements[0].textContent},addDropAreas:function(){var e=this,t=this.editor.elements[0],i=!1;Array.from(t.children).forEach(function(s){s.classList.contains("bard-drop-area")||(i||(e.addDropAreaBefore(s,t),i=!0),e.addDropAreaAfter(s,t))})},addDropAreaBefore:function(e,t){var i=this,s=document.createElement("div"),n=document.createElement("div");n.className+="bard-drop-area-inner",n.addEventListener("mouseover",function(){i.dropped.sibling=e,i.dropped.position="previous"}),s.appendChild(n),s.className+="bard-drop-area bard-drop-area-before",t.insertBefore(s,e)},addDropAreaAfter:function(e,t){var i=this,s=document.createElement("div"),n=document.createElement("div");n.className+="bard-drop-area-inner",n.addEventListener("mouseover",function(){i.dropped.sibling=e,i.dropped.position="next"}),s.appendChild(n),s.className+="bard-drop-area bard-drop-area-after",t.insertBefore(s,e.nextSibling)},removeDropAreas:function(){var e=this.editor.elements[0].getElementsByClassName("bard-drop-area");Array.from(e).forEach(function(e){return e.remove()}),this.text=this.editor.getContent()},localizeButtons:function(e){var t={bold:"bold",italic:"italic",anchor:"link",h2:"h2",h3:"h3",quote:"blockquote"};return e.map(function(e){return t.hasOwnProperty(e)?{name:e,aria:translate("cp."+t[e])}:e})},initMedium:function(){var t=this,i=this.localizeButtons(this.$parent.config.buttons||["bold","italic","anchor","unorderedlist","orderedlist","h2","h3","quote"]),n=Object.assign({imageDragging:{},autolist:new o.a,autohr:new l.a},e.map(Statamic.MediumEditorExtensions,function(e){return new e}));this.$parent.config.container&&(n.assets=this.assetButtonExtension(),i.includes("assets")||i.push("assets"));var a={toolbar:{buttons:i},autoLink:this.$parent.config.autolink||!1,placeholder:!1,paste:{forcePlainText:this.$parent.config.force_plain_text,cleanPastedHTML:this.$parent.config.clean_pasted_html},spellcheck:this.$parent.config.spellcheck||!0,targetBlank:this.$parent.config.target_blank||!1,linkValidation:this.$parent.config.link_validation||!1,anchor:{placeholderText:translate("cp.paste_or_type_link"),aria:translate("cp.link")},extensions:n};this.$parent.config.markdown&&(a.toolbar=!1,a.keyboardCommands={commands:[{command:!1,key:"B",meta:!0,shift:!1},{command:!1,key:"I",meta:!0,shift:!1},{command:!1,key:"U",meta:!0,shift:!1}]}),this.editor=new MediumEditor(this.field,a),this.updateEditorHtml(this.text),this.editor.subscribe("editableInput",function(e){t.editor.getFocusedElement()&&t.focusElement(t.editor.getSelectedParentElement()),s(t.field).find("span[style]").contents().unwrap(),t.text=t.editor.getContent()}),this.editor.subscribe("editableClick",function(e){t.focusElement(e.target)}),this.editor.subscribe("editableKeyup",function(e){t.focusElement(t.editor.getSelectedParentElement())}),this.editor.subscribe("editableKeydownDelete",function(e){t.isBlank&&t.$emit("deleted",t.index)}),this.editor.subscribe("editableKeydown",function(e){var i="ArrowUp"===e.key||"ArrowLeft"===e.key,s="ArrowDown"===e.key||"ArrowRight"===e.key;if(i||s){var n=t.editor.exportSelection(),a=!t.editor.getSelectedParentElement().previousSibling,o=!t.editor.getSelectedParentElement().nextSibling;i&&0===n.start&&0===n.end&&a?t.$emit("arrow-up-at-start",t.index):s&&n.start===t.plainText().length&&n.end===t.plainText().length&&o&&t.$emit("arrow-down-at-end",t.index)}})},assetButtonExtension:function(){var e=this;return new(MediumEditor.extensions.button.extend({name:"assets",tagNames:["a"],contentDefault:'<span class="icon icon-images"></span>',aria:translate("cp.nav_assets"),handleClick:function(){var t=this.base.getExtensionByName("toolbar");t&&t.hideToolbar(),this.base.saveSelection(),e.addAsset()}}))},moveOptionsToElement:function(e){this.isShowingOptions=!0,this.optionsTopPosition=e.offsetTop-2},hideOptions:function(){this.isShowingOptions=!1},elementIsEmpty:function(e){var t=e.innerHTML;return""===t||"<br>"===t},focusElement:function(e){return this.focusedElement=e,"P"!==e.nodeName?this.hideOptions():this.elementIsEmpty(e)?this.moveOptionsToElement(e):this.hideOptions()},getNextSiblings:function(e){for(var t=[];e=e.nextSibling;)t.push(e);return t},getPreviousSiblings:function(e){for(var t=[];e=e.previousSibling;)t.push(e);return t},focus:function(){this.focusAt("start")},focusAt:function(e){"start"===e?e=0:"end"===e&&(e=this.plainText().length),this.setCaret(e)},setCaret:function(e){this.editor.importSelection({start:e,end:e})},insertSet:function(e){var t=this.getBeforeAndAfterHtml(),i=d(t,2),s=i[0],n=i[1];this.$emit("set-inserted",e,this.index,s,n)},getBeforeAndAfterHtml:function(){return[this.getHtmlFromElements(this.getPreviousSiblings(this.focusedElement).reverse()),this.getHtmlFromElements(this.getNextSiblings(this.focusedElement))]},getHtmlFromElements:function(t){return e.reduce(t,function(e,t){return e+(t.outerHTML||"")},"")},insertParagraph:function(){var e=this.dropped.sibling;"next"===this.dropped.position&&(e=e.nextSibling);var t=document.createElement("p");this.field.insertBefore(t,e);t.innerHTML="%%%CARET%%%",this.setCaret(this.plainText().indexOf("%%%CARET%%%")),t.innerHTML="<br>",this.text=this.editor.getContent(),this.focusElement(t)},updateEditorHtml:function(){this.editor.setContent(this.text)},assetsSelected:function(t){var i=this;this.editor.restoreSelection(),this.$http.post(cp_url("assets/get"),{assets:t},function(t){e(t).each(function(e){return i.editor.createLink({value:e.url})})})}}}}.call(t,i(1),i(2))},function(e,t,i){"use strict";t.a=MediumEditor.Extension.extend({name:"autolist",init:function(){this.subscribe("editableInput",this.onInput.bind(this)),this.subscribe("editablePaste",this.onPaste.bind(this))},onInput:function(e){if(this.base.getFocusedElement()){var t=this.base.getSelectedParentElement().textContent;/^1\.\s$/.test(t)?(this.base.execAction("delete"),this.base.execAction("delete"),this.base.execAction("delete"),this.base.execAction("insertorderedlist")):/^[\*\-]\s$/.test(t)&&(this.base.execAction("delete"),this.base.execAction("delete"),this.base.execAction("insertunorderedlist"))}},onPaste:function(e){var t=e.target;Array.from(t.children).forEach(function(e){return function(e){var t=function(e){if(/^[\*\-]\s/.test(e.textContent))return"ul";if(/^\d+\.\s/.test(e.textContent))return"ol";return!1}(e);if(!t)return;var i=document.createElement("li"),s=new RegExp("ul"===t?/^([\*\-]\s)/:/^(\d+\.\s)/);i.textContent=e.textContent.replace(s,""),i.dataset.liType=t,function(e,t){e.parentNode.insertBefore(t,e.nextSibling),e.parentNode.removeChild(e)}(e,i)}(e)}),function(e){var t=[];return e.forEach(function(e){e.forEach(function(e){return t.push(e)})}),t}(function(e){for(var t=[[]],i=0,s=!1,n=0;n<e.length;n++){var a=e[n],o="LI"===a.nodeName,r=s&&!o||!s&&o;r&&(t[++i]=[]),s=o,t[i].push(a)}return t.filter(function(e){return e.length})}(Array.from(t.children)).map(function(e){var t=e[0];if("LI"!==t.nodeName)return e;var i=document.createElement(t.dataset.liType);return e.forEach(function(e){delete e.dataset.liType,i.appendChild(e)}),[i]})).forEach(function(e){return t.appendChild(e)}),this.base.checkContentChanged()}})},function(e,t){e.exports=' <div class="bard-block bard-text"> <div class=bard-set-selector v-show="hasSets && isShowingOptions" :style=optionStyles> <div class=blerp> <button type=button class="btn btn-round dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <span class="icon icon-plus"></span> </button> <ul class=dropdown-menu> <li v-for="set in $parent.config.sets"> <a @click.prevent=insertSet(set.name)> <i class="icon icon-add-to-list"></i> {{ set.display || set.name }} </a> </li> <li v-if=isBlank> <a @click.prevent="$emit(\'deleted\', index)"> <i class="icon icon-trash"></i> {{ translate(\'cp.delete\') }} </a> </li> </ul> </div> </div> <textarea class=bard-source v-model=text v-show=showSource v-el:source rows=1></textarea> <div class=bard-editor v-show=!showSource v-el:input></div> <selector v-if=showAssetSelector :container=container :folder=folder :selected=selectedAssets :restrict-navigation=restrictAssetNavigation :max-files=1 @selected=assetsSelected @closed=closeAssetSelector></selector> </div> '},function(e,t){e.exports=" <div class=\"bard-fieldtype-wrapper replicator\" :class=\"{'bard-fullscreen': fullScreenMode, 'no-sets': !hasSets }\"> <div class=bard-blocks v-if=isReady v-el:blocks> <component :is=\"block.type === 'text' ? 'BardText' : 'BardSet'\" v-for=\"(index, block) in data\" v-ref:set :class=\"{ 'divider-at-start': canShowDividerAtStart(index), 'divider-at-end': canShowDividerAtEnd(index) }\" :key=index :data=block :index=index :parent-name=name :config=setConfig(block.type) :show-source=showSource @set-inserted=setInserted @deleted=deleteSet @source-toggled=toggleSource @arrow-up-at-start=goToPreviousTextField @arrow-down-at-end=goToNextTextField @text-updated=updateText> <template slot=divider-start> <div v-show=canShowDividerAtStart(index) class=\"bard-divider bard-divider-start\" @click=addTextBlock(index-1)></div> </template> <template slot=divider-end> <div v-show=canShowDividerAtEnd(index) class=\"bard-divider bard-divider-end\" @click=addTextBlock(index)></div> </template> <template slot=expand-collapse> <li><a @click=collapseAll>{{ translate('cp.collapse_all') }}</a></li> <li><a @click=expandAll>{{ translate('cp.expand_all') }}</a></li> </template> </component> </div> <div class=bard-field-title v-text=config.display></div> <div class=\"bard-field-options no-select\"> <a @click=toggleSource :class=\"{ active: showSource }\" v-if=allowSource><i class=\"icon icon-code\"></i></a> <a @click=toggleFullscreen><i class=icon :class=\"{ 'icon-resize-full-screen' : ! fullScreenMode, 'icon-resize-100' : fullScreenMode }\"></i></a> </div> </div> "},function(e,t,i){var s,n,a={};s=i(561),n=i(562),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],data:function(){return{autoBindChangeWatcher:!1}},ready:function(){"string"==typeof this.config&&(this.config=JSON.parse(this.config)),this.data||(this.data=[]),this.bindChangeWatcher()},methods:{focus:function(){document.getElementById(this.name+"-0").focus()},getReplicatorPreviewText:function(){var t=this;return this.data.map(function(i){var s=e.findWhere(t.config.options,{value:i});return s?s.text:i}).join(", ")}}}}.call(t,i(1))},function(e,t){e.exports=' <ul class=list-unstyled> <li v-for="option in config.options"> <input type=checkbox name="{{ name }}[]" :id="name + \'-\' + $index" :value=option.value v-model=data /> <label :for="name + \'-\' + $index">{{ option.text }}</label> </li> </ul> '},function(e,t,i){var s,n={};s=i(564),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(n).forEach(function(e){var t=n[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(5),n=i.n(s);t.default={mixins:[n.a]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["data","config","name"],methods:{getReplicatorPreviewText:function(){if(this.data)return this.$refs.relate?this.$refs.relate.getReplicatorPreviewText():this.data.join(", ")},focus:function(){this.$refs.relate.focus()}}}},function(e,t){e.exports=" <div> <relate-fieldtype v-ref:relate :data.sync=data :name=name :config=config> </relate-fieldtype> </div> "},function(e,t,i){var s,n={};s=i(568),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(n).forEach(function(e){var t=n[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(5),n=i.n(s);t.default={mixins:[n.a]}},function(e,t,i){var s,n,a={};s=i(570),n=i(571),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(0),n=i.n(s),a=i(174),o=i.n(a);t.default={mixins:[Fieldtype],props:{name:String,data:{},config:{default:function(){return{}}}},data:function(){return{calendar:null,time:null,autoBindChangeWatcher:!1}},computed:{hasDate:function(){return!this.blankAllowed||null!==this.data},hasTime:function(){return this.data&&this.data.length>10},timeAllowed:function(){return this.timeRequired||this.allowTime},allowTime:function(){return void 0==this.config.allow_time||0!=this.config.allow_time},timeRequired:function(){return this.config.require_time},blankAllowed:function(){return!0===this.config.allow_blank}},methods:{dateString:function(){return this.data&&this.data.length>=10?this.data.substr(0,10):n()().format("YYYY-MM-DD")},updateDateString:function(e){var t=this.hasTime?" "+this.time:"";this.data=e+t},watchTime:function(){var e=this;this.$watch("time",function(t,i){e.data=null===t?e.dateString():e.dateString()+" "+t})},addTime:function(){this.time=n()().format("HH:mm"),this.$nextTick(function(){e(this.$refs.time.$els.hour).focus().select()})},removeTime:function(){this.time=null},addDate:function(){this.data=n()().format("YYYY-MM-DD"),this.$nextTick(function(){this.bindCalendar()})},removeDate:function(){this.data=null},bindCalendar:function(){var t=this,i=this.data?n()(t.dateString()):n()().format("YYYY-MM-DD");this.calendar=new o.a({element:e(t.$el).find(".daterange"),current_date:n()(i),earliest_date:this.config.earliest_date||"January 1, 1900",format:{input:this.config.input_format||Statamic.dateFormat,jump_month:"MMMM",jump_year:"YYYY"},callback:function(){var e=n()(this.current_date).format("YYYY-MM-DD");t.updateDateString(e)}})},focus:function(){var t=this;setTimeout(function(){return e(t.$els.date).find(".dr-input .dr-date").click()},200)}},ready:function(){if(this.data||this.blankAllowed)this.data&&this.timeRequired&&!this.hasTime&&(this.data+=" "+n()().format("HH:mm"));else{var e=this.timeRequired||this.config.show_time?"YYYY-MM-DD HH:mm":"YYYY-MM-DD";this.data=n()().format(e)}this.data&&(this.time=this.data.substr(11)),this.watchTime(),this.bindCalendar(),this.bindChangeWatcher()}}}.call(t,i(2))},function(e,t){e.exports=' <div class="datetime clearfix"> <button type=button class="btn btn-default add-date" v-if=!hasDate @click=addDate tabindex=0> {{ translate(\'cp.add_date\') }} </button> <div v-if=hasDate class=date-time-container> <div class=col-date> <div class="daterange daterange--single" :data-datetime=date v-el:date> <span class="icon icon-calendar"></span> <span class="icon icon-remove" @click=removeDate v-if=blankAllowed>&times;</span> </div> </div> <div class=col-time> <div class=time-fieldtype v-if=timeAllowed> <time-fieldtype v-ref:time v-show=hasTime :data.sync=time :required=timeRequired></time-fieldtype> <button type=button class="btn btn-default btn-icon add-time" v-show=!hasTime @click=addTime tabindex=0> <span class="icon icon-clock"></span> </button> </div> </div> </div> </div> '},function(e,t,i){var s,n,a={};s=i(573),n=i(574),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){i(3);t.default={mixins:[Fieldtype],data:function(){return{blank:{},sortableOptions:{},min_rows:this.config.min_rows||0,max_rows:this.config.max_rows||!1,autoBindChangeWatcher:!1,changeWatcherWatchDeep:!1,containerWidth:null}},computed:{stacked:function(){return this.containerWidth<600||"stacked"===this.config.mode},hasData:function(){return this.data&&this.data.length},isNested:function(){return"grid-fieldtype"===this.$parent.$options.name},canAddRows:function(){return!this.max_rows||!this.data||this.data.length<this.max_rows},addRowButton:function(){return this.config.add_row||translate_choice("cp.rows",1)}},ready:function(){var e=this;if(this.data||(this.data=[]),this.prepareBlankRow(),this.min_rows)for(var t=this.min_rows-this.data.length,i=1;i<=t;i++)this.addRow();this.trackContainerWidth(),this.$nextTick(function(){return e.initSortable()}),this.bindChangeWatcher(),this.$watch("stacked",function(){this.initSortable()})},methods:{prepareBlankRow:function(){var t={},i=JSON.parse(JSON.stringify(this.config.fields));e.each(i,function(e){t[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),this.blank=t},addRow:function(){var t=e.clone(this.blank);this.data.push(t),this.$nextTick(function(){this.getSortable().sortable(this.getSortableOptions());var e=this.$children.length-this.$children.length/this.data.length;this.$children[e].focus()})},deleteRow:function(e){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.data.splice(e,1)})},isExcessive:function(e){return!!this.max_rows&&e+1>this.max_rows},initSortable:function(){this.getSortable().sortable(this.getSortableOptions())},getSortable:function(){return this.stacked?s(this.$el).find(".grid-stacked"):s(this.$el).find("tbody")},getSortableOptions:function(){var e=this,t="";if(this.stacked)var i="stacked-placeholder";else i="table-row-placeholder";return{axis:"y",revert:175,handle:".drag-handle",placeholder:i,forcePlaceholderSize:!0,start:function(e,i){t=i.item.index(),i.placeholder.height(i.item.height())},update:function(i,s){var n=s.item.index(),a=e.data.splice(t,1)[0];e.data.splice(n,0,a)}}},stackedFieldClasses:function(e){return["form-group p-2 m-0 "+e.type+"-fieldtype",tailwind_width_class(e.width)]},gridColWidth:function(e){return 100===e?"":e+"%"},getReplicatorPreviewText:function(){return e.map(this.$children,function(e){if(!1!==e.config.replicator_preview)return void 0!==e.getReplicatorPreviewText?e.getReplicatorPreviewText():JSON.stringify(e.data)}).join(", ")},focus:function(){this.hasData?this.$children[0].focus():this.$els.addRowButton.focus()},trackContainerWidth:function(){var t=this,i=function(){t.containerWidth=t.$el.parentElement.clientWidth},s=e.throttle(i,100);i(),this.$root.$on("livepreview.opened",s),this.$root.$on("livepreview.closed",s),this.$root.$on("livepreview.resizing",s),this.$root.$on("publish.section.changed",s),addEventListener("resize",s),this.$once("hook:beforeDestroy",function(){window.removeEventListener("resize",s),t.$root.$off("livepreview.opened",s),t.$root.$off("livepreview.closed",s),t.$root.$off("livepreview.resizing",s),t.$root.$off("publish.section.changed",s)})},componentName:function(e){return e.replace(".","-")+"-fieldtype"}}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <div class="grid-field grid-mode-{{ (stacked) ? \'stacked\' : \'table\' }}"> <table v-if="hasData && !stacked" class="grid-table bordered-table"> <thead> <tr> <th v-for="field in config.fields" :style="{ width: gridColWidth(field.width) }"> <div class=flexy> <label class="block fill"> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | capitalize }}</template> <i class=required v-if=field.required>*</i> </label> <i class="icon icon-help-with-circle o5 fs-12" v-if=field.instructions v-tip :tip-text="field.instructions | markdown"></i> </div> </th> <th class=row-controls></th> </tr> </thead> <tbody> <tr v-for="(rowIndex, row) in data" :class="{excess: isExcessive(rowIndex)}"> <td v-for="field in config.fields"> <div class="{{ field.type }}-fieldtype"> <component :is=componentName(field.type) :name="name + \'.\' + rowIndex + \'.\' + field.name" :data.sync=row[field.name] :config=field> </component> </div> </td> <td class=row-controls> <span class="icon icon-menu move drag-handle"></span> <span class="icon icon-cross delete" v-on:click=deleteRow(rowIndex)></span> </td> </tr> </tbody> </table> <div v-if="hasData && stacked" class=grid-stacked> <div class=list-group v-for="(rowIndex, row) in data"> <div class="list-group-item group-header pl-3 drag-handle"> <div class=flexy> <label class=fill>{{ rowIndex + 1 }}</label> <i class="icon icon-cross" v-on:click=deleteRow(rowIndex)></i> </div> </div> <div class="list-group-item p-0"> <div class="publish-fields p-1"> <div v-for="field in config.fields" :class=stackedFieldClasses(field)> <label class=block> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | capitalize }}</template> <i class=required v-if=field.required>*</i> </label> <small class=help-block v-if=field.instructions v-html="field.instructions | markdown"></small> <component :is="field.type + \'-fieldtype\'" :name="name + \'.\' + rowIndex + \'.\' + field.name" :data.sync=row[field.name] :config=field> </component> </div> </div> </div> </div> </div> <template v-if=canAddRows> <button type=button class="btn btn-default add-row" @click=addRow v-el:add-row-button> {{ addRowButton }} <i class="icon icon-plus icon-right"></i> </button> </template> </div> '},function(e,t,i){var s,n,a={};s=i(576),n=i(577),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i,s){t.default={mixins:[Fieldtype],props:{required:Boolean,url:String},data:function(){return{loading:!0,creating:!1,storePending:!1,newFieldsetName:"",options:{},autoBindChangeWatcher:!1}},computed:{selectConfig:function(){return{options:this.options}},canAdd:function(){return e.can("super")}},ready:function(){this.getFieldsets()},methods:{add:function(){var e=this;this.creating=!0,this.$nextTick(function(){return e.$els.createField.focus()})},cancelAdd:function(){this.creating=!1,this.newFieldsetName=""},create:function(){var e=this;this.storePending||(this.storePending=!0,this.$http.post(cp_url("fieldsets/quick"),{name:this.newFieldsetName}).success(function(t){e.data=e.newFieldsetName,e.storePending=!1,e.cancelAdd(),e.refresh()}))},refresh:function(){this.loading=!0,this.getFieldsets()},getFieldsets:function(){var e=cp_url("fieldsets-json"),t={};this.url&&(t.url=this.url),this.config&&!this.config.hidden&&(t.hidden=!1),e+="?"+i.param(t),this.$http.get(e,function(e){var t=this.required?[]:[{value:null,text:""}];s.each(e.items,function(e){t.push({value:e.uuid,text:e.title})}),this.options=t,this.loading=!1,this.required&&!this.data&&(this.data=this.options[0].value),this.bindChangeWatcher()})}}}}.call(t,i(3),i(2),i(1))},function(e,t){e.exports=' <div class=template-fieldtype-wrapper> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if=!loading> <div class=input-group v-show=creating> <input type=text v-el:create-field class=form-control v-model=newFieldsetName @keydown.enter.prevent=create @keydown.esc=cancelAdd /> <div class=input-group-btn> <button class="btn btn-primary" @click.prevent=create :disabled=storePending>{{ translate(\'cp.create\') }}</button> <button class="btn btn-default" @click.prevent=cancelAdd>{{ translate(\'cp.cancel\') }}</button> </div> </div> <div class=input-group v-else> <select-fieldtype :name=name :data.sync=data :config=selectConfig></select-fieldtype> <span class=input-group-btn> <button class=btn @click.prevent=add v-if=canAdd> <span class="icon icon-plus"></span> </button> <button class=btn @click.prevent=refresh> <span class="icon icon-cycle"></span> </button> </span> </div> </div> </div> '},function(e,t,i){var s,n={};s=i(579),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(n).forEach(function(e){var t=n[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(5),n=i.n(s);t.default={mixins:[n.a]}},function(e,t,i){var s,n,a={};s=i(581),n=i(582),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype]}},function(e,t){e.exports=" <input type=hidden :name=name v-model=data /> "},function(e,t,i){var s,n,a={};s=i(584),n=i(585),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype],props:["autofocus"],computed:{classes:function(){return"form-control"}}}},function(e,t){e.exports=" <input type=number :class=classes v-model=data tabindex=0 :autofocus=autofocus /> "},function(e,t,i){var s,n,a={};s=i(587),n=i(588),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],data:function(){return{newItem:"",editing:null,autoBindChangeWatcher:!1}},methods:{addItem:function(){""!==this.newItem&&(this.data.push(this.newItem),this.newItem="",this.editing=this.data.length)},editItem:function(t,i){i.preventDefault(),this.editing=t,this.$nextTick(function(){e(this.$el).find(".editing input").focus().select()})},goUp:function(){this.editing>0&&(this.editing=this.editing-1,this.$nextTick(function(){e(this.$el).find(".editing input").focus().select()}))},goDown:function(){this.editing===this.data.length-1?(this.editing=this.data.length,e(this.$el).find(".new-item").focus()):(this.editing=this.editing+1,this.$nextTick(function(){e(this.$el).find(".editing input").focus().select()}))},updateItem:function(t,i,s){s.preventDefault(),""==t?this.data.$remove(i):this.data[i]=t,this.editing=this.data.length,e(this.$el).find(".new-item").focus()},deleteItem:function(e){this.data.$remove(e)},getReplicatorPreviewText:function(){return this.data.join(", ")}},ready:function(){var t=this,i="";this.data||(this.data=[]),this.bindChangeWatcher(),e(this.$el).sortable({axis:"y",revert:175,items:"> li:not(:last-child)",start:function(e,t){i=t.item.index()},update:function(e,s){var n=s.item.index(),a=t.data.splice(i,1)[0];t.data.splice(n,0,a)}})}}}.call(t,i(2))},function(e,t){e.exports=' <ul> <li v-for="item in data" track-by=$index :class="{ editing: (editing == $index) }"> <span v-if="editing == $index"> <input type=text v-model=item class=form-control @keydown.enter="updateItem(item, $index, $event)" @keyup.up=goUp @keyup.down=goDown /> </span> <span v-if="editing != $index" @dblclick="editItem($index, $event)"> {{ item }} <i class=delete @click=deleteItem(item)></i> </span> </li> <li> <input type=text class="form-control new-item" v-model=newItem placeholder="{{ translate(\'cp.add_another_item\')}}..." @keydown.enter.prevent=addItem @blur=addItem @keyup.up=goUp /> </li> </ul> '},function(e,t,i){var s,n,a={};s=i(590),n=i(591),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["data","config","name","indexPhpWarning"],computed:{shouldShowIndexPhpWarning:function(){return this.indexPhpWarning&&"en"!==this.firstLocale},firstLocale:function(){return this.data.length?this.data[0].locale:"en"}},data:function(){return{gridConfig:{add_row:translate("cp.add_locale"),fields:[{name:"locale",type:"text",display:translate("cp.shorthand"),instructions:translate("cp.shorthand_instructions"),width:"20%"},{name:"full",type:"text",display:translate("cp.full_locale"),instructions:translate("cp.full_locale_instructions"),width:"20%"},{name:"name",type:"text",display:translate("cp.name"),instructions:translate("cp.locale_name_instructions"),width:"20%"},{name:"url",type:"text",display:translate("cp.url"),instructions:translate("cp.locale_url_instructions")}]}}}}},function(e,t){e.exports=' <div class=locale-settings-fieldtype-wrapper> <grid-fieldtype :data=data :config=gridConfig></grid-fieldtype> <div class="alert alert-danger mt-16" v-if=shouldShowIndexPhpWarning> <small v-html="translate(\'cp.settings_locales_index_php_warning\', { locale: firstLocale })"></small> </div> </div> '},function(e,t,i){var s,n,a={};s=i(593),n=i(601),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(4),n=i(12),a=i(175);i(594),i(595),i(596),i(176),i(19),i(179),i(598),i(177),i(178),i(180),i(600),i(181),t.default={mixins:[Fieldtype],components:{selector:i(10),Uploader:i(13)},data:function(){return{mode:"write",selections:null,showAssetSelector:!1,selectedAssets:[],selectorViewMode:null,draggingFile:!1,showCheatsheet:!1,fullScreenMode:!1,codemirror:null}},methods:{toggleFullScreen:function(){this.fullScreenMode=!this.fullScreenMode,this.$root.hideOverflow=!this.$root.hideOverflow},getText:function(t){var i=e.indexOf(this.selections,t);return this.codemirror.getSelections()[i]},insertImage:function(e,t){var i=this.codemirror.doc,s="";i.somethingSelected()?s=i.getSelection():t&&(s=t);var n="!["+s+"]("+(e=e||"")+")";i.replaceSelection(n,"start");var a=i.getCursor().line,o=i.getCursor().ch+2,r=o+s.length;i.setSelection({line:a,ch:o},{line:a,ch:r}),this.codemirror.focus()},appendImage:function(e,t){t=t||"",this.data+="\n\n!["+t+"]("+e+")"},insertLink:function(e,t){var i=this.codemirror.doc,s="";i.somethingSelected()?s=i.getSelection():t&&(s=t),e||(e=prompt("Enter URL","http://"))||(e="");var n="["+s+"]("+e+")";i.replaceSelection(n,"start");var a=i.getCursor().line,o=i.getCursor().ch+1,r=o+s.length;i.setSelection({line:a,ch:o},{line:a,ch:r}),this.codemirror.focus()},appendLink:function(e,t){t=t||"",this.data+="\n\n["+t+"]("+e+")"},bold:function(){var t=this,i=[];e.each(t.selections,function(e,s){var n=t.isBold(e)?t.removeBold(e):t.makeBold(e);i.push(n)}),this.codemirror.replaceSelections(i,"around"),this.codemirror.focus()},isBold:function(e){return this.getText(e).match(/^\*{2}(.*)\*{2}$/)},makeBold:function(e){return"**"+this.getText(e)+"**"},removeBold:function(e){var t=this.getText(e);return t.substring(2,t.length-2)},italic:function(){var t=this,i=[];e.each(t.selections,function(e,s){var n=t.isItalic(e)?t.removeItalic(e):t.makeItalic(e);i.push(n)}),this.codemirror.replaceSelections(i,"around"),this.codemirror.focus()},isItalic:function(e){return this.getText(e).match(/^\_(.*)\_$/)},makeItalic:function(e){return"_"+this.getText(e)+"_"},removeItalic:function(e){var t=this.getText(e);return t.substring(1,t.length-1)},addAsset:function(){this.showAssetSelector=!0},shortcut:function(e){var t=e.keyCode,i=!0===e.metaKey;i&&66===t&&(this.bold(),e.preventDefault()),i&&73===t&&(this.italic(),e.preventDefault()),i&&75===t&&(this.insertLink(),e.preventDefault())},assetsSelected:function(t){var i=this,s=1===t.length?"insert":"append";this.closeAssetSelector(),this.selectedAssets=[],this.$http.post(cp_url("assets/get"),{assets:t},function(t){e(t).each(function(e){var t=e.alt||"",n=encodeURI(e.url);e.is_image?i[s+"Image"](n,t):i[s+"Link"](n,t)})})},closeAssetSelector:function(){this.showAssetSelector=!1},uploadComplete:function(e,t){e.is_image?this.insertImage(e.url):this.insertLink(e.url),t.length>1&&this.codemirror.setCursor(this.codemirror.lineCount(),0)},getReplicatorPreviewText:function(){return n(this.data||"",{renderer:new a}).replace(/<\/?[^>]+(>|$)/g,"")},focus:function(){this.codemirror.focus()},trackHeightUpdates:function(){var t=this,i=e.throttle(function(){window.dispatchEvent(new Event("resize"))},100);this.$root.$on("livepreview.opened",i),this.$root.$on("livepreview.closed",i),this.$root.$on("livepreview.resizing",i),this.$once("hook:beforeDestroy",function(){t.$root.$off("livepreview.opened",i),t.$root.$off("livepreview.closed",i),t.$root.$off("livepreview.resizing",i)})}},computed:{assetsEnabled:function(){return this.config&&this.config.container},container:function(){return this.config.container},folder:function(){return this.config.folder||"/"},cheatsheet:function(){return this.config&&this.config.cheatsheet},uploadElement:function(){return this.$el},restrictAssetNavigation:function(){return this.config.restrict_assets||!1}},ready:function(){var e=this;e.codemirror=s(this.$els.codemirror,{value:e.data||"",mode:"gfm",dragDrop:!1,lineWrapping:!0,viewportMargin:1/0,tabindex:0,autoRefresh:!0}),e.codemirror.on("change",function(t){e.data=t.doc.getValue()}),e.codemirror.on("beforeSelectionChange",function(t,i){e.selections=i.ranges}),this.$watch("data",function(t){t!==e.codemirror.doc.getValue()&&e.codemirror.doc.setValue(t)}),this.trackHeightUpdates()}}}.call(t,i(1))},function(e,t,i){(function(e){var t={pairs:"()[]{}''\"\"",triples:"",explode:"[]{}"},i=e.Pos;function s(e,i){return"pairs"==i&&"string"==typeof e?e:"object"==typeof e&&null!=e[i]?e[i]:t[i]}e.defineOption("autoCloseBrackets",!1,function(t,i,o){o&&o!=e.Init&&(t.removeKeyMap(n),t.state.closeBrackets=null),i&&(a(s(i,"pairs")),t.state.closeBrackets=i,t.addKeyMap(n))});var n={Backspace:function(t){var n=r(t);if(!n||t.getOption("disableInput"))return e.Pass;for(var a=s(n,"pairs"),o=t.listSelections(),l=0;l<o.length;l++){if(!o[l].empty())return e.Pass;var d=c(t,o[l].head);if(!d||a.indexOf(d)%2!=0)return e.Pass}for(var l=o.length-1;l>=0;l--){var u=o[l].head;t.replaceRange("",i(u.line,u.ch-1),i(u.line,u.ch+1),"+delete")}},Enter:function(t){var i=r(t),n=i&&s(i,"explode");if(!n||t.getOption("disableInput"))return e.Pass;for(var a=t.listSelections(),o=0;o<a.length;o++){if(!a[o].empty())return e.Pass;var l=c(t,a[o].head);if(!l||n.indexOf(l)%2!=0)return e.Pass}t.operation(function(){var e=t.lineSeparator()||"\n";t.replaceSelection(e+e,null),t.execCommand("goCharLeft"),a=t.listSelections();for(var i=0;i<a.length;i++){var s=a[i].head.line;t.indentLine(s,null,!0),t.indentLine(s+1,null,!0)}})}};function a(e){for(var t=0;t<e.length;t++){var i=e.charAt(t),s="'"+i+"'";n[s]||(n[s]=o(i))}}function o(t){return function(n){return function(t,n){var a=r(t);if(!a||t.getOption("disableInput"))return e.Pass;var o=s(a,"pairs"),c=o.indexOf(n);if(-1==c)return e.Pass;for(var u,p=s(a,"triples"),f=o.charAt(c+1)==n,h=t.listSelections(),m=c%2==0,g=0;g<h.length;g++){var v,x=h[g],y=x.head,b=t.getRange(y,i(y.line,y.ch+1));if(m&&!x.empty())v="surround";else if(!f&&m||b!=n)if(f&&y.ch>1&&p.indexOf(n)>=0&&t.getRange(i(y.line,y.ch-2),y)==n+n){if(y.ch>2&&/\bstring/.test(t.getTokenTypeAt(i(y.line,y.ch-2))))return e.Pass;v="addFour"}else if(f){var w=0==y.ch?" ":t.getRange(i(y.line,y.ch-1),y);if(e.isWordChar(b)||w==n||e.isWordChar(w))return e.Pass;v="both"}else{if(!m||t.getLine(y.line).length!=y.ch&&!l(b,o)&&!/\s/.test(b))return e.Pass;v="both"}else v=f&&d(t,y)?"both":p.indexOf(n)>=0&&t.getRange(y,i(y.line,y.ch+3))==n+n+n?"skipThree":"skip";if(u){if(u!=v)return e.Pass}else u=v}var k=c%2?o.charAt(c-1):n,_=c%2?n:o.charAt(c+1);t.operation(function(){if("skip"==u)t.execCommand("goCharRight");else if("skipThree"==u)for(var s=0;s<3;s++)t.execCommand("goCharRight");else if("surround"==u){for(var n=t.getSelections(),s=0;s<n.length;s++)n[s]=k+n[s]+_;t.replaceSelections(n,"around"),n=t.listSelections().slice();for(var s=0;s<n.length;s++)n[s]=(a=n[s],void 0,o=e.cmpPos(a.anchor,a.head)>0,{anchor:new i(a.anchor.line,a.anchor.ch+(o?-1:1)),head:new i(a.head.line,a.head.ch+(o?1:-1))});t.setSelections(n)}else"both"==u?(t.replaceSelection(k+_,null),t.triggerElectric(k+_),t.execCommand("goCharLeft")):"addFour"==u&&(t.replaceSelection(k+k+k+k,"before"),t.execCommand("goCharRight"));var a,o})}(n,t)}}function r(e){var t=e.state.closeBrackets;return!t||t.override?t:e.getModeAt(e.getCursor()).closeBrackets||t}function l(e,t){var i=t.lastIndexOf(e);return i>-1&&i%2==1}function c(e,t){var s=e.getRange(i(t.line,t.ch-1),i(t.line,t.ch+1));return 2==s.length?s:null}function d(e,t){var s=e.getTokenAt(i(t.line,t.ch+1));return/\bstring/.test(s.type)&&s.start==t.ch&&(0==t.ch||!/\bstring/.test(e.getTokenTypeAt(t)))}a(t.pairs+"`")})(i(4))},function(e,t,i){(function(e){var t=/MSIE \d/.test(navigator.userAgent)&&(null==document.documentMode||document.documentMode<8),i=e.Pos,s={"(":")>",")":"(<","[":"]>","]":"[<","{":"}>","}":"{<"};function n(e,t,n){var o=e.getLineHandle(t.line),r=t.ch-1,l=n&&n.afterCursor;null==l&&(l=/(^| )cm-fat-cursor($| )/.test(e.getWrapperElement().className));var c=!l&&r>=0&&s[o.text.charAt(r)]||s[o.text.charAt(++r)];if(!c)return null;var d=">"==c.charAt(1)?1:-1;if(n&&n.strict&&d>0!=(r==t.ch))return null;var u=e.getTokenTypeAt(i(t.line,r+1)),p=a(e,i(t.line,r+(d>0?1:0)),d,u||null,n);return null==p?null:{from:i(t.line,r),to:p&&p.pos,match:p&&p.ch==c.charAt(0),forward:d>0}}function a(e,t,n,a,o){for(var r=o&&o.maxScanLineLength||1e4,l=o&&o.maxScanLines||1e3,c=[],d=o&&o.bracketRegex?o.bracketRegex:/[(){}[\]]/,u=n>0?Math.min(t.line+l,e.lastLine()+1):Math.max(e.firstLine()-1,t.line-l),p=t.line;p!=u;p+=n){var f=e.getLine(p);if(f){var h=n>0?0:f.length-1,m=n>0?f.length:-1;if(!(f.length>r))for(p==t.line&&(h=t.ch-(n<0?1:0));h!=m;h+=n){var g=f.charAt(h);if(d.test(g)&&(void 0===a||e.getTokenTypeAt(i(p,h+1))==a))if(">"==s[g].charAt(1)==n>0)c.push(g);else{if(!c.length)return{pos:i(p,h),ch:g};c.pop()}}}}return p-n!=(n>0?e.lastLine():e.firstLine())&&null}function o(e,s,a){for(var o=e.state.matchBrackets.maxHighlightLineLength||1e3,r=[],l=e.listSelections(),c=0;c<l.length;c++){var d=l[c].empty()&&n(e,l[c].head,a);if(d&&e.getLine(d.from.line).length<=o){var u=d.match?"CodeMirror-matchingbracket":"CodeMirror-nonmatchingbracket";r.push(e.markText(d.from,i(d.from.line,d.from.ch+1),{className:u})),d.to&&e.getLine(d.to.line).length<=o&&r.push(e.markText(d.to,i(d.to.line,d.to.ch+1),{className:u}))}}if(r.length){t&&e.state.focused&&e.focus();var p=function(){e.operation(function(){for(var e=0;e<r.length;e++)r[e].clear()})};if(!s)return p;setTimeout(p,800)}}function r(e){e.operation(function(){e.state.matchBrackets.currentlyHighlighted&&(e.state.matchBrackets.currentlyHighlighted(),e.state.matchBrackets.currentlyHighlighted=null),e.state.matchBrackets.currentlyHighlighted=o(e,!1,e.state.matchBrackets)})}e.defineOption("matchBrackets",!1,function(t,i,s){s&&s!=e.Init&&(t.off("cursorActivity",r),t.state.matchBrackets&&t.state.matchBrackets.currentlyHighlighted&&(t.state.matchBrackets.currentlyHighlighted(),t.state.matchBrackets.currentlyHighlighted=null)),i&&(t.state.matchBrackets="object"==typeof i?i:{},t.on("cursorActivity",r))}),e.defineExtension("matchBrackets",function(){o(this,!0)}),e.defineExtension("findMatchingBracket",function(e,t,i){return(i||"boolean"==typeof t)&&(i?(i.strict=t,t=i):t=t?{strict:!0}:null),n(this,e,t)}),e.defineExtension("scanForBracket",function(e,t,i,s){return a(this,e,t,i,s)})})(i(4))},function(e,t,i){(function(e){"use strict";function t(t,i){clearTimeout(i.timeout),e.off(window,"mouseup",i.hurry),e.off(window,"keyup",i.hurry)}e.defineOption("autoRefresh",!1,function(i,s){i.state.autoRefresh&&(t(i,i.state.autoRefresh),i.state.autoRefresh=null),s&&0==i.display.wrapper.offsetHeight&&function(i,s){function n(){i.display.wrapper.offsetHeight?(t(i,s),i.display.lastWrapHeight!=i.display.wrapper.clientHeight&&i.refresh()):s.timeout=setTimeout(n,s.delay)}s.timeout=setTimeout(n,s.delay),s.hurry=function(){clearTimeout(s.timeout),s.timeout=setTimeout(n,50)},e.on(window,"mouseup",s.hurry),e.on(window,"keyup",s.hurry)}(i,i.state.autoRefresh={delay:s.delay||250})})})(i(4))},function(e,t,i){(function(e){"use strict";e.modeInfo=[{name:"APL",mime:"text/apl",mode:"apl",ext:["dyalog","apl"]},{name:"PGP",mimes:["application/pgp","application/pgp-encrypted","application/pgp-keys","application/pgp-signature"],mode:"asciiarmor",ext:["asc","pgp","sig"]},{name:"ASN.1",mime:"text/x-ttcn-asn",mode:"asn.1",ext:["asn","asn1"]},{name:"Asterisk",mime:"text/x-asterisk",mode:"asterisk",file:/^extensions\.conf$/i},{name:"Brainfuck",mime:"text/x-brainfuck",mode:"brainfuck",ext:["b","bf"]},{name:"C",mime:"text/x-csrc",mode:"clike",ext:["c","h","ino"]},{name:"C++",mime:"text/x-c++src",mode:"clike",ext:["cpp","c++","cc","cxx","hpp","h++","hh","hxx"],alias:["cpp"]},{name:"Cobol",mime:"text/x-cobol",mode:"cobol",ext:["cob","cpy"]},{name:"C#",mime:"text/x-csharp",mode:"clike",ext:["cs"],alias:["csharp"]},{name:"Clojure",mime:"text/x-clojure",mode:"clojure",ext:["clj","cljc","cljx"]},{name:"ClojureScript",mime:"text/x-clojurescript",mode:"clojure",ext:["cljs"]},{name:"Closure Stylesheets (GSS)",mime:"text/x-gss",mode:"css",ext:["gss"]},{name:"CMake",mime:"text/x-cmake",mode:"cmake",ext:["cmake","cmake.in"],file:/^CMakeLists.txt$/},{name:"CoffeeScript",mimes:["application/vnd.coffeescript","text/coffeescript","text/x-coffeescript"],mode:"coffeescript",ext:["coffee"],alias:["coffee","coffee-script"]},{name:"Common Lisp",mime:"text/x-common-lisp",mode:"commonlisp",ext:["cl","lisp","el"],alias:["lisp"]},{name:"Cypher",mime:"application/x-cypher-query",mode:"cypher",ext:["cyp","cypher"]},{name:"Cython",mime:"text/x-cython",mode:"python",ext:["pyx","pxd","pxi"]},{name:"Crystal",mime:"text/x-crystal",mode:"crystal",ext:["cr"]},{name:"CSS",mime:"text/css",mode:"css",ext:["css"]},{name:"CQL",mime:"text/x-cassandra",mode:"sql",ext:["cql"]},{name:"D",mime:"text/x-d",mode:"d",ext:["d"]},{name:"Dart",mimes:["application/dart","text/x-dart"],mode:"dart",ext:["dart"]},{name:"diff",mime:"text/x-diff",mode:"diff",ext:["diff","patch"]},{name:"Django",mime:"text/x-django",mode:"django"},{name:"Dockerfile",mime:"text/x-dockerfile",mode:"dockerfile",file:/^Dockerfile$/},{name:"DTD",mime:"application/xml-dtd",mode:"dtd",ext:["dtd"]},{name:"Dylan",mime:"text/x-dylan",mode:"dylan",ext:["dylan","dyl","intr"]},{name:"EBNF",mime:"text/x-ebnf",mode:"ebnf"},{name:"ECL",mime:"text/x-ecl",mode:"ecl",ext:["ecl"]},{name:"edn",mime:"application/edn",mode:"clojure",ext:["edn"]},{name:"Eiffel",mime:"text/x-eiffel",mode:"eiffel",ext:["e"]},{name:"Elm",mime:"text/x-elm",mode:"elm",ext:["elm"]},{name:"Embedded Javascript",mime:"application/x-ejs",mode:"htmlembedded",ext:["ejs"]},{name:"Embedded Ruby",mime:"application/x-erb",mode:"htmlembedded",ext:["erb"]},{name:"Erlang",mime:"text/x-erlang",mode:"erlang",ext:["erl"]},{name:"Esper",mime:"text/x-esper",mode:"sql"},{name:"Factor",mime:"text/x-factor",mode:"factor",ext:["factor"]},{name:"FCL",mime:"text/x-fcl",mode:"fcl"},{name:"Forth",mime:"text/x-forth",mode:"forth",ext:["forth","fth","4th"]},{name:"Fortran",mime:"text/x-fortran",mode:"fortran",ext:["f","for","f77","f90"]},{name:"F#",mime:"text/x-fsharp",mode:"mllike",ext:["fs"],alias:["fsharp"]},{name:"Gas",mime:"text/x-gas",mode:"gas",ext:["s"]},{name:"Gherkin",mime:"text/x-feature",mode:"gherkin",ext:["feature"]},{name:"GitHub Flavored Markdown",mime:"text/x-gfm",mode:"gfm",file:/^(readme|contributing|history).md$/i},{name:"Go",mime:"text/x-go",mode:"go",ext:["go"]},{name:"Groovy",mime:"text/x-groovy",mode:"groovy",ext:["groovy","gradle"],file:/^Jenkinsfile$/},{name:"HAML",mime:"text/x-haml",mode:"haml",ext:["haml"]},{name:"Haskell",mime:"text/x-haskell",mode:"haskell",ext:["hs"]},{name:"Haskell (Literate)",mime:"text/x-literate-haskell",mode:"haskell-literate",ext:["lhs"]},{name:"Haxe",mime:"text/x-haxe",mode:"haxe",ext:["hx"]},{name:"HXML",mime:"text/x-hxml",mode:"haxe",ext:["hxml"]},{name:"ASP.NET",mime:"application/x-aspx",mode:"htmlembedded",ext:["aspx"],alias:["asp","aspx"]},{name:"HTML",mime:"text/html",mode:"htmlmixed",ext:["html","htm","handlebars","hbs"],alias:["xhtml"]},{name:"HTTP",mime:"message/http",mode:"http"},{name:"IDL",mime:"text/x-idl",mode:"idl",ext:["pro"]},{name:"Pug",mime:"text/x-pug",mode:"pug",ext:["jade","pug"],alias:["jade"]},{name:"Java",mime:"text/x-java",mode:"clike",ext:["java"]},{name:"Java Server Pages",mime:"application/x-jsp",mode:"htmlembedded",ext:["jsp"],alias:["jsp"]},{name:"JavaScript",mimes:["text/javascript","text/ecmascript","application/javascript","application/x-javascript","application/ecmascript"],mode:"javascript",ext:["js"],alias:["ecmascript","js","node"]},{name:"JSON",mimes:["application/json","application/x-json"],mode:"javascript",ext:["json","map"],alias:["json5"]},{name:"JSON-LD",mime:"application/ld+json",mode:"javascript",ext:["jsonld"],alias:["jsonld"]},{name:"JSX",mime:"text/jsx",mode:"jsx",ext:["jsx"]},{name:"Jinja2",mime:"null",mode:"jinja2"},{name:"Julia",mime:"text/x-julia",mode:"julia",ext:["jl"]},{name:"Kotlin",mime:"text/x-kotlin",mode:"clike",ext:["kt"]},{name:"LESS",mime:"text/x-less",mode:"css",ext:["less"]},{name:"LiveScript",mime:"text/x-livescript",mode:"livescript",ext:["ls"],alias:["ls"]},{name:"Lua",mime:"text/x-lua",mode:"lua",ext:["lua"]},{name:"Markdown",mime:"text/x-markdown",mode:"markdown",ext:["markdown","md","mkd"]},{name:"mIRC",mime:"text/mirc",mode:"mirc"},{name:"MariaDB SQL",mime:"text/x-mariadb",mode:"sql"},{name:"Mathematica",mime:"text/x-mathematica",mode:"mathematica",ext:["m","nb"]},{name:"Modelica",mime:"text/x-modelica",mode:"modelica",ext:["mo"]},{name:"MUMPS",mime:"text/x-mumps",mode:"mumps",ext:["mps"]},{name:"MS SQL",mime:"text/x-mssql",mode:"sql"},{name:"mbox",mime:"application/mbox",mode:"mbox",ext:["mbox"]},{name:"MySQL",mime:"text/x-mysql",mode:"sql"},{name:"Nginx",mime:"text/x-nginx-conf",mode:"nginx",file:/nginx.*\.conf$/i},{name:"NSIS",mime:"text/x-nsis",mode:"nsis",ext:["nsh","nsi"]},{name:"NTriples",mimes:["application/n-triples","application/n-quads","text/n-triples"],mode:"ntriples",ext:["nt","nq"]},{name:"Objective-C",mime:"text/x-objectivec",mode:"clike",ext:["m","mm"],alias:["objective-c","objc"]},{name:"OCaml",mime:"text/x-ocaml",mode:"mllike",ext:["ml","mli","mll","mly"]},{name:"Octave",mime:"text/x-octave",mode:"octave",ext:["m"]},{name:"Oz",mime:"text/x-oz",mode:"oz",ext:["oz"]},{name:"Pascal",mime:"text/x-pascal",mode:"pascal",ext:["p","pas"]},{name:"PEG.js",mime:"null",mode:"pegjs",ext:["jsonld"]},{name:"Perl",mime:"text/x-perl",mode:"perl",ext:["pl","pm"]},{name:"PHP",mimes:["text/x-php","application/x-httpd-php","application/x-httpd-php-open"],mode:"php",ext:["php","php3","php4","php5","php7","phtml"]},{name:"Pig",mime:"text/x-pig",mode:"pig",ext:["pig"]},{name:"Plain Text",mime:"text/plain",mode:"null",ext:["txt","text","conf","def","list","log"]},{name:"PLSQL",mime:"text/x-plsql",mode:"sql",ext:["pls"]},{name:"PowerShell",mime:"application/x-powershell",mode:"powershell",ext:["ps1","psd1","psm1"]},{name:"Properties files",mime:"text/x-properties",mode:"properties",ext:["properties","ini","in"],alias:["ini","properties"]},{name:"ProtoBuf",mime:"text/x-protobuf",mode:"protobuf",ext:["proto"]},{name:"Python",mime:"text/x-python",mode:"python",ext:["BUILD","bzl","py","pyw"],file:/^(BUCK|BUILD)$/},{name:"Puppet",mime:"text/x-puppet",mode:"puppet",ext:["pp"]},{name:"Q",mime:"text/x-q",mode:"q",ext:["q"]},{name:"R",mime:"text/x-rsrc",mode:"r",ext:["r","R"],alias:["rscript"]},{name:"reStructuredText",mime:"text/x-rst",mode:"rst",ext:["rst"],alias:["rst"]},{name:"RPM Changes",mime:"text/x-rpm-changes",mode:"rpm"},{name:"RPM Spec",mime:"text/x-rpm-spec",mode:"rpm",ext:["spec"]},{name:"Ruby",mime:"text/x-ruby",mode:"ruby",ext:["rb"],alias:["jruby","macruby","rake","rb","rbx"]},{name:"Rust",mime:"text/x-rustsrc",mode:"rust",ext:["rs"]},{name:"SAS",mime:"text/x-sas",mode:"sas",ext:["sas"]},{name:"Sass",mime:"text/x-sass",mode:"sass",ext:["sass"]},{name:"Scala",mime:"text/x-scala",mode:"clike",ext:["scala"]},{name:"Scheme",mime:"text/x-scheme",mode:"scheme",ext:["scm","ss"]},{name:"SCSS",mime:"text/x-scss",mode:"css",ext:["scss"]},{name:"Shell",mimes:["text/x-sh","application/x-sh"],mode:"shell",ext:["sh","ksh","bash"],alias:["bash","sh","zsh"],file:/^PKGBUILD$/},{name:"Sieve",mime:"application/sieve",mode:"sieve",ext:["siv","sieve"]},{name:"Slim",mimes:["text/x-slim","application/x-slim"],mode:"slim",ext:["slim"]},{name:"Smalltalk",mime:"text/x-stsrc",mode:"smalltalk",ext:["st"]},{name:"Smarty",mime:"text/x-smarty",mode:"smarty",ext:["tpl"]},{name:"Solr",mime:"text/x-solr",mode:"solr"},{name:"SML",mime:"text/x-sml",mode:"mllike",ext:["sml","sig","fun","smackspec"]},{name:"Soy",mime:"text/x-soy",mode:"soy",ext:["soy"],alias:["closure template"]},{name:"SPARQL",mime:"application/sparql-query",mode:"sparql",ext:["rq","sparql"],alias:["sparul"]},{name:"Spreadsheet",mime:"text/x-spreadsheet",mode:"spreadsheet",alias:["excel","formula"]},{name:"SQL",mime:"text/x-sql",mode:"sql",ext:["sql"]},{name:"SQLite",mime:"text/x-sqlite",mode:"sql"},{name:"Squirrel",mime:"text/x-squirrel",mode:"clike",ext:["nut"]},{name:"Stylus",mime:"text/x-styl",mode:"stylus",ext:["styl"]},{name:"Swift",mime:"text/x-swift",mode:"swift",ext:["swift"]},{name:"sTeX",mime:"text/x-stex",mode:"stex"},{name:"LaTeX",mime:"text/x-latex",mode:"stex",ext:["text","ltx","tex"],alias:["tex"]},{name:"SystemVerilog",mime:"text/x-systemverilog",mode:"verilog",ext:["v","sv","svh"]},{name:"Tcl",mime:"text/x-tcl",mode:"tcl",ext:["tcl"]},{name:"Textile",mime:"text/x-textile",mode:"textile",ext:["textile"]},{name:"TiddlyWiki ",mime:"text/x-tiddlywiki",mode:"tiddlywiki"},{name:"Tiki wiki",mime:"text/tiki",mode:"tiki"},{name:"TOML",mime:"text/x-toml",mode:"toml",ext:["toml"]},{name:"Tornado",mime:"text/x-tornado",mode:"tornado"},{name:"troff",mime:"text/troff",mode:"troff",ext:["1","2","3","4","5","6","7","8","9"]},{name:"TTCN",mime:"text/x-ttcn",mode:"ttcn",ext:["ttcn","ttcn3","ttcnpp"]},{name:"TTCN_CFG",mime:"text/x-ttcn-cfg",mode:"ttcn-cfg",ext:["cfg"]},{name:"Turtle",mime:"text/turtle",mode:"turtle",ext:["ttl"]},{name:"TypeScript",mime:"application/typescript",mode:"javascript",ext:["ts"],alias:["ts"]},{name:"TypeScript-JSX",mime:"text/typescript-jsx",mode:"jsx",ext:["tsx"],alias:["tsx"]},{name:"Twig",mime:"text/x-twig",mode:"twig"},{name:"Web IDL",mime:"text/x-webidl",mode:"webidl",ext:["webidl"]},{name:"VB.NET",mime:"text/x-vb",mode:"vb",ext:["vb"]},{name:"VBScript",mime:"text/vbscript",mode:"vbscript",ext:["vbs"]},{name:"Velocity",mime:"text/velocity",mode:"velocity",ext:["vtl"]},{name:"Verilog",mime:"text/x-verilog",mode:"verilog",ext:["v"]},{name:"VHDL",mime:"text/x-vhdl",mode:"vhdl",ext:["vhd","vhdl"]},{name:"Vue.js Component",mimes:["script/x-vue","text/x-vue"],mode:"vue",ext:["vue"]},{name:"XML",mimes:["application/xml","text/xml"],mode:"xml",ext:["xml","xsl","xsd","svg"],alias:["rss","wsdl","xsd"]},{name:"XQuery",mime:"application/xquery",mode:"xquery",ext:["xy","xquery"]},{name:"Yacas",mime:"text/x-yacas",mode:"yacas",ext:["ys"]},{name:"YAML",mimes:["text/x-yaml","text/yaml"],mode:"yaml",ext:["yaml","yml"],alias:["yml"]},{name:"Z80",mime:"text/x-z80",mode:"z80",ext:["z80"]},{name:"mscgen",mime:"text/x-mscgen",mode:"mscgen",ext:["mscgen","mscin","msc"]},{name:"xu",mime:"text/x-xu",mode:"mscgen",ext:["xu"]},{name:"msgenny",mime:"text/x-msgenny",mode:"mscgen",ext:["msgenny"]}];for(var t=0;t<e.modeInfo.length;t++){var i=e.modeInfo[t];i.mimes&&(i.mime=i.mimes[0])}e.findModeByMIME=function(t){t=t.toLowerCase();for(var i=0;i<e.modeInfo.length;i++){var s=e.modeInfo[i];if(s.mime==t)return s;if(s.mimes)for(var n=0;n<s.mimes.length;n++)if(s.mimes[n]==t)return s}return/\+xml$/.test(t)?e.findModeByMIME("application/xml"):/\+json$/.test(t)?e.findModeByMIME("application/json"):void 0},e.findModeByExtension=function(t){for(var i=0;i<e.modeInfo.length;i++){var s=e.modeInfo[i];if(s.ext)for(var n=0;n<s.ext.length;n++)if(s.ext[n]==t)return s}},e.findModeByFileName=function(t){for(var i=0;i<e.modeInfo.length;i++){var s=e.modeInfo[i];if(s.file&&s.file.test(t))return s}var n=t.lastIndexOf("."),a=n>-1&&t.substring(n+1,t.length);if(a)return e.findModeByExtension(a)},e.findModeByName=function(t){t=t.toLowerCase();for(var i=0;i<e.modeInfo.length;i++){var s=e.modeInfo[i];if(s.name.toLowerCase()==t)return s;if(s.alias)for(var n=0;n<s.alias.length;n++)if(s.alias[n].toLowerCase()==t)return s}}})(i(4))},function(e,t,i){(function(e){"use strict";var t=/^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\.beep|\.lwz|\.xpc|\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\.beeps?|xmpp|xri|ymsgr|z39\.50[rs]?):(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]|\([^\s()<>]*\))+(?:\([^\s()<>]*\)|[^\s`*!()\[\]{};:'".,<>?«»“”‘’]))/i;e.defineMode("gfm",function(i,s){var n=0;var a={startState:function(){return{code:!1,codeBlock:!1,ateSpace:!1}},copyState:function(e){return{code:e.code,codeBlock:e.codeBlock,ateSpace:e.ateSpace}},token:function(e,i){if(i.combineTokens=null,i.codeBlock)return e.match(/^```+/)?(i.codeBlock=!1,null):(e.skipToEnd(),null);if(e.sol()&&(i.code=!1),e.sol()&&e.match(/^```+/))return e.skipToEnd(),i.codeBlock=!0,null;if("`"===e.peek()){e.next();var a=e.pos;e.eatWhile("`");var o=1+e.pos-a;return i.code?o===n&&(i.code=!1):(n=o,i.code=!0),null}if(i.code)return e.next(),null;if(e.eatSpace())return i.ateSpace=!0,null;if((e.sol()||i.ateSpace)&&(i.ateSpace=!1,!1!==s.gitHubSpice)){if(e.match(/^(?:[a-zA-Z0-9\-_]+\/)?(?:[a-zA-Z0-9\-_]+@)?(?=.{0,6}\d)(?:[a-f0-9]{7,40}\b)/))return i.combineTokens=!0,"link";if(e.match(/^(?:[a-zA-Z0-9\-_]+\/)?(?:[a-zA-Z0-9\-_]+)?#[0-9]+\b/))return i.combineTokens=!0,"link"}return e.match(t)&&"]("!=e.string.slice(e.start-2,e.start)&&(0==e.start||/\W/.test(e.string.charAt(e.start-1)))?(i.combineTokens=!0,"link"):(e.next(),null)},blankLine:function(e){return e.code=!1,null}},o={taskLists:!0,strikethrough:!0,emoji:!0};for(var r in s)o[r]=s[r];return o.name="markdown",e.overlayMode(e.getMode(i,o),a)},"markdown"),e.defineMIME("text/x-gfm","gfm")})(i(4),i(179),i(599))},function(e,t,i){(function(e){"use strict";e.overlayMode=function(t,i,s){return{startState:function(){return{base:e.startState(t),overlay:e.startState(i),basePos:0,baseCur:null,overlayPos:0,overlayCur:null,streamSeen:null}},copyState:function(s){return{base:e.copyState(t,s.base),overlay:e.copyState(i,s.overlay),basePos:s.basePos,baseCur:null,overlayPos:s.overlayPos,overlayCur:null}},token:function(e,n){return(e!=n.streamSeen||Math.min(n.basePos,n.overlayPos)<e.start)&&(n.streamSeen=e,n.basePos=n.overlayPos=e.start),e.start==n.basePos&&(n.baseCur=t.token(e,n.base),n.basePos=e.pos),e.start==n.overlayPos&&(e.pos=e.start,n.overlayCur=i.token(e,n.overlay),n.overlayPos=e.pos),e.pos=Math.min(n.basePos,n.overlayPos),null==n.overlayCur?n.baseCur:null!=n.baseCur&&n.overlay.combineTokens||s&&null==n.overlay.combineTokens?n.baseCur+" "+n.overlayCur:n.overlayCur},indent:t.indent&&function(e,i){return t.indent(e.base,i)},electricChars:t.electricChars,innerMode:function(e){return{state:e.base,mode:t}},blankLine:function(e){var n,a;return t.blankLine&&(n=t.blankLine(e.base)),i.blankLine&&(a=i.blankLine(e.overlay)),null==a?n:s&&null!=n?n+" "+a:a}}}})(i(4))},function(e,t,i){(function(e){"use strict";function t(e){for(var t={},i=e.split(" "),s=0;s<i.length;++s)t[i[s]]=!0;return t}function i(e,t,n){return 0==e.length?s(t):function(a,o){for(var r=e[0],l=0;l<r.length;l++)if(a.match(r[l][0]))return o.tokenize=i(e.slice(1),t),r[l][1];return o.tokenize=s(t,n),"string"}}function s(e,t){return function(s,n){return function(e,t,s,n){if(!1!==n&&e.match("${",!1)||e.match("{$",!1))return t.tokenize=null,"string";if(!1!==n&&e.match(/^\$[a-zA-Z_][a-zA-Z0-9_]*/))return e.match("[",!1)&&(t.tokenize=i([[["[",null]],[[/\d[\w\.]*/,"number"],[/\$[a-zA-Z_][a-zA-Z0-9_]*/,"variable-2"],[/[\w\$]+/,"variable"]],[["]",null]]],s,n)),e.match(/\-\>\w/,!1)&&(t.tokenize=i([[["->",null]],[[/[\w]+/,"variable"]]],s,n)),"variable-2";var a=!1;for(;!e.eol()&&(a||!1===n||!e.match("{$",!1)&&!e.match(/^(\$[a-zA-Z_][a-zA-Z0-9_]*|\$\{)/,!1));){if(!a&&e.match(s)){t.tokenize=null,t.tokStack.pop(),t.tokStack.pop();break}a="\\"==e.next()&&!a}return"string"}(s,n,e,t)}}var n="abstract and array as break case catch class clone const continue declare default do else elseif enddeclare endfor endforeach endif endswitch endwhile extends final for foreach function global goto if implements interface instanceof namespace new or private protected public static switch throw trait try use var while xor die echo empty exit eval include include_once isset list require require_once return print unset __halt_compiler self static parent yield insteadof finally",a="true false null TRUE FALSE NULL __CLASS__ __DIR__ __FILE__ __LINE__ __METHOD__ __FUNCTION__ __NAMESPACE__ __TRAIT__",o="func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined trigger_error user_error set_error_handler restore_error_handler get_declared_classes get_loaded_extensions extension_loaded get_extension_funcs debug_backtrace constant bin2hex hex2bin sleep usleep time mktime gmmktime strftime gmstrftime strtotime date gmdate getdate localtime checkdate flush wordwrap htmlspecialchars htmlentities html_entity_decode md5 md5_file crc32 getimagesize image_type_to_mime_type phpinfo phpversion phpcredits strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos strrpos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count strcoll substr substr_replace quotemeta ucfirst ucwords strtr addslashes addcslashes rtrim str_replace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode setlocale localeconv parse_str str_pad chop strchr sprintf printf vprintf vsprintf sscanf fscanf parse_url urlencode urldecode rawurlencode rawurldecode readlink linkinfo link unlink exec system escapeshellcmd escapeshellarg passthru shell_exec proc_open proc_close rand srand getrandmax mt_rand mt_srand mt_getrandmax base64_decode base64_encode abs ceil floor round is_finite is_nan is_infinite bindec hexdec octdec decbin decoct dechex base_convert number_format fmod ip2long long2ip getenv putenv getopt microtime gettimeofday getrusage uniqid quoted_printable_decode set_time_limit get_cfg_var magic_quotes_runtime set_magic_quotes_runtime get_magic_quotes_gpc get_magic_quotes_runtime import_request_variables error_log serialize unserialize memory_get_usage var_dump var_export debug_zval_dump print_r highlight_file show_source highlight_string ini_get ini_get_all ini_set ini_alter ini_restore get_include_path set_include_path restore_include_path setcookie header headers_sent connection_aborted connection_status ignore_user_abort parse_ini_file is_uploaded_file move_uploaded_file intval floatval doubleval strval gettype settype is_null is_resource is_bool is_long is_float is_int is_integer is_double is_real is_numeric is_string is_array is_object is_scalar ereg ereg_replace eregi eregi_replace split spliti join sql_regcase dl pclose popen readfile rewind rmdir umask fclose feof fgetc fgets fgetss fread fopen fpassthru ftruncate fstat fseek ftell fflush fwrite fputs mkdir rename copy tempnam tmpfile file file_get_contents file_put_contents stream_select stream_context_create stream_context_set_params stream_context_set_option stream_context_get_options stream_filter_prepend stream_filter_append fgetcsv flock get_meta_tags stream_set_write_buffer set_file_buffer set_socket_blocking stream_set_blocking socket_set_blocking stream_get_meta_data stream_register_wrapper stream_wrapper_register stream_set_timeout socket_set_timeout socket_get_status realpath fnmatch fsockopen pfsockopen pack unpack get_browser crypt opendir closedir chdir getcwd rewinddir readdir dir glob fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype file_exists is_writable is_writeable is_readable is_executable is_file is_dir is_link stat lstat chown touch clearstatcache mail ob_start ob_flush ob_clean ob_end_flush ob_end_clean ob_get_flush ob_get_clean ob_get_length ob_get_level ob_get_status ob_get_contents ob_implicit_flush ob_list_handlers ksort krsort natsort natcasesort asort arsort sort rsort usort uasort uksort shuffle array_walk count end prev next reset current key min max in_array array_search extract compact array_fill range array_multisort array_push array_pop array_shift array_unshift array_splice array_slice array_merge array_merge_recursive array_keys array_values array_count_values array_reverse array_reduce array_pad array_flip array_change_key_case array_rand array_unique array_intersect array_intersect_assoc array_diff array_diff_assoc array_sum array_filter array_map array_chunk array_key_exists array_intersect_key array_combine array_column pos sizeof key_exists assert assert_options version_compare ftok str_rot13 aggregate session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close preg_match preg_match_all preg_replace preg_replace_callback preg_split preg_quote preg_grep overload ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit virtual apache_request_headers apache_note apache_lookup_uri apache_child_terminate apache_setenv apache_response_headers apache_get_version getallheaders mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_create_db mysql_drop_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_createdb mysql_dropdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename mysql_table_name pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_ping pg_query pg_send_query pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_prtlen pg_field_is_null pg_get_notify pg_get_pid pg_result_error pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_escape_bytea pg_unescape_bytea pg_client_encoding pg_set_client_encoding pg_meta_data pg_convert pg_insert pg_update pg_delete pg_select pg_exec pg_getlastoid pg_cmdtuples pg_errormessage pg_numrows pg_numfields pg_fieldname pg_fieldsize pg_fieldtype pg_fieldnum pg_fieldprtlen pg_fieldisnull pg_freeresult pg_result pg_loreadall pg_locreate pg_lounlink pg_loopen pg_loclose pg_loread pg_lowrite pg_loimport pg_loexport http_response_code get_declared_traits getimagesizefromstring socket_import_stream stream_set_chunk_size trait_exists header_register_callback class_uses session_status session_register_shutdown echo print global static exit array empty eval isset unset die include require include_once require_once json_decode json_encode json_last_error json_last_error_msg curl_close curl_copy_handle curl_errno curl_error curl_escape curl_exec curl_file_create curl_getinfo curl_init curl_multi_add_handle curl_multi_close curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_init curl_multi_remove_handle curl_multi_select curl_multi_setopt curl_multi_strerror curl_pause curl_reset curl_setopt_array curl_setopt curl_share_close curl_share_init curl_share_setopt curl_strerror curl_unescape curl_version mysqli_affected_rows mysqli_autocommit mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect_errno mysqli_connect_error mysqli_connect mysqli_data_seek mysqli_debug mysqli_dump_debug_info mysqli_errno mysqli_error_list mysqli_error mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_field_direct mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_lengths mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_charset mysqli_get_client_info mysqli_get_client_stats mysqli_get_client_version mysqli_get_connection_stats mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_prepare mysqli_query mysqli_real_connect mysqli_real_escape_string mysqli_real_query mysqli_reap_async_query mysqli_refresh mysqli_rollback mysqli_select_db mysqli_set_charset mysqli_set_local_infile_default mysqli_set_local_infile_handler mysqli_sqlstate mysqli_ssl_set mysqli_stat mysqli_stmt_init mysqli_store_result mysqli_thread_id mysqli_thread_safe mysqli_use_result mysqli_warning_count";e.registerHelper("hintWords","php",[n,a,o].join(" ").split(" ")),e.registerHelper("wordChars","php",/[\w$]/);var r={name:"clike",helperType:"php",keywords:t(n),blockKeywords:t("catch do else elseif for foreach if switch try while finally"),defKeywords:t("class function interface namespace trait"),atoms:t(a),builtin:t(o),multiLineStrings:!0,hooks:{$:function(e){return e.eatWhile(/[\w\$_]/),"variable-2"},"<":function(e,t){var i;if(i=e.match(/<<\s*/)){var n=e.eat(/['"]/);e.eatWhile(/[\w\.]/);var a=e.current().slice(i[0].length+(n?2:1));if(n&&e.eat(n),a)return(t.tokStack||(t.tokStack=[])).push(a,0),t.tokenize=s(a,"'"!=n),"string"}return!1},"#":function(e){for(;!e.eol()&&!e.match("?>",!1);)e.next();return"comment"},"/":function(e){if(e.eat("/")){for(;!e.eol()&&!e.match("?>",!1);)e.next();return"comment"}return!1},'"':function(e,t){return(t.tokStack||(t.tokStack=[])).push('"',0),t.tokenize=s('"'),"string"},"{":function(e,t){return t.tokStack&&t.tokStack.length&&t.tokStack[t.tokStack.length-1]++,!1},"}":function(e,t){return t.tokStack&&t.tokStack.length>0&&!--t.tokStack[t.tokStack.length-1]&&(t.tokenize=s(t.tokStack[t.tokStack.length-2])),!1}}};e.defineMode("php",function(t,i){var s=e.getMode(t,i&&i.htmlMode||"text/html"),n=e.getMode(t,r);return{startState:function(){var t=e.startState(s),a=i.startOpen?e.startState(n):null;return{html:t,php:a,curMode:i.startOpen?n:s,curState:i.startOpen?a:t,pending:null}},copyState:function(t){var i,a=t.html,o=e.copyState(s,a),r=t.php,l=r&&e.copyState(n,r);return i=t.curMode==s?o:l,{html:o,php:l,curMode:t.curMode,curState:i,pending:t.pending}},token:function(t,i){var a=i.curMode==n;if(t.sol()&&i.pending&&'"'!=i.pending&&"'"!=i.pending&&(i.pending=null),a)return a&&null==i.php.tokenize&&t.match("?>")?(i.curMode=s,i.curState=i.html,i.php.context.prev||(i.php=null),"meta"):n.token(t,i.curState);if(t.match(/^<\?\w*/))return i.curMode=n,i.php||(i.php=e.startState(n,s.indent(i.html,""))),i.curState=i.php,"meta";if('"'==i.pending||"'"==i.pending){for(;!t.eol()&&t.next()!=i.pending;);var o="string"}else i.pending&&t.pos<i.pending.end?(t.pos=i.pending.end,o=i.pending.style):o=s.token(t,i.curState);i.pending&&(i.pending=null);var r,l=t.current(),c=l.search(/<\?/);return-1!=c&&("string"==o&&(r=l.match(/[\'\"]$/))&&!/\?>/.test(l)?i.pending=r[0]:i.pending={end:t.pos,style:o},t.backUp(l.length-c)),o},indent:function(e,t){return e.curMode!=n&&/^\s*<\//.test(t)||e.curMode==n&&/^\?>/.test(t)?s.indent(e.html,t):e.curMode.indent(e.curState,t)},blockCommentStart:"/*",blockCommentEnd:"*/",lineComment:"//",innerMode:function(e){return{state:e.curState,mode:e.curMode}}}},"htmlmixed","clike"),e.defineMIME("application/x-httpd-php","php"),e.defineMIME("application/x-httpd-php-open",{name:"php",startOpen:!0}),e.defineMIME("text/x-php",r)})(i(4),i(176),i(180))},function(e,t){e.exports=' <div class=markdown-fieldtype-wrapper :class="{\'markdown-fullscreen\': fullScreenMode}"> <div class="markdown-toolbar clearfix"> <ul class=markdown-modes> <li :class="{ \'active\': mode == \'write\' }"> <a href="" @click.prevent="mode = \'write\'" tabindex=-1>{{ translate(\'cp.write\') }}</a> </li> <li :class="{ \'active\': mode == \'preview\' }"> <a href="" @click.prevent="mode = \'preview\'" tabindex=-1>{{ translate(\'cp.preview\') }}</a> </li> </ul> <ul class=markdown-buttons> <li><a @click=bold tabindex=-1><b>B</b></a></li> <li><a @click=italic tabindex=-1><i>i</i></a></li> <li><a @click="insertLink(\'\')" tabindex=-1> <span class="icon icon-link"></span> </a></li> <li><a @click="insertImage(\'\')" tabindex=-1> <span class="icon icon-image"></span> </a></li> <li><a @click=toggleFullScreen tabindex=-1> <span class=icon :class="{\n                    \'icon-resize-full-screen\' : ! fullScreenMode,\n                    \'icon-resize-100\' : fullScreenMode\n                    }"></span> </a></li> </ul> </div> <div class="mode-wrap mode-{{ mode }}"> <div class=markdown-writer v-el:writer v-show="mode == \'write\'" @dragover="draggingFile = true" @dragleave="draggingFile = false" @drop="draggingFile = false" @keydown=shortcut> <div class=editor v-el:codemirror></div> <div class=helpers v-if="cheatsheet || assetsEnabled"> <div class=markdown-cheatsheet-helper v-if=cheatsheet> <a href="" @click.prevent="showCheatsheet = true"> <svg xmlns=http://www.w3.org/2000/svg width=208 height=128 viewBox="0 0 208 128"><mask id=a><rect width=100% height=100% fill=#fff /><path d="M30 98v-68h20l20 25 20-25h20v68h-20v-39l-20 25-20-25v39zM155 98l-30-33h20v-35h20v35h20z"/></mask><rect width=100% height=100% ry=15 mask=url(#a) /></svg> {{ translate(\'cp.markdown_cheatsheet\') }} </a> </div> <div class=markdown-asset-helper v-if=assetsEnabled> <a href="" @click.prevent=addAsset><span class="icon icon-image"></span> {{ translate(\'cp.add_asset\') }}</a> (or drag &amp; drop) </div> </div> <div class=drag-notification v-if="assetsEnabled && draggingFile"> <i class="icon icon-download"></i> <h3>{{ translate(\'cp.drop_to_upload\') }}</h3> </div> </div> <div v-show="mode == \'preview\'" v-html="data || \'\' | markdown" class=markdown-preview></div> </div> <selector v-if=showAssetSelector :container=container :folder=folder :selected=selectedAssets :restrict-navigation=restrictAssetNavigation @selected=assetsSelected @closed=closeAssetSelector></selector> <uploader v-ref:uploader v-if="! showAssetSelector" :dom-element=uploadElement :container=container :path=folder @upload-complete=uploadComplete> </uploader> <modal :show.sync=showCheatsheet class=markdown-modal> <template slot=header>{{ translate(\'cp.markdown_cheatsheet\') }}</template> <template slot=body> {{{ translate(\'markdown.cheatsheet\') }}} </template> </modal> </div> '},function(e,t,i){var s,n={};s=i(603),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(n).forEach(function(e){var t=n[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(5),n=i.n(s);t.default={mixins:[n.a]}},function(e,t,i){var s,n,a={};s=i(605),n=i(606),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],methods:{focus:function(){document.getElementById(this.name+"-0").focus()},getReplicatorPreviewText:function(){var t=e.findWhere(this.config.options,{value:this.data});return t?t.text:this.data}}}}.call(t,i(1))},function(e,t){e.exports=" <div class=radio-fieldtype-wrapper> <ul :class=\"[\n        'list-unstyled',\n        config.inline ? 'list-inline' : ''\n    ]\"> <li v-for=\"option in config.options\"> <input type=radio v-model=data :value=option.value :id=\"name + '-' + $index\"/> <label :for=\"name + '-' + $index\">{{ option.text }}</label> </li> </ul> </div> "},function(e,t,i){var s,n,a={};s=i(608),n=i(609),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){var n=i(173);t.default={components:{selector:i(10)},mixins:[n.a,Fieldtype],data:function(){return{mode:"write"}},methods:{update:function(e){this.data=e},insertLink:function(t,i){var s=e(this.$els.redactor).redactor("selection.getHtml");s&&(i=s),e(this.$els.redactor).redactor("insert.html",'<a href="'+t+'">'+i+"</a>")},insertImage:function(t,i){e(this.$els.redactor).redactor("insert.html",'<img src="'+t+'" alt="'+i+'" />')},appendImage:function(t,i){var s=e(this.$els.redactor),n=s.redactor("code.get");s.redactor("code.set",n+'<img src="'+t+'" alt="'+i+'" />')},appendLink:function(t,i){var s=e(this.$els.redactor),n=s.redactor("code.get");s.redactor("code.set",n+'<a href="'+t+'">'+i+"</a>")},assetsSelected:function(t){var i=this,n=e(i.$els.redactor);n.redactor("selection.restore");var a=n.redactor("selection.getHtml"),o=n.redactor("code.get");t.length>1&&n.redactor("focus.setEnd"),this.$http.post(cp_url("assets/get"),{assets:t},function(e){s(e).each(function(e){var s=e.url,r=e.alt||"",l=(e.title===e.filename?null:e.title)||e.alt||e.basename;1===t.length?e.is_image?i.insertImage(s,r):i.insertLink(s,a||l):(e.is_image?o+='<img src="'+s+'" alt="'+r+'" />':o+='<a href="'+s+'">'+l+"</a>",n.redactor("code.set",o))})}),this.closeAssetSelector(),this.selectedAssets=[]},getReplicatorPreviewText:function(){return this.data?e(this.$els.redactor).redactor("clean.getTextFromHtml",this.data).replace(/\n/g," "):""},focus:function(){e(this.$els.redactor).redactor("focus.setEnd")},getFieldtypeConfig:function(){return this.config}},ready:function(){var t=this,i={minHeight:250,changeCallback:function(){t.update(this.code.get())}};if(this.config.settings&&"string"!=typeof this.config.settings&&console.warn("Redactor Fieldtype: You must reference the settings name instead of adding them inline."),s.has(Statamic.redactorSettings,this.config.settings))var n=Statamic.redactorSettings[this.config.settings];else n=Statamic.redactorSettings[s.first(s.keys(Statamic.redactorSettings))];var a=s.extend(i,n);a.plugins=a.plugins||[],this.assetsEnabled&&a.plugins.push("assets"),e(this.$els.redactor).redactor(a)}}}.call(t,i(2),i(1))},function(e,t){e.exports=" <div class=redactor-fieldtype-wrapper> <textarea v-el:redactor :name=name v-model=data></textarea> <selector v-if=showAssetSelector :container=container :folder=folder :selected=selectedAssets :restrict-navigation=restrictAssetNavigation @selected=assetsSelected @closed=closeAssetSelector></selector> </div> "},function(e,t,i){var s,n,a={};s=i(611),n=i(612),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","name","config"],computed:{selectConfig:function(){var t=[{value:null,text:""}];return e.each(Statamic.redactorSettings,function(e,i){t.push({value:i,text:i})}),{options:t}}}}}.call(t,i(1))},function(e,t){e.exports=" <div class=redactor-settings-wrapper> <select-fieldtype :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> "},function(e,t,i){var s,n,a={};s=i(614),n=i(621),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var s=i(615),n=i.n(s),a=i(618),o=i.n(a),r=i(182);t.default={mixins:[Fieldtype,r.a],components:{"relate-panes":n.a,"relate-tags":o.a},props:["suggestionsProp"],data:function(){return{loading:!0,suggestions:[],autoBindChangeWatcher:!1,shouldFocusWhenLoaded:!1}},computed:{single:function(){return this.maxItems&&1===this.maxItems},maxItems:function(){return parseInt(this.config.max_items)},mode:function(){return this.config.mode||"tags"},panes:function(){return"panes"===this.mode},tags:function(){return"tags"===this.mode},canCreate:function(){return this.config.create}},methods:{getSuggestions:function(){if(this.suggestionsProp)this.populateSuggestions(this.suggestionsProp);else{var e=data_get(Statamic,"Publish.suggestions."+this.suggestKey);e?this.populateSuggestions(e):this.$http.post(cp_url("addons/suggest/suggestions"),this.config,function(e){this.populateSuggestions(e)})}},populateSuggestions:function(e){var t=this;this.suggestions=e,this.removeInvalidData(),this.loading=!1,this.bindChangeWatcher(),this.shouldFocusWhenLoaded&&this.$nextTick(function(){return t.focus()})},removeInvalidData:function(){var t=this;t.single?e.findWhere(t.suggestions,{value:t.data[0]})||(t.data=null):t.data=e.filter(t.data,function(i){return e.findWhere(t.suggestions,{value:i})})},getReplicatorPreviewText:function(){var t=this;if(this.data){var i=JSON.parse(JSON.stringify(this.data));return this.suggestions&&(i=i.map(function(i){var s=e.findWhere(t.suggestions,{value:i});return s?s.text:i})),i.join(", ")}},focus:function(){this.loading?this.shouldFocusWhenLoaded=!0:(this.$refs[this.mode].focus(),this.shouldFocusWhenLoaded=!1)}},ready:function(){this.data||(this.data=[]),this.config||(this.config=[]),this.getSuggestions(),this.$watch("suggestionsProp",function(e){this.suggestions=e})}}}.call(t,i(1))},function(e,t,i){var s,n,a={};s=i(616),n=i(617),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={props:["name","data","suggestions","maxItems"],data:function(){return{search:null,active:-1}},computed:{availableSuggestions:function(){var t=this;return e.reject(t.suggestions,function(i){var s=e.contains(t.data,i.value),n=!0;return t.search&&(n=-1!==i.text.toLowerCase().indexOf(t.search.toLowerCase())),s||!n})},selected:function(){var t=this;return e.map(t.data,function(i){return e.findWhere(t.suggestions,{value:i})})},maxSelected:function(){return!!this.maxItems&&this.data.length>=this.maxItems}},methods:{initSortable:function(){var e=this;i(this.$els.sortable).sortable({axis:"y",placeholder:"item-placeholder",forcePlaceholderSize:!0,revert:175,start:function(e,t){t.item.data("start",t.item.index())},update:function(t,i){var s=i.item.data("start"),n=i.item.index();e.data.splice(n,0,e.data.splice(s,1)[0])}})},select:function(e){this.maxSelected||this.data.push(e.value)},remove:function(t){var i=e.indexOf(this.data,t.value);this.data.splice(i,1)},goUp:function(){this.active--,this.active<0&&(this.active=0)},goDown:function(){this.active++,this.active>=this.availableSuggestions.length-1&&(this.active=this.availableSuggestions.length-1)},selectActive:function(){var e=this.availableSuggestions[this.active];this.select(e),this.active>=this.availableSuggestions.length&&(this.active=this.availableSuggestions.length-1)},focus:function(){this.$els.filter.focus()}},ready:function(){this.initSortable(),this.$watch("search",function(){this.availableSuggestions.length<=this.active&&(this.active=this.availableSuggestions.length-1)}),this.$watch("data",function(){this.$nextTick(function(){i(this.$els.sortable).sortable("refresh")})})}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <div class="relate-panes clearfix" :class="{ \'max-selected\': maxSelected }"> <div class="relate-pane pane-suggestions"> <div class=pane-header> <input type=text class="form-control relate-search" placeholder=Filter v-el:filter v-model=search @keydown.enter=selectActive @keyup.up=goUp @keyup.down=goDown /> </div> <div class=relate-items> <div class=item v-for="item in availableSuggestions" :class="{ \'active\': $index === active }" @click.prevent=select(item)> {{{ item.text }}} <span class="icon icon-chevron-right"></span> </div> </div> </div> <div class="relate-pane pane-selections"> <div class=pane-header>Selected</div> <div class=relate-items v-el:sortable> <div class=item v-for="item in selected"> <span class=item-remove @click.prevent=remove(item)>&times;</span> {{{ item.text }}} </div> </div> </div> <input type=hidden :name=name :value="data | json"/> </div> '},function(e,t,i){var s,n,a={};s=i(619),n=i(620),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","suggestions","maxItems","create","name"],ready:function(){var t=this;"string"==typeof this.data&&(this.data=[this.data]),e(this.$els.tags).selectize({options:this.suggestions,items:this.data,maxItems:this.maxItems,plugins:["drag_drop","remove_button"],onChange:function(e){t.data=e},create:this.create})},methods:{focus:function(){this.$els.tags.selectize.focus()}}}}.call(t,i(2))},function(e,t){e.exports=" <select v-el:tags multiple=multiple tabindex=0></select> <input type=hidden :name=name :value=data|json class=form-control /> "},function(e,t){e.exports=' <div class=relate-fieldtype> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <relate-tags v-if="!loading && (tags || single)" v-ref:tags :data.sync=data :suggestions=suggestions :max-items=maxItems :create=canCreate :name=name> </relate-tags> <relate-panes v-if="!loading && panes && !single" v-ref:panes :data.sync=data :suggestions=suggestions :max-items=maxItems :name=name> </relate-panes> </div> '},function(e,t,i){var s,n,a={};s=i(623),n=i(627),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){var n=i(170);t.default={mixins:[n.a,Fieldtype],components:{ReplicatorSet:i(624)},data:function(){return{blank:{},sortableOptions:{},autoBindChangeWatcher:!1,changeWatcherWatchDeep:!1,accordionMode:!0}},computed:{hasData:function(){return null!==this.data&&this.data.length}},ready:function(){this.data||(this.data=[]),this.bindChangeWatcher(),this.sortable()},methods:{sortable:function(){var t=this,i="";e(this.$el).children(".replicator-sets").sortable({axis:"y",revert:175,placeholder:"stacked-placeholder",handle:".drag-handle",forcePlaceholderSize:!0,start:function(e,t){i=t.item.index(),t.placeholder.height(t.item.height())},update:function(e,s){var n=s.item.index(),a=JSON.parse(JSON.stringify(t.data));a.splice(n,0,a.splice(i,1)[0]),t.data=a}})},addSet:function(e,t){var i=this,n={type:e},a=this.setConfig(e);s.each(a.fields,function(e){n[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),void 0===t&&(t=this.data.length),this.data.splice(t,0,n),this.accordionMode&&this.collapseAllExcept(t),this.sortable(),this.$nextTick(function(){return i.$refs.set[t].focus()})},collapseAllExcept:function(e){s.map(this.$refs.set,function(t){t.index!==e&&t.collapse()})},setExpanded:function(e,t){t||this.accordionMode&&this.collapseAllExcept(e.index)},getReplicatorPreviewText:function(){return s.map(this.$refs.set,function(e){return e.collapsedPreview}).join(", ")}}}}.call(t,i(2),i(1))},function(e,t,i){var s,n,a={};s=i(625),n=i(626),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(171);t.default={mixins:[s.a]}},function(e,t){e.exports=' <div class=list-group> <div class="list-group-item group-header pl-3 drag-handle" :class="{\'collapsed\': isHidden}" v-on:dblclick=toggle> <div class=flexy> <div class=fill> <div class="flexy baseline"> <label @click=toggle class=clickable>{{ display }}</label> <div v-if=isHidden> <small class="replicator-set-summary fill" v-html=collapsedPreview></small> </div> </div> <small class=help-block v-if="instructions && !isHidden" v-html="instructions | markdown"></small> </div> <div class="btn-group icon-group action-more"> <button type=button class="btn-more dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <slot name=expand-collapse></slot> <li class=warning><a @click=delete>{{ translate(\'cp.delete_set\') }}</a></li> <li class=divider></li> <slot name=add-sets></slot> </ul> </div> </div> </div> <div class="list-group-item p-0" v-show=!isHidden> <div class="publish-fields p-1"> <div v-for="field in config.fields" :class=fieldClasses(field)> <label class=block v-if=hasMultipleFields :class="{\'bold\': field.bold}"> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | capitalize }}</template> <i class=required v-if=field.required>*</i> </label> <small class=help-block v-if=field.instructions v-html="field.instructions | markdown"></small> <component :is=componentName(field.type) :name="parentName + \'.\' + index + \'.\' + field.name" :data.sync=data[field.name] :config=field> </component> </div> </div> </div> </div> '},function(e,t){e.exports=' <div class="replicator replicator-fieldtype-wrapper relative"> <div class=replicator-sets> <replicator-set v-for="(index, set) in data" v-ref:set :parent-name=name :data=set :index=index :config=setConfig(set.type) @deleted=deleteSet @expanded=setExpanded> <template slot=expand-collapse> <li><a @click=collapseAll>{{ translate(\'cp.collapse_all\') }}</a></li> <li><a @click=expandAll>{{ translate(\'cp.expand_all\') }}</a></li> </template> <template slot=add-sets> <li v-for="setConfig in config.sets"> <a @click.prevent="addSet(setConfig.name, index + 1)"> <i class="icon icon-add-to-list"></i> {{ setConfig.display || setConfig.name }} </a> </li> </template> </replicator-set> </div> <button type=button class="btn btn-default mr-8 mb-8" v-for="set in config.sets" v-on:click=addSet(set.name) v-tip :tip-text=set.instructions> {{ set.display || set.name }}<i class="icon icon-plus icon-right"></i> </button> </div> '},function(e,t,i){var s,n,a={};s=i(629),n=i(630),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype],computed:{isRevealed:function(){return!0===this.data}},methods:{reveal:function(){this.data=!0}}}},function(e,t){e.exports=' <div> <button v-if="! isRevealed" @click=reveal class=btn v-tip :tip-text=config.instructions>{{ config.display }}</button> </div> '},function(e,t,i){var s,n,a={};s=i(632),n=i(633),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["data","config","name"],data:function(){return{gridConfig:{add_row:translate("cp.add_locale"),fields:[{name:"locale",type:"text",display:translate("cp.locale"),width:"20"},{name:"route",type:"text",display:translate("cp.route")}]}}}}},function(e,t){e.exports=' <div class=routes-fieldtype-wrapper> <grid-fieldtype :data=data :config=gridConfig></grid-fieldtype> <input type=hidden :name=name :value="data | json"/> </div> '},function(e,t,i){var s,n={};s=i(635),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(n).forEach(function(e){var t=n[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["name","data","config"]}},function(e,t,i){var s,n,a={};s=i(637),n=i(638),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],props:["options"],data:function(){return{keyed:!1,selectOptions:[],isActive:!1}},ready:function(){this.options?this.selectOptions=this.options:this.selectOptions=this.config.options},computed:{label:function(){var t=e.isNumber(this.data)?parseInt(this.data):this.data,i=e.findWhere(this.selectOptions,{value:t});return i?i.text:this.data}},methods:{focus:function(){this.$els.select.focus()},getReplicatorPreviewText:function(){return this.label}}}}.call(t,i(1))},function(e,t){e.exports=' <div class="select select-full" :class="{ \'select--active\': isActive }" :data-content=label> <select v-el:select :name=name v-model=data tabindex=0 @focus="isActive = true" @blur="isActive = false"> <option v-for="option in selectOptions" :value=option.value>{{ option.text }}</option> </select> </div> '},function(e,t,i){var s,n,a={};s=i(640),n=i(641),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["selected","translations"],data:function(){return{options:[{text:"Live",value:"live"},{text:"Hidden",value:"hidden"},{text:"Draft",value:"draft"}]}}}},function(e,t){e.exports=' <div class="select select-full" data-content="{{ selected | capitalize }}"> <span class="status status-{{ selected }}"></span> <select name=status v-model=selected options=options></select> </div> '},function(e,t,i){var s,n,a={};s=i(643),n=i(644),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){var n=i(182);t.default={mixins:[Fieldtype,n.a],props:["suggestionsProp"],data:function(){return{loading:!0,suggestions:[]}},methods:{getSuggestions:function(){if(this.suggestionsProp)this.populateSuggestions(this.suggestionsProp);else{var e=data_get(Statamic,"Publish.suggestions."+this.suggestKey);e?this.populateSuggestions(e):this.$http.post(cp_url("addons/suggest/suggestions"),this.config,function(e){this.populateSuggestions(e)})}},populateSuggestions:function(t){if(this.suggestions=t,this.data){var i=[];e.each(this.data,function(e,t,s){i.push({value:e,text:e})}),this.suggestions=e.union(t,i)}this.loading=!1,this.$nextTick(function(){this.initSelectize()})},initSelectize:function(){var e=this;s(this.$el).find("select").selectize({options:this.suggestions,items:this.data,create:this.config.create||!1,maxItems:this.config.max_items,placeholder:this.config.placeholder,plugins:["drag_drop","remove_button"],onChange:function(t){e.data=t}})},getReplicatorPreviewText:function(){var t=this;if(this.data){var i=JSON.parse(JSON.stringify(this.data));return this.suggestions&&(i=i.map(function(i){var s=e.findWhere(t.suggestions,{value:i});return s?s.text:i})),i.join(", ")}}},ready:function(){this.getSuggestions()}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <div class=suggest-fieldtype-wrapper> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select v-if=!loading :name=name :placeholder="translate(\'cp.please_select\')" :multiple=true> </select> </div> '},function(e,t,i){var s,n,a={};s=i(646),n=i(647),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={mixins:[Fieldtype],data:function(){return{max_rows:this.config.max_rows||null,max_columns:this.config.max_columns||null,autoBindChangeWatcher:!1,sortableInitialized:!1}},computed:{columnCount:function(){return this.data&&this.data[0]?this.data[0].cells.length:0},rowCount:function(){return this.data&&this.data.length?this.data.length:0},canAddRows:function(){return!this.max_rows||this.rowCount<this.max_rows},canAddColumns:function(){return!(!this.rowCount&&!this.columnCount)&&(!this.max_columns||this.columnCount<this.max_columns)}},methods:{sortable:function(){if(!this.sortableInitialized&&0!==this.data.length){var t=this,i="";e(this.$el).find("tbody").sortable({axis:"y",revert:175,handle:".drag-handle",placeholder:"table-row-placeholder",forcePlaceholderSize:!0,start:function(e,t){i=t.item.index(),t.placeholder.height(t.item.height())},update:function(e,s){var n=s.item.index(),a=t.data.splice(i,1)[0];t.data.splice(n,0,a)}}),this.sortableInitialized=!0}},destroySortable:function(){e(this.$el).find("tbody").sortable("destroy"),this.sortableInitialized=!1},addRow:function(){var e=0===this.columnCount?1:this.columnCount;this.data.push({cells:new Array(e)})},addColumn:function(){for(var e=this.data.length,t=0;t<e;t++)this.data[t].cells.push("")},deleteRow:function(e){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.data.splice(e,1)})},deleteColumn:function(e){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_items",1),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){for(var i=t.data.length,s=0;s<i;s++)t.data[s].cells.splice(e,1)})},getReplicatorPreviewText:function(){return i(this.data).map(function(e){return e.cells.filter(function(e){return!!e}).join(", ")}).filter(function(e){return!!e}).join(", ")}},ready:function(){this.data||(this.data=[]),this.bindChangeWatcher(),this.sortable()},watch:{data:function(e){var t=this;this.$nextTick(function(){t.data.length?t.sortable():t.destroySortable()})}}}}.call(t,i(2),i(1))},function(e,t){e.exports=' <div class=table-field> <table class=bordered-table v-if="rowCount || columnCount"> <thead> <tr> <th v-for="column in columnCount"> <span class=column-count>{{ $index + 1 }}</span> <span class="icon icon-cross delete-column" @click=deleteColumn($index)></span> </th> <th class=row-controls></th> </tr> </thead> <tbody> <tr v-for="row in data"> <td v-for="cell in row.cells" track-by=$index> <input type=text v-model=cell class=form-control /> </td> <td class=row-controls> <span class="icon icon-menu move drag-handle"></span> <span class="icon icon-cross delete" v-on:click=deleteRow($index)></span> </td> </tr> </tbody> </table> <div class=btn-group> <a class="btn btn-default" @click=addRow v-if=canAddRows> {{ translate_choice(\'cp.rows\', 1) }} <i class="icon icon-plus icon-right"></i> </a> <a class="btn btn-default" @click=addColumn v-if=canAddColumns> {{ translate_choice(\'cp.columns\', 1) }} <i class="icon icon-plus icon-right"></i> </a> </div> </div> '},function(e,t,i){var s,n,a={};s=i(649),n=i(650),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],ready:function(){var t=this;e(this.$els.tags).selectize({delimiter:",",persist:!1,plugins:["drag_drop","remove_button"],create:function(e){return{value:e,text:e}},onChange:function(e){t.data=e.split(",")},onItemRemove:function(e){delete this.options[e]}})},methods:{focus:function(){this.$els.tags.selectize.focus()}}}}.call(t,i(2))},function(e,t){e.exports=" <div class=tag-fieldtype-wrapper> <input type=text v-el:tags :value=data /> </div> "},function(e,t,i){var s,n,a={};s=i(652),n=i(653),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(5),n=i.n(s);t.default={mixins:[n.a],computed:{adjustedConfig:function(){var e=this.config;return void 0===e.create&&(e.create=!0),"string"!=typeof this.config.taxonomy&&(e.create=!1),e}}}},function(e,t){e.exports=" <div> <relate-fieldtype :data.sync=data :name=name :config=adjustedConfig v-ref:relate></relate-fieldtype> </div> "},function(e,t,i){var s,n,a={};s=i(655),n=i(656),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","config","name"],data:function(){return{loading:!0,options:{}}},computed:{selectConfig:function(){return{options:this.options}}},ready:function(){this.$http.get(cp_url("system/templates/get"),function(t){var i=[{value:null,text:""}];e.each(t,function(e){i.push({value:e,text:e})}),this.options=i,this.loading=!1})}}}.call(t,i(1))},function(e,t){e.exports=' <div> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select-fieldtype v-if=!loading :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> '},function(e,t,i){var s,n,a={};s=i(658),n=i(659),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype,AutoSlug],props:["autofocus"],data:function(){return{mode:this.config.mode||"text"}},computed:{classes:function(){return"form-control type-"+this.mode}},ready:function(){this.config.autoslug&&this.autoSlug(this.config.autoslug)}}},function(e,t){e.exports=" <input :type=mode :class=classes v-model=data tabindex=0 :autofocus=autofocus /> "},function(e,t,i){var s,n,a={};s=i(661),n=i(662),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype]}},function(e,t){e.exports=" <textarea class=form-control v-model=data v-el:textarea v-elastic></textarea> "},function(e,t,i){var s,n,a={};s=i(664),n=i(665),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","config","name"],data:function(){return{loading:!0,options:{}}},computed:{selectConfig:function(){return{options:this.options}}},ready:function(){this.$http.get(cp_url("system/themes/get"),function(t){var i=[];e.each(t,function(e){i.push({value:e.folder,text:e.name})}),this.options=i,this.loading=!1})}}}.call(t,i(1))},function(e,t){e.exports=' <div class=theme-fieldtype-wrapper> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select-fieldtype v-if=!loading :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> '},function(e,t,i){var s,n,a={};s=i(667),n=i(668),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],props:{required:Boolean},computed:{hour:{set:function(e){this.ensureTime();var t=this.data.split(":"),i=parseInt(e);i=(i=i>23?23:i)<0?0:i,t[0]=this.pad(i),this.data=t.join(":")},get:function(){return this.hasTime?this.pad(this.data.split(":")[0]):""}},minute:{set:function(e){this.ensureTime();var t=this.data.split(":"),i=parseInt(e);i=(i=i>59?59:i)<0?0:i,t[1]=this.pad(i),this.data=t.join(":")},get:function(){return this.hasTime?this.pad(this.data.split(":")[1]):""}},hasTime:function(){return this.required||null!==this.data},isRequired:function(){return this.required}},methods:{pad:function(e){return("00"+e).substr(-2,2)},ensureTime:function(){this.hasTime||this.initializeTime()},initializeTime:function(){this.data="00:00"},clear:function(){this.data=null},incrementHour:function(e){this.ensureTime();var t=parseInt(this.hour)+e;t=-1===(t=24===t?0:t)?23:t,this.hour=t},incrementMinute:function(e){this.ensureTime();var t=parseInt(this.minute)+e;t=-1===(t=60===t?0:t)?59:t,this.minute=t},focusMinute:function(){e(this.$els.minute).focus().select()},focus:function(){this.$els.hour.focus()}}}}.call(t,i(2))},function(e,t){e.exports=' <div class=time-template-wrapper> <input class=form-control type=number min=00 max=23 v-model=hour v-el:hour @keydown.up.prevent=incrementHour(1) @keydown.down.prevent=incrementHour(-1) @keydown.esc=clear @keydown.186.prevent=focusMinute @keydown.190.prevent=focusMinute tabindex=0 /> <span class=colon>:</span> <input class=form-control type=number min=00 max=59 v-model=minute v-el:minute @keydown.up.prevent=incrementMinute(1) @keydown.down.prevent=incrementMinute(-1) @keydown.esc=clear tabindex=0 /> <div> <span class="icon icon-remove" tabindex=0 v-if="!isRequired && hasTime" @click=clear @keyup.enter.space=clear> &times; </span> </div> </div> '},function(e,t,i){var s,n,a={};s=i(670),n=i(671),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype],data:function(){return{autoBindChangeWatcher:!1}},computed:{isOn:function(){var e=!0;return this.config&&this.config.reverse&&(e=!1),this.data===e}},methods:{toggle:function(){this.data=!this.data},focus:function(){this.$els.knob.focus()}},ready:function(){null===this.data&&(this.data=this.config.default||!1),this.bindChangeWatcher()}}},function(e,t){e.exports=" <div class=toggle-fieldtype-wrapper> <div class=toggle-container :class=\"{ 'on': isOn }\" @click=toggle> <div class=toggle-slider> <div class=toggle-knob tabindex=0 @keyup.prevent.space.enter=toggle v-el:knob tabindex=0></div> </div> </div> </div> "},function(e,t,i){var s,n,a={};s=i(673),n=i(674),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(4);i(181),t.default={mixins:[Fieldtype],data:function(){return{codemirror:null}},ready:function(){var e=this;this.codemirror=s(this.$els.codemirror,{value:this.data||this.config.default||"",mode:"yaml",lineNumbers:!0,viewportMargin:1/0}),this.codemirror.on("change",function(t){e.data=t.doc.getValue()})},methods:{focus:function(){this.codemirror.focus()}}}},function(e,t){e.exports=" <div class=yaml-fieldtype-wrapper> <span>YAML</span> <div class=editor v-el:codemirror></div> </div> "},function(e,t,i){var s,n,a={};s=i(676),n=i(677),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){var n=i(5),a=i.n(n);t.default={mixins:[a.a],data:function(){return{loading:!0,groups:{}}},computed:{canEdit:function(){return e.can("super")},selectedGroupNames:function(){var e=this;return s.map(this.data,function(t){return s.findWhere(e.groups,{value:t}).text})}},methods:{getGroups:function(){this.$http.get(cp_url("users/groups/get"),function(e){var t=[];s.each(e.items,function(e){t.push({value:e.id,text:e.title})}),this.groups=t,this.loading=!1})}},ready:function(){this.getGroups()}}}.call(t,i(3),i(1))},function(e,t){e.exports=' <div> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if="!loading && !canEdit"> <template v-for="group in selectedGroupNames"> {{ group }}<template v-if="$index !== selectedGroupNames.length-1">,</template> </template> </div> <div class=user_groups-fieldtype v-if="!loading && canEdit"> <relate-fieldtype :data.sync=data :name=name :config=config :suggestions-prop=groups v-ref:relate> </relate-fieldtype> </div> </div> '},function(e,t,i){var s,n,a={};s=i(679),n=i(680),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,s){var n=i(5),a=i.n(n);t.default={mixins:[a.a],data:function(){return{loading:!0,roles:{}}},computed:{canEdit:function(){return e.can("super")},selectedRoleNames:function(){var e=this;return s.map(this.data,function(t){return s.findWhere(e.roles,{value:t}).text})}},methods:{getRoles:function(){this.$http.get(cp_url("users/roles/get"),function(e){var t=[];s.each(e.items,function(e){t.push({value:e.id,text:e.title})}),this.roles=t,this.loading=!1})}},ready:function(){this.getRoles()}}}.call(t,i(3),i(1))},function(e,t){e.exports=' <div> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <p v-if="!loading && !canEdit" class=form-control-static> <template v-for="role in selectedRoleNames"> {{ role }}<template v-if="$index !== selectedRoleNames.length-1">,</template> </template> </p> <div class=user_roles-fieldtype v-if="!loading && canEdit"> <relate-fieldtype :data.sync=data :name=name :config=config :suggestions-prop=roles v-ref:relate> </relate-fieldtype> </div> </div> '},function(e,t,i){var s,n,a={};i(682),s=i(683),n=i(684),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["data","config","name"],computed:{embed:function(){return this.data.includes("youtube")?this.data.replace("watch?v=","embed/"):this.data.includes("youtu.be")?this.data.replace("youtu.be","www.youtube.com/embed"):this.data.includes("vimeo")?this.data.replace("/vimeo.com","/player.vimeo.com/video"):this.data},isEmbeddable:function(){return this.data.includes("youtube")||this.data.includes("vimeo")||this.data.includes("youtu.be")},isVideo:function(){return!this.isEmbeddable&&(this.data.includes(".mp4")||this.data.includes(".ogv")||this.data.includes(".mov")||this.data.includes(".webm"))}}}},function(e,t){e.exports=' <input type=text v-model=data class=form-control /> <div class=video-preview-wrapper v-if="isEmbeddable || isVideo"> <div class=video-preview> <iframe v-if=isEmbeddable width=560 height=315 src="{{ embed }}" frameborder=0 allowfullscreen></iframe> <video controls v-if=isVideo :src=embed width=560 height=315></video> </div> </div> '},function(e,t,i){var s,n,a={};s=i(686),n=i(687),e.exports=s||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;n&&(o.template=n),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:{name:String,data:{default:function(){return[]}},config:{type:Object,default:function(){return{}}}},ready:function(){e.set(this.config,"type","users")}}}.call(t,i(3))},function(e,t){e.exports=" <div class=users-fieldtype> <relate-fieldtype :data.sync=data :name=name :config=config v-if=config.type></relate-fieldtype> </div> "},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var t=i(3),s=i.n(t),n=i(689),a=i(690);s.a.directive("elastic",a.a),s.a.directive("tip",n.a),s.a.directive("focus",function(t){var i=this;t&&(e("[autofocus]").length>0&&!e(this.el).within(".form-group").length||this.vm.$nextTick(function(){return i.el.focus()}))})}.call(t,i(2))},function(e,t,i){"use strict";var s=i(183),n=i.n(s);t.a={params:["tipText"],update:function(){this.params.tipText&&(this.el.setAttribute("title",this.params.tipText),n()(this.el,{size:"small",animateFill:!1,theme:"light",performance:!0}))}}},function(e,t,i){"use strict";var s=i(18),n=i.n(s);t.a={bind:function(){setTimeout(function(){n()(this.el)}.bind(this),10)}}},function(e,t){}],[184]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,